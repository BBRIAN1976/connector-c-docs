<?xml version="1.0"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="4.5" xml:lang="en">
  <title>MariaDB Connector/C</title>
  
<!-- $Revision: 334762 $ -->

 <info xml:id="bookinfo">
  <pubdate>2014-09-10</pubdate>

  <copyright>
   <year>2012-2014&gt;</year>
   <holder>the MariaDB Foundation</holder>
  </copyright>

  <legalnotice xml:id="copyright">
   <title>Copyright</title>
   <simpara>
    Copyright © 2012 - 2014 by the MariaDB Foundation.
    This material may be distributed only subject to the terms and
    conditions set forth in the Creative Commons Attribution 3.0
    License or later. A copy of the <link linkend="cc.license">Creative
    Commons Attribution 3.0 license</link> is distributed with this manual.
    The latest version is presently available at
   <link xlink:href="http://creativecommons.org/licenses/by/3.0/">http://creativecommons.org/licenses/by/3.0/</link>.
   </simpara>
   <simpara>
    If you are interested in redistribution or republishing of this document
    in whole or in part, either modified or unmodified, and you have questions,
    please contact the Copyright holders at
    <link xlink:href="mailto:docs@mariadb.org">docs@mariadb.org</link>.
    Note that this address is mapped to a publicly archived mailing list.
   </simpara>
  </legalnotice>

 </info>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->


  
<preface xml:id="preface">
 <title>
  Preface
 </title>
 <para>
  <emphasis role="bold">What is MariaDB Connector/C?</emphasis>
 </para>
 <para>
  The MariaDB Connector/C (also known as libmariadb) is the C application
  programmers interface to MariaDB, Percona and MySQL database servers. It
  contains a collection of functions that allow client programs to send
  statements to the MariaDB server and to receive data of these statements. The
  MariaDB client library is licensed under the LGPL License Version 2. The
  latest version is presently available at
  <link xlink:href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html">http://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html</link>
  .
 </para>
 <para>
  MariaDB Connector/C can be also used as an underlying layer for other
  application and programm interfaces like PHP, Perl, Python and others.
 </para>
 <para>
  MariaDB Connector/C has three different parts:
 </para>
 <itemizedlist mark="opencircle">
  <listitem>
   <para>
    Client server communication API
   </para>
  </listitem>
  <listitem>
   <para>
    Character set and conversion API
   </para>
  </listitem>
  <listitem>
   <para>
    Dynamic columns API
   </para>
  </listitem>
<!--
  <listitem>
   <para>
    Asynchronous communication API
   </para>
  </listitem>
-->
 </itemizedlist>
 <para>
  The function reference contains examples for each function, the source code
  can be found in the example directory of the documentation package.
 </para>
 <para>
  You can download this manual from the Mariadb website at
  <link xlink:href="http://www.mariadb.org/downloads">http://www.mariadb.org/downloads</link>
  .
 </para>
 <para>
  <emphasis role="strong">History</emphasis>
 </para>
 <para>
  Version 1.0 of MariaDB Connector/C was released in December 2012. It
  was built on top of the MySQL 3.23.58 LGPL library. It
  uses the prepared statement interface of PHP's mysqlnd extension and the iconv
  library for character set encoding and conversion.
 </para>
 <para>
  It was written as an powerful alternative to the GPL licensed MySQL client
  library, since restrictons of the GPL license don't allow to use it in closed
  source applications or applications which were published under another
  incompatible open source license.
 </para>
 <para>
  <emphasis role="strong">Differences between MariaDB Connector/C and MySQL client libraries</emphasis>
 </para>
 <para>
  <informaltable frame="none">
   <tgroup cols="3" colsep="0" rowsep="0">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="1" ?>
    <thead>
     <row>
      <entry role="ma_table" colsep="0">Feature</entry>
      <entry role="ma_table" colsep="0">MariaDB Connector/C</entry>
      <entry role="ma_table" colsep="0">MySQL client library</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry role="ma_table">Compressed protocol</entry>
      <entry role="ma_table">✓</entry>
      <entry role="ma_table">✓</entry>
     </row>
     <row>
      <entry role="ma_table">SSL</entry>
      <entry role="ma_table">✓ (open ssl)</entry>
      <entry role="ma_table">✓ (yassl or openssl)</entry>
     </row>
     <row>
      <entry role="ma_table">Shared memory (Windows)</entry>
      <entry role="ma_table">✓</entry>
      <entry role="ma_table">✓</entry>
     </row>
     <row>
      <entry role="ma_table">Named pipe (Windows)</entry>
      <entry role="ma_table">✓</entry>
      <entry role="ma_table">✓</entry>
     </row>
     <row>
      <entry role="ma_table">IPV6</entry>
      <entry role="ma_table">✓</entry>
      <entry role="ma_table">✓</entry>
     </row>
     <row>
      <entry role="ma_table">Support for versions prior 4.1</entry>
      <entry role="ma_table"/>
      <entry role="ma_table">✓</entry>
     </row>

     <row>
      <entry role="ma_table">Character set conversion</entry>
      <entry role="ma_table">✓</entry>
      <entry role="ma_table">✓ (limited/internal)</entry>
     </row>
     <row>
      <entry role="ma_table">Asynchronous API</entry>
      <entry role="ma_table">✓</entry>
      <entry role="ma_table"/>
     </row>
     <row>
      <entry role="ma_table">Dynamic columns</entry>
      <entry role="ma_table">✓</entry>
      <entry role="ma_table"/>
     </row>
     <row>
      <entry role="ma_table">Thread safety</entry>
      <entry role="ma_table">✓</entry>
      <entry role="ma_table">✓</entry>
     </row>
     <row>
      <entry role="ma_table">Embedded server</entry>
      <entry role="ma_table"/>
      <entry role="ma_table">✓</entry>
     </row>
     <row>
      <entry role="ma_table">Support for MySQL commercial plugins</entry>
      <entry role="ma_table"/>
      <entry role="ma_table">✓</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </para>
</preface>


  
<section xmlns="">
 <para>
  The MariaDB client library (also known as libmariadb) is the C application
  programmers interface to MariaDB. It contains a collection of functions that
  allow client programs to send statements to the MariaDB server and to receive
  data of these statements.
 </para>
 <para>
  The MariaDB client library is licensed under the LGPL License Version 2. It's
  derived from the MySQL 3.23.58 client library and PHP's mysqlnd extension. It
  is fully binary compatible to MySQL client library, so it's possible to
  communicate with database servers from other vendors. Since the MariaDB server
  offers more functionality not all functions might be supported by databases
  from other vendors.
 </para>
 <para>
  It can be also used as an underlying layer for other application and programm
  interfaces like PHP, Perl, Python and others.
 </para>
<!--
<para>
The function reference contains examples for each function, the source code can be found in the example directory of the documentation package.
</para>
-->
</section>

  
<chapter xmlns="" id="installation">
 <title>
  Installation
 </title>
 <section>
  <title>
   Windows operating systems
  </title>
  <para>
   MariaDB client library supports the following windows versions:
   <informaltable frame="none">
    <tgroup cols="3" colsep="0" rowsep="0">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="1" ?>
     <thead>
      <row>
       <entry role="ma_table" colsep="0">Version</entry>
       <entry role="ma_table" colsep="0">32-bit</entry>
       <entry role="ma_table" colsep="0">64-bit</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry role="ma_table" colsep="0">Microsoft Windows 8</entry>
       <entry role="ma_table" colsep="0">•</entry>
       <entry role="ma_table" colsep="0">•</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">Microsoft Windows 2012 Server</entry>
       <entry role="ma_table" colsep="0">•</entry>
       <entry role="ma_table" colsep="0">•</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">Microsoft Windows 7</entry>
       <entry role="ma_table" colsep="0">•</entry>
       <entry role="ma_table" colsep="0">•</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">Microsoft Windows 2008 Server</entry>
       <entry role="ma_table" colsep="0">•</entry>
       <entry role="ma_table" colsep="0">•</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">Microsoft Vista</entry>
       <entry role="ma_table" colsep="0">•</entry>
       <entry role="ma_table" colsep="0">•</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">Microsoft Windows 2003 Server</entry>
       <entry role="ma_table" colsep="0">•</entry>
       <entry role="ma_table" colsep="0">•</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">Microsoft Windows XP</entry>
       <entry role="ma_table" colsep="0">•</entry>
       <entry role="ma_table" colsep="0">•</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
  <para>
   The following sections describe how to install the MariaDB client library
   from source packages or by using the binary packages.
  </para>
  <section>
   <title>
    Building from source
   </title>
   <procedure>
    <title>
     Prerequisites
    </title>
    <step>
     <para>
      Make sure that Microsoft Visual Studio 2012 (or newer) is installed on
      your system. The Express version of Visual Studio will work too.
     </para>
    </step>
    <step>
     <para>
      Download and install the following components:
     </para>
     <substeps>
      <step>
       Download and install CMake 2.8 (or higher version), available from <ulink url="http://www.cmake.org">www.cmake.org</ulink>
      </step>
      <para>
       Download and install the following optional components
      </para>
      <substeps>
       <step>
        OpenSSL libraries, available from <ulink url="http://slproweb.com/products/Win32OpenSSL.html">http://slproweb.com/products/Win32OpenSSL.html</ulink>.
       </step>
       <step>
        In case you don't want to use the bundled zlib library, download and install 
        Zlib library, available from <ulink url="http://gnuwin32.sourceforge.net/packages/zlib.htm">http://gnuwin32.sourceforge.net/packages/zlib.htm</ulink>. 
       </step>
       <step>
        For building an executable MSI installation binary, download and install the Wix Toolset, available at
        <ulink url="http://http://wixtoolset.org/">http://wixtoolset.org/</ulink>
       </step>
      </substeps>
     </substeps>
    </step>
    <step>
     <para>
      Make sure that cmake and required libraries are in your
      <envar>PATH</envar>
      environment variable. The
      <envar>PATH</envar>
      can be either set in command prompt or in system settings.
     </para>
    </step>
   </procedure>
   <procedure>
    <title>
     Getting the source code
    </title>
    <step>
     <para>
      Download the source code package from <ulink url="http://www.mariadb.org/downloads">www.mariadb.com/downloads</ulink> or obtain
      latest development version from bazaar repository on launchpad.net.
     </para>
     <substeps>
      <step>
       For downloading the repository from launchpad.net you need to install bazaar, available at <ulink url="https://launchpad.net/bzr/+download">https://launchpad.net/bzr/+download</ulink>.
      </step>
      <step>
       <para>
        Checkout the repository
       </para>
       <synopsis>bzr branch lp:mariadb-native-client mariadb_client</synopsis>
       <para>
        or extract the source code package in a separate directory on your hard
        disk.
       </para>
      </step>
     </substeps>
    </step>
   </procedure>
   <procedure>
    <title>
     Creating make files
    </title>
    <step>
     <para>
      Open a command prompt and change to the directory which contains the
      MariaDB client library sources. If you prefer to build in a separate
      directory change to your build directory.
     </para>
    </step>
    <step>
     <para>
      Create your make- or solution files with cmake.
     </para>
     <synopsis>cmake [directory] -[Doption]..</synopsis>
     <para>
      CMake supports the followig build options:
      <informaltable frame="none">
       <caption>Build types</caption>
       <tgroup cols="2" colsep="0" rowsep="0">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="1" ?>
        <thead>
         <row>
          <entry role="ma_table" colsep="0">Build type</entry>
          <entry role="ma_table" colsep="0">Description</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry role="ma_table" colsep="0">-DCMAKE_BUILD_TYPE=Release</entry>
          <entry role="ma_table" colsep="0">Creates a release version without debug symbols and information</entry>
         </row>
         <row>
          <entry role="ma_table" colsep="0">-DCMAKE_BUILD_TYPE=RelWithDebInfo</entry>
          <entry role="ma_table" colsep="0">Creates a optimized version without some basic debug information</entry>
         </row>
         <row>
          <entry role="ma_table" colsep="0">-DCMAKE_BUILD_TYPE=Debug</entry>
          <entry role="ma_table" colsep="0">Creates a non optimized version which can be debugged</entry>
         </row>
        </tbody>
       </tgroup>
      </informaltable>
      <informaltable frame="none">
       <caption>Build features</caption>
       <tgroup cols="2" colsep="0" rowsep="0">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="1" ?>
        <thead>
         <row>
          <entry role="ma_table" colsep="0">Feature</entry>
          <entry role="ma_table" colsep="0">Description</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry role="ma_table" colsep="0">-DWITH_OPENSSL=On/Off</entry>
          <entry role="ma_table" colsep="0">Support for encrypted connections.
                       Requires installation of OpenSSL libraries.
                    </entry>
         </row>
         <row>
          <entry role="ma_table" colsep="0">-DWITH_SQLITE=On/Off</entry>
          <entry role="ma_table" colsep="0">Enables experimental sqlite support via MariaDB API.</entry>
         </row>
         <row>
          <entry role="ma_table" colsep="0">-DWITH_EXTERNAL_ZLIB=On/Off</entry>
          <entry role="ma_table" colsep="0">uses external zlib library instead of bundled zlb library.</entry>
         </row>
        </tbody>
       </tgroup>
      </informaltable>
     </para>
     <example>
      <para>
       Build with SSL support
      </para>
      <synopsis>C:\work\build&gt;cmake C:\work\mariadb-client -DCMAKE_BUILD_TYPE=Release -DWITH_OPENSSL=On</synopsis>
     </example>
    </step>
   </procedure>
   <procedure>
    <title>
     Build MariaDB client library
    </title>
    <step>
     <para>
      Start Visual Studio, load the solution file and build the project
     </para>
    </step>
    <stepalternatives>
     <step>
      In case cmake was executed with NMake Makefiles generator, start building the project by executig nmake.
     </step>
    </stepalternatives>
   </procedure>
   <note>
    <title>Notes</title>
    <para>
     CMake allows you to specify a generator name: e.g. for building the MariaDB
     client library with
     <command>nmake</command>
     you need pass the parameter
     <parameter>-G "NMake Makefiles"</parameter>
     .
    </para>
   </note>
  </section>
  <section>
   <title>
    Installing Binaries
   </title>
   <para>
    MariaDB client library binaries can be installed either by self executable
    msi installation package or by the binary distribution which is packed in
    zip format.
   </para>
   <para>
    Both packages are available from the download site at
    <ulink url="http://www.mariadb.org/downloads">www.mariadb.com/downloads</ulink>
   </para>
  </section>
 </section>
</chapter>

  <chapter id="api">
    <title>API</title>
    
<section xmlns="">
 <title>
  Character set API
 </title>
 <para>
  MariaDB client library supports various character sets and client side
  character set conversion.
 </para>
 <para>
  Due to license restrictions MariaDB client library doesn't use the character
  set routines and functionality from the server. Instead it uses the iconv
  library and on Windows platforms native Windows API functions. This might lead
  to different results, since server routines don't support all panes of
  specific character sets.
 </para>
 <note>
    <title>Notes</title>
    <para>
   Character set support was added in Version 1.1
  </para>
  <para>
   The default character set is utf8.
  </para>
 </note>
 
<sect1 id="chapter.charsets">
 <title>
  Supported character sets
 </title>
 <para>
  The following table lists the available character sets, corresponding
  codepages and iconv character sets.
 </para>
 <table frame="none">
  <caption>Supported character sets</caption>
  <tgroup cols="4" colsep="0" rowsep="0">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="1" ?>
   <thead>
    <row>
     <entry role="ma_table" colsep="0">Character set</entry>
     <entry role="ma_table" colsep="0">Description</entry>
     <entry role="ma_table" colsep="0">Max. length</entry>
     <entry role="ma_table" colsep="0">Windows CP</entry>
     <entry role="ma_table" colsep="0">Iconv character set</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry role="ma_table">armscii8</entry>
     <entry role="ma_table">ARMSCII-8 Armenian</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">-</entry>
     <entry role="ma_table">ARMSCII-8</entry>
    </row>
    <row>
     <entry role="ma_table">ascii</entry>
     <entry role="ma_table">US ASCII</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">20127</entry>
     <entry role="ma_table">ASCII</entry>
    </row>
    <row>
     <entry role="ma_table">big5</entry>
     <entry role="ma_table">Big5 Traditional Chinese</entry>
     <entry role="ma_table" align="right">2</entry>
     <entry role="ma_table" align="right">950</entry>
     <entry role="ma_table">BIG5</entry>
    </row>
    <row>
     <entry role="ma_table">binary</entry>
     <entry role="ma_table">Binary pseudo charset</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">-</entry>
     <entry role="ma_table">-</entry>
    </row>
    <row>
     <entry role="ma_table">cp1250</entry>
     <entry role="ma_table">Windows Central European</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">1250</entry>
     <entry role="ma_table">CP1250</entry>
    </row>
    <row>
     <entry role="ma_table">cp1251</entry>
     <entry role="ma_table">Windows Cyrillic</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">1251</entry>
     <entry role="ma_table">CP1251</entry>
    </row>
    <row>
     <entry role="ma_table">cp1256</entry>
     <entry role="ma_table">Windows Arabic</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">1256</entry>
     <entry role="ma_table">CP1256</entry>
    </row>
    <row>
     <entry role="ma_table">cp1257</entry>
     <entry role="ma_table">Windows Baltic</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">1257</entry>
     <entry role="ma_table">CP1257</entry>
    </row>
    <row>
     <entry role="ma_table">cp850</entry>
     <entry role="ma_table">DOS West European</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">850</entry>
     <entry role="ma_table">CP850</entry>
    </row>
    <row>
     <entry role="ma_table">cp852</entry>
     <entry role="ma_table">DOS Central European</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">852</entry>
     <entry role="ma_table">CP852</entry>
    </row>
    <row>
     <entry role="ma_table">cp866</entry>
     <entry role="ma_table">DOS Russian</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">866</entry>
     <entry role="ma_table">CP866</entry>
    </row>
    <row>
     <entry role="ma_table">cp932</entry>
     <entry role="ma_table">SJIS for Windows Japanese</entry>
     <entry role="ma_table" align="right">2</entry>
     <entry role="ma_table" align="right">932</entry>
     <entry role="ma_table">CP932</entry>
    </row>
    <row>
     <entry role="ma_table">dec8</entry>
     <entry role="ma_table">DEC West European</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">-</entry>
     <entry role="ma_table">DEC</entry>
    </row>
    <row>
     <entry role="ma_table">eucjpms</entry>
     <entry role="ma_table">UJIS for Windows Japanese</entry>
     <entry role="ma_table" align="right">3</entry>
     <entry role="ma_table" align="right">-</entry>
     <entry role="ma_table">EUCJ-MS</entry>
    </row>
    <row>
     <entry role="ma_table">euckr</entry>
     <entry role="ma_table">EUC-KR Korean</entry>
     <entry role="ma_table" align="right">2</entry>
     <entry role="ma_table" align="right">51949</entry>
     <entry role="ma_table">EUCKR</entry>
    </row>
    <row>
     <entry role="ma_table">gb2312</entry>
     <entry role="ma_table">GB2312 Simplified Chinese</entry>
     <entry role="ma_table" align="right">2</entry>
     <entry role="ma_table" align="right">20936</entry>
     <entry role="ma_table">GB2312</entry>
    </row>
    <row>
     <entry role="ma_table">gbk</entry>
     <entry role="ma_table">GBK Simplified Chinese</entry>
     <entry role="ma_table" align="right">2</entry>
     <entry role="ma_table" align="right">936</entry>
     <entry role="ma_table">GBK</entry>
    </row>
    <row>
     <entry role="ma_table">geostd8</entry>
     <entry role="ma_table">GEOSTD8 Georgian</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">-</entry>
     <entry role="ma_table">GEORGIAN-PS</entry>
    </row>
    <row>
     <entry role="ma_table">greek</entry>
     <entry role="ma_table">ISO 8859-7 Greek</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">28597</entry>
     <entry role="ma_table">ISO_8859_7</entry>
    </row>
    <row>
     <entry role="ma_table">hebrew</entry>
     <entry role="ma_table">ISO 8859-8 Hebrew</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">28598</entry>
     <entry role="ma_table">ISO_8859_8</entry>
    </row>
    <row>
     <entry role="ma_table">hp8</entry>
     <entry role="ma_table">HP West European</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">-</entry>
     <entry role="ma_table">HP-ROMAN8</entry>
    </row>
    <row>
     <entry role="ma_table">keybcs2</entry>
     <entry role="ma_table">DOS Kamenicky Czech-Slovak</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">-</entry>
     <entry role="ma_table">-</entry>
    </row>
    <row>
     <entry role="ma_table">koi8r</entry>
     <entry role="ma_table">KOI8-R Relcom Russian</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">20866</entry>
     <entry role="ma_table">KOI8R</entry>
    </row>
    <row>
     <entry role="ma_table">koi8u</entry>
     <entry role="ma_table">KOI8-U Ukrainian</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">21866</entry>
     <entry role="ma_table">KOI8U</entry>
    </row>
    <row>
     <entry role="ma_table">latin1</entry>
     <entry role="ma_table">cp1252 West European</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">1252</entry>
     <entry role="ma_table">ISO_8859_1</entry>
    </row>
    <row>
     <entry role="ma_table">latin2</entry>
     <entry role="ma_table">ISO 8859-2 Central European</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">1252</entry>
     <entry role="ma_table">ISO_8859_2</entry>
    </row>
    <row>
     <entry role="ma_table">latin5</entry>
     <entry role="ma_table">ISO 8859-9 Turkish</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">1254</entry>
     <entry role="ma_table">ISO_8859_9</entry>
    </row>
    <row>
     <entry role="ma_table">latin7</entry>
     <entry role="ma_table">ISO 8859-13 Baltic</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">28603</entry>
     <entry role="ma_table">ISO_8859_13</entry>
    </row>
    <row>
     <entry role="ma_table">macce</entry>
     <entry role="ma_table">Mac Central European</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">10029</entry>
     <entry role="ma_table">CP1282</entry>
    </row>
    <row>
     <entry role="ma_table">macroman</entry>
     <entry role="ma_table">Mac West European</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">10000</entry>
     <entry role="ma_table">MACINTOSH</entry>
    </row>
    <row>
     <entry role="ma_table">sjis</entry>
     <entry role="ma_table">Shift-JIS Japanese</entry>
     <entry role="ma_table" align="right">2</entry>
     <entry role="ma_table" align="right">10001</entry>
     <entry role="ma_table">SJIS</entry>
    </row>
    <row>
     <entry role="ma_table">swe7</entry>
     <entry role="ma_table">7bit Swedish</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">-</entry>
     <entry role="ma_table">-</entry>
    </row>
    <row>
     <entry role="ma_table">tis620</entry>
     <entry role="ma_table">TIS620 Thai</entry>
     <entry role="ma_table" align="right">1</entry>
     <entry role="ma_table" align="right">874</entry>
     <entry role="ma_table">TIS620</entry>
    </row>
    <row>
     <entry role="ma_table">ucs2</entry>
     <entry role="ma_table">UCS-2 Unicode</entry>
     <entry role="ma_table" align="right">2</entry>
     <entry role="ma_table" align="right">-</entry>
     <entry role="ma_table">UCS2-BE</entry>
    </row>
    <row>
     <entry role="ma_table">ujis</entry>
     <entry role="ma_table">EUC-JP Japanese</entry>
     <entry role="ma_table" align="right">3</entry>
     <entry role="ma_table" align="right">20932</entry>
     <entry role="ma_table">UJIS</entry>
    </row>
    <row>
     <entry role="ma_table">utf8</entry>
     <entry role="ma_table">UTF-8 Unicode</entry>
     <entry role="ma_table" align="right">3</entry>
     <entry role="ma_table" align="right">65001</entry>
     <entry role="ma_table">UTF8</entry>
    </row>
    <row>
     <entry role="ma_table">utf8mb4</entry>
     <entry role="ma_table">UTF-8 Unicode</entry>
     <entry role="ma_table" align="right">4</entry>
     <entry role="ma_table" align="right">65001</entry>
     <entry role="ma_table">UTF8</entry>
    </row>
    <row>
     <entry role="ma_table">utf16</entry>
     <entry role="ma_table">UTF-16 Unicode</entry>
     <entry role="ma_table" align="right">4</entry>
     <entry role="ma_table" align="right">1201</entry>
     <entry role="ma_table">UTF16</entry>
    </row>
    <row>
     <entry role="ma_table">utf16le</entry>
     <entry role="ma_table">UTF-16LE Unicode</entry>
     <entry role="ma_table" align="right">4</entry>
     <entry role="ma_table" align="right">1200</entry>
     <entry role="ma_table">UTF16-LE</entry>
    </row>
    <row>
     <entry role="ma_table">utf32</entry>
     <entry role="ma_table">UTF-32 Unicode</entry>
     <entry role="ma_table" align="right">4</entry>
     <entry role="ma_table" align="right">12001</entry>
     <entry role="ma_table">UTF32</entry>
    </row>
   </tbody>
  </tgroup>
 </table>
</sect1>
 
 
<section xml:id="ref.charset.datastructure">
  <title>Data structure</title>
  <referenceinfo/>
 <refentry id="struct.charset_info">
  <refmeta>
   <refentrytitle>CHARSET_INFO</refentrytitle>
  </refmeta>
   Available since version 1.1
   <refnamediv>
   <refdescriptor>CHARSET_INFO</refdescriptor>
   <refname>CHARSET_INFO</refname>
   <refpurpose>Character set information</refpurpose>
  </refnamediv>
  <para>
   <structname>CHARSET_INFO</structname>
   contains character set information. It can be retrieved by the functions
   <link linkend="functions.mysql_get_charset_by_name"><function>mysql_get_charset_by_name</function></link> and <link linkend="functions.mysql_get_charset_by_nr"><function>mysql_get_charset_by_nr</function></link>
   and is used in function <link linkend="functions.mariadb_convert_string"><function>mariadb_convert_string</function></link>.
  </para>
  <para>
   <structname>CHARSET_INFO</structname>
   is defined in
   <filename>m_ctype.h</filename>
   :
  </para>
  <programlisting>
typedef struct charset_info_st
{
  uint	nr; /* so far only 1 byte for charset */
  uint  state;
  char	*csname;
  char	*name;
  char  *dir;
  char  *encoding;
  uint	char_minlen;
  uint	char_maxlen;
  uint 	(*mb_charlen)(uint c);
  uint 	(*mb_valid)(const char *start, const char *end);
} CHARSET_INFO;
  </programlisting>
  <note>
     <title>Notes</title>
     <para>
    MariaDB client library uses it's own character set implementation, based on
    PHP's mysqlnd extension and iconv library. All character sets are compiled
    in by default and are not binary compatible with server character sets.
   </para>
  </note>
 </refentry>
 <refentry id="struct.my_charset_info">
  <refmeta>
   <refentrytitle>MY_CHARSET_INFO</refentrytitle>
  </refmeta>
   Available since version 1.0
   <refnamediv>
   <refdescriptor>MY_CHARSET_INFO</refdescriptor>
   <refname>MY_CHARSET_INFO</refname>
   <refpurpose>Character set information used by connection</refpurpose>
  </refnamediv>
  <para>
   <structname>CHARSET_INFO</structname>
   Contains information about the current character set used by the connection.
   The information can be obtained by the
   <link linkend="functions.mysql_get_character_set_info"><function>mysql_get_character_set_info</function></link> function.
  </para>
  <programlisting>
typedef struct character_set
{
  unsigned int      number;     /* character set number              */
  unsigned int      state;      /* character set state               */
  const char        *csname;    /* character set name                */
  const char        *name;      /* collation name                    */
  const char        *comment;   /* comment (unused)                  */
  const char        *dir;       /* character set directory (unused)  */
  unsigned int      mbminlen;   /* min. length for multibyte strings */
  unsigned int      mbmaxlen;   /* max. length for multibyte strings */
} MY_CHARSET_INFO;
  </programlisting>
 </refentry>
</section>

 
<section xml:id="ref.charset">
 <referenceinfo/>
 <title>
  Function reference
 </title>
  <!--
  Autogeerated file - do not change this file manually!
-->

<refentry id="functions.mariadb_convert_string" display-name="0">
 <refmeta>
  <refentrytitle>mariadb_convert_string</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mariadb_convert_string</refname>
  <refpurpose>Codeset conversion function</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>size_t</type>
   <methodname>mariadb_convert_string</methodname>
   <methodparam>
    <type>const char *</type>
    <parameter>source</parameter>
   </methodparam>
   <methodparam>
    <type>size_t</type>
    <parameter>source_length</parameter>
   </methodparam>
   <methodparam>
    <type>CHARSET_INFO *</type>
    <parameter>source_cs</parameter>
   </methodparam>
   <methodparam>
    <type>char *</type>
    <parameter>dest</parameter>
   </methodparam>
   <methodparam>
    <type>size_t</type>
    <parameter>dest_length</parameter>
   </methodparam>
   <methodparam>
    <type>CHARSET_INFO *</type>
    <parameter>dest_cs</parameter>
   </methodparam>
   <methodparam>
    <type>uint *</type>
    <parameter>errorcode</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Converts a sequence of characters (string) from one character set into a
   seqence of corresponing characters in another character set.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>source</entry>
      <entry>Sequence of characters (source)</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>source_length</entry>
      <entry>Source length in bytes</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>source_cs</entry>
      <entry>Source character set</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
  <row>
   <entry>IN</entry>
   <entry>source</entry>
   <entry>Sequence of characters (Destination)</entry>
  </row>
  <row>
   <entry>IN</entry>
   <entry>source_length</entry>
   <entry>Destination length in bytes</entry>
  </row>
  <row>
   <entry>IN</entry>
   <entry>source_cs</entry>
   <entry>Destination character set</entry>
  </row>
  <row>
   <entry>IN</entry>
   <entry>errorcode</entry>
   <entry>Error code</entry>
  </row>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Length of converted characters in destination (measured in bytes) or -1 if an
   error occurs.
  </para>
  <table frame="none">
   <caption>Error codes</caption>
   <tgroup cols="3" colsep="0" rowsep="0">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="1" ?>
    <thead>
     <row>
      <entry role="ma_table" colsep="0">Errorcode</entry>
      <entry role="ma_table" colsep="0">Value</entry>
      <entry role="ma_table" colsep="0">Description</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry role="ma_table">EILSEQ</entry>
      <entry role="ma_table" align="right">42</entry>
      <entry role="ma_table">Invalid character in source</entry>
     </row>
     <row>
      <entry role="ma_table">E2BIG</entry>
      <entry role="ma_table" align="right">7</entry>
      <entry role="ma_table">Conversion didn't complete due to lack of space in destination buffer</entry>
     </row>
     <row>
      <entry role="ma_table">EINVAL</entry>
      <entry role="ma_table" align="right">22</entry>
      <entry role="ma_table">Conversion is not supported, or an incomplete character at the end of source was found</entry>
     </row>
     <row>
      <entry role="ma_table">ENFILE</entry>
      <entry role="ma_table" align="right">23</entry>
      <entry role="ma_table">Too many open files</entry>
     </row>
     <row>
      <entry role="ma_table">ENOMEM</entry>
      <entry role="ma_table" align="right">12</entry>
      <entry role="ma_table">Not enough memory available</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </refsect1>
 <refsect1 role="notes">
  <note>
          <title>Notes</title>
          <para>
    If a valid source character has no identical character in the destination
    character set it will be replaced by a place holder (quesion mark)
   </para>
   <para>
    Regardless of the character set length parameters are always measured in
    bytes.
   </para>
   <para>
    The types (
    <type>char *</type>
    ) of source and destination doesn't imply that these variables are
    interpreted as zero terminated strings.
   </para>
  </note>
 </refsect1>
</refentry>


<refentry id="functions.mysql_get_character_set_info" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_get_character_set_info</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_get_character_set_info</refname>
  <refpurpose>Returns information about the current active character set.</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>void</type>
   <methodname>mysql_get_character_set_info</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
   <methodparam>
    <type>MY_CHARSET_INFO *</type>
    <parameter>charset</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns information about the current default character set for the specified
   connection.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>charset</entry>
      <entry>A pointer to a MY_CHARSET_INFO structure, in which the information will be copied.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   void
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    A complete list of supported character sets in the client library is listed
    in the function description for <link linkend="functions.mysql_set_character_set"><function>mysql_set_character_set</function></link>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_set_character_set"><function>mysql_set_character_set</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_get_charset_by_name" display-name="0">
      Available since version 1.1
      <refmeta>
  <refentrytitle>mysql_get_charset_by_name</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_get_charset_by_name</refname>
  <refpurpose>Returns a specified character set</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>CHARSET_INFO *</type>
   <methodname>mysql_get_charset_by_name</methodname>
   <methodparam>
    <type>const char *</type>
    <parameter>csname</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   returns a character set specified by
   <parameter>csname</parameter>
   .
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>csname</entry>
      <entry>Character set name</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns a pointer to
   <structname>CHARSET_INFO</structname>
   or NULL if the specified character set could not be found.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
          <title>Notes</title>
          <para>
    The function searches case sensitive. Character set names are always defined
    in lower case.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_get_charset_by_nr"><function>mysql_get_charset_by_nr</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_get_charset_by_nr" display-name="0">
      Available since version 1.1
      <refmeta>
  <refentrytitle>mysql_get_charset_by_nr</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_get_charset_by_nr</refname>
  <refpurpose>Returns a specified character set</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>CHARSET_INFO *</type>
   <methodname>mysql_get_charset_by_name</methodname>
   <methodparam>
    <type>uint </type>
    <parameter>number</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   returns a character set specified by
   <parameter>number</parameter>
   .
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>number</entry>
      <entry>Character set number</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   A
   <structname>CHARSET_INFO</structname>
   pointer of NULL if the specified character set could not be found.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
          <title>Notes</title>
          <para>
    Character set numbers are specified in source file
    <filename>my_charset.c</filename>
    .
   </para>
   <para>
    The same character set might have different numbers, since internally
    numbers also specify the collation. E.g the character set
    <varname>latin1</varname>
    has the numbers 47, 48, 49 and 94. The client library itself doesn't support
    collations.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_get_charset_by_name"><function>mysql_get_charset_by_name</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_set_character_set" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_set_character_set</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_set_character_set</refname>
  <refpurpose>Sets the default client character set</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_set_character_set</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>csname</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Sets the default character set for the current connection
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>csname</entry>
      <entry>Character set name</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns zero on success, non-zero on failure.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    It's strongly recommended to use <link linkend="functions.mysql_set_character_set"><function>mysql_set_character_set</function></link> instead
    of
    <command>SET NAMES ...</command>
    since <link linkend="functions.mysql_real_escape_string"><function>mysql_real_escape_string</function></link> might fail or deliver unexpected
    results.
   </para>
   <para>
    The client library supports the following character sets:
   </para>
   <simplelist type="horiz" columns="2">
    <member>armscii8</member>
    <member>8 bit character set for Armenian</member>
    <member>ascii</member>
    <member>US ASCII character set</member>
    <member>big5</member>
    <member>2 byte character set for traditional Chinese, Hongkong, Macau and Taiwan</member>
    <member>binary</member>
    <member>8 bit binary character set</member>
    <member>cp1250</member>
    <member>Windows code page 1250 character set</member>
    <member>cp1251</member>
    <member>Windows code page 1251 character set</member>
    <member>cp1256</member>
    <member>Windows code page 1256 character set</member>
    <member>cp1257</member>
    <member>Windows code page 1257 character set</member>
    <member>cp850</member>
    <member>MS-DOS Codepage 850 (Western Europe)</member>
    <member>cp852</member>
    <member>MS-DOS Codepage 852 (Middle Europe)</member>
    <member>cp866</member>
    <member>MS-DOS Codepage 866 (Russian)</member>
    <member>cp932</member>
    <member>Microsoft Codepage 932 (Extension to sjis)</member>
    <member>dec8</member>
    <member>DEC West European</member>
    <member>eucjpms</member>
    <member>UJIS for Windows Japanese</member>
    <member>euckr</member>
    <member>EUC KR-Korean</member>
    <member>filename</member>
    <member/>
    <member>gb2312</member>
    <member>GB-2312 simplified Chinese</member>
    <member>gbk</member>
    <member>GBK simplified Chinese</member>
    <member>geostd8</member>
    <member>GEOSTD8 Georgian</member>
    <member>greek</member>
    <member>ISO 8859-7 Greek</member>
    <member>hebrew</member>
    <member>ISO 8859-8 Hebrew</member>
    <member>hp8</member>
    <member>HP West European</member>
    <member>keybcs2</member>
    <member>DOS Kamenicky Czech-Slovak</member>
    <member>koi8r</member>
    <member>KOI8-R Relcom Russian</member>
    <member>koi8u</member>
    <member>KOI8-U Ukrainian</member>
    <member>latin1</member>
    <member>CP1252 Western European</member>
    <member>latin2</member>
    <member>ISO 8859-2 Central Europe</member>
    <member>latin5</member>
    <member>ISO 8859-9 Turkish</member>
    <member>latin7</member>
    <member>ISO 8859-13 Baltic</member>
    <member>macce</member>
    <member>MAC Central European</member>
    <member>macroman</member>
    <member>MAC Western European</member>
    <member>sjis</member>
    <member>SJIS for Windows Japanese</member>
    <member>swe7</member>
    <member>7-bit Swedish</member>
    <member>tis620</member>
    <member>TIS620 Thai</member>
    <member>ucs2</member>
    <member>UCS-2 Unicode</member>
    <member>ujis</member>
    <member>EUC-JP Japanese</member>
    <member>utf8</member>
    <member>UTF-8 Unicode</member>
    <member>utf16</member>
    <member>UTF-16 Unicode</member>
    <member>utf32</member>
    <member>UTF-32 Unicode</member>
   </simplelist>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_real_escape_string"><function>mysql_real_escape_string</function></link>
  </para>
 </refsect1>
</refentry>



</section>

</section>

    
<!-- $Revision: 326064 $ -->
<!-- Membership: bundled, external -->
<section xmlns="">
 <title>
  Client server API
 </title>
 <para>
  The client server API of the MariaDb client library allows you to send and
  retrieve data to and from a MariaDB database server. It supports also
  communication with databases from other vendors, like Percona or Oracle.
 </para>

 
<!-- $Revision: 323624 $ -->
<section>
 <title>Data structure</title>
 <sect1>
  <title>
   DYNAMIC_COLUMN
  </title>
  <para>
   DYNAMIC_COLUMN represents a packed dynamic column blob. It is essentially a
   string-with-length.
  </para>
  <programlisting>
typedef struct st_dynamic_string
{
  char *str;
  size_t length,max_length,alloc_increment;
} DYNAMIC_STRING;

typedef DYNAMIC_STRING DYNAMIC_COLUMN;
  </programlisting>
 </sect1>
 <sect1>
  <title>
   DYNAMIC_COLUMN_VALUE
  </title>
  <para>
   Dynamic columns blob stores {name, value} pairs. DYNAMIC_COLUMN_VALUE
   structure is used to represent the value in accessible form.
  </para>
  <programlisting>
struct st_dynamic_column_value
{
  DYNAMIC_COLUMN_TYPE type;
  union
  {
    long long long_value;
    unsigned long long ulong_value;
    double double_value;
    struct {
      MYSQL_LEX_STRING value;
      CHARSET_INFO *charset;
    } string;
    struct {
      decimal_digit_t buffer[DECIMAL_BUFF_LENGTH];
      decimal_t value;
    } decimal;
    MYSQL_TIME time_value;
  } x;
};

typedef struct st_dynamic_column_value DYNAMIC_COLUMN_VALUE;
  </programlisting>
 </sect1>
 <sect1>
  <title>
   MY_CHARSET_INFO
  </title>
  <para>
   Contains information about the current character set used by the connection.
   The information can be obtained by the
   <link linkend="functions.mysql_get_character_set_info"><function>mysql_get_character_set_info</function></link> function.
  </para>
  <programlisting>
typedef struct character_set
{
  unsigned int      number;     /* character set number              */
  unsigned int      state;      /* character set state               */
  const char        *csname;    /* character set name                */
  const char        *name;      /* collation name                    */
  const char        *comment;   /* comment (unused)                  */
  const char        *dir;       /* character set directory (unused)  */
  unsigned int      mbminlen;   /* min. length for multibyte strings */
  unsigned int      mbmaxlen;   /* max. length for multibyte strings */
} MY_CHARSET_INFO;
  </programlisting>
 </sect1>
 <sect1>
  <title>
   MYSQL
  </title>
  <para>
   A structure representing a connection to a database server. The structure
   will be allocated and/or initialized by the <link linkend="functions.mysql_init"><function>mysql_init</function></link> function
   and closed by the <link linkend="functions.mysql_close"><function>mysql_close</function></link> function.
  </para>
  <note>
    <title>Notes</title>
    <para>
    It's not recommended to access members of this structure in your client
    program. They might be removed or renamed in later versions. Instead use the
    corresponding API functions.
   </para>
   <para>
    A connection can be shared between multiple threads with the limitation that
    they don't send and receive data at the same time. This must be ensured by
    using mutex locks.
   </para>
  </note>
 </sect1>
 <sect1>
  <title>
   MYSQL_BIND
  </title>
  <para>
   A structure to bind input or output variables to a prepared statement by
   <link linkend="functions.mysql_stmt_bind_param"><function>mysql_stmt_bind_param</function></link> or <link linkend="functions.mysql_stmt_bind_result"><function>mysql_stmt_bind_result</function></link>
   functions.
  </para>
  <programlisting>
typedef struct st_mysql_bind
{
unsigned long  *length;             /* output length pointer */
my_bool        *is_null;            /* Pointer to null indicator */
void           *buffer;             /* buffer to get/put data */
my_bool        *error;              /* pointer to indicate errors */
unsigned long  buffer_length;
enum enum_field_types buffer_type;  /* buffer type */
my_bool        is_unsigned;         /* set if integer type is unsigned */
my_bool        is_null_value;       /* Used if is_null is 0 */
/* internal values */
...
} MYSQL_BIND;
  </programlisting>
  <note>
    <title>Notes</title>
    <para>
    A
    <structname>MYSQL_BIND</structname>
    structure should be initialized with zero values before assigning values to
    it's members.
   </para>
  </note>
 </sect1>
 <sect1>
  <title>
   MYSQL_FIELD
  </title>
  <para>
   Contains metadata information about a column. The structure can be obtained
   by the <link linkend="functions.mysql_fetch_field"><function>mysql_fetch_field</function></link>, <link linkend="functions.mysql_fetch_fields"><function>mysql_fetch_fields</function></link> or
   <link linkend="functions.mysql_fetch_field_direct"><function>mysql_fetch_field_direct</function></link> functions.
  </para>
  <programlisting>
typedef struct st_mysql_field {
char *name;                /* Name of column or alias */
char *org_name;            /* Name of original column (added after 3.23.58) */
char *table;               /* Table of column/alias if column was a field */
char *org_table;           /* Name of original table */
char *db;                  /* table schema  */
char *catalog;             /* table catalog  */
char *def;                 /* Default value (set by mysql_list_fields) */
unsigned long length;      /* Width of column */
unsigned long max_length;  /* Max width of selected set */
unsigned int name_length;
unsigned int org_name_length;
unsigned int table_length;
unsigned int org_table_length;
unsigned int db_length;
unsigned int catalog_length;
unsigned int def_length;
unsigned int flags;         /* Div flags */
unsigned int decimals;      /* Number of decimals in field */
unsigned int charsetnr;     /* character set number */
enum enum_field_types type; /* Type of field. Se mysql_com.h for types */
void *extension;            /* internal use */
} MYSQL_FIELD;
  </programlisting>
  <note>
      <title>Notes</title>
      <para>
    Field values are not members of this structure. They will be obtained by
    <structname>MYSQL_ROW</structname>
    structure.
   </para>
  </note>
 </sect1>
 <sect1>
  <title>
   MYSQL_FIELD_OFFSET
  </title>
  <para>
   An offset within a field list starting with offset zero used by
   <link linkend="functions.mysql_field_seek"><function>mysql_field_seek</function></link> function.
  </para>
 </sect1>
 <sect1>
  <title>
   MYSQL_RES
  </title>
  <para>
   A structure representing a result set from a previously executed statement.
   The structure will be obtained by <link linkend="functions.mysql_use_result"><function>mysql_use_result</function></link> or
   <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link> functions. The MYSQL_RES structure will be used
   to fetch fields and data from a result set.
  </para>
  <note>
      <title>Notes</title>
      <para>
    The server will always return a result set for
    <command>SELECT</command>
    ,
    <command>SHOW</command>
    <command>CALL</command>
    ,
    <command>EXPLAIN</command>
    ,
    <command>DESCRIBE</command>
    statements, even if no records were found. In this case the result set will
    only contain metadata information.
   </para>
   <para>
    Large result sets may allocate a lot of memory. Therefore it is essential to
    free the result set as soon all data was fetched and processed.
   </para>
   <para>
    A previously fetched row (see
    <structname>MYSQL_ROW</structname>
    ) becomes invalid when the result set stucture was freed.
   </para>
  </note>
 </sect1>
 <sect1>
  <title>
   MYSQL_ROW
  </title>
  <para>
   An array of character pointers representing an array of column values.
  </para>
  <note>
      <title>Notes</title>
      Character pointers are not necessarily null terminated. In case you will retrieve binary data you need to obtain
      length information from <structname>MYSQL_FIELD</structname> structure.
    </note>
 </sect1>
 <sect1>
  <title>
   MYSQL_STMT
  </title>
  <para>
   A structure representing a prepared statement which was allocated by
   <link linkend="functions.mysql_stmt_init"><function>mysql_stmt_init</function></link> and prepared by <link linkend="functions.mysql_stmt_prepare"><function>mysql_stmt_prepare</function></link>
   function. A prepared statement can be used to efficiently execute this
   statement multiple times.
  </para>
 </sect1>
 <sect1>
  <title>
   MYSQL_TIME
  </title>
  <para>
   A structure representing internal time format which is used for prepared
   statements and dynamic columns.
  </para>
  <programlisting>
typedef struct st_mysql_time
{
unsigned int year;
unsigned int month;
unsigned int day;
unsigned int hour;
unsigned int minute;
unsigned int second;
unsigned long second_part;
my_bool  neg;                              /* negative value */
enum enum_mysql_timestamp_type time_type;  /* mysql timestamp type */
} MYSQL_TIME;
  </programlisting>
 </sect1>
</section>
 
 
<!-- $Revision: 323624 $ -->
<section>
 <title>Constants</title>
 <sect1>
  <title>
   Types for
   <structname>MYSQL_TIME</structname>
  </title>
  <para>
   Specifies the type of a
   <structname>MYSQL_TIME</structname>
   structure.
  </para>
  <para>
   <table frame="none">
    <caption>Types for <structname>MYSQL_TIME</structname>
    </caption>
    <tgroup cols="3" colsep="0" rowsep="0">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="1" ?>
     <thead>
      <row>
       <entry role="ma_table" colsep="0">Constant</entry>
       <entry role="ma_table" colsep="0">Value</entry>
       <entry role="ma_table" colsep="0">Description</entry>
      </row>
     </thead>
     <tbody>
      <row role="ma_table">
       <entry role="ma_table" colsep="0">MYSQL_TIMESTAMP_NONE</entry>
       <entry role="ma_table" colsep="0">-2</entry>
       <entry role="ma_table" colsep="0">NULL value</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">MYSQL_TIMESTAMP_ERROR</entry>
       <entry role="ma_table" colsep="0">-1</entry>
       <entry role="ma_table" colsep="0">Set if an error occured</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">MYSQL_TIMESTAMP_DATE</entry>
       <entry role="ma_table" colsep="0">0</entry>
       <entry role="ma_table" colsep="0">struct <structname>MYSQL_TIME</structname> represents a date</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">MYSQL_TIMESTAMP_DATETIME</entry>
       <entry role="ma_table" colsep="0">1</entry>
       <entry role="ma_table" colsep="0">struct <structname>MYSQL_TIME</structname> represents a datetime</entry>
      </row>
      <row role="ma_table">
       <entry role="ma_table" colsep="0">MYSQL_TIMESTAMP_TIME</entry>
       <entry role="ma_table" colsep="0">2</entry>
       <entry role="ma_table" colsep="0">struct <structname>MYSQL_TIME</structname> represents a time</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
  <para>
   MySQL time types are defined in
   <filename>mysql.h</filename>
   :
  </para>
  <programlisting role="screen">
enum enum_mysql_timestamp_type
{
  MYSQL_TIMESTAMP_NONE= -2,
  MYSQL_TIMESTAMP_ERROR= -1,
  MYSQL_TIMESTAMP_DATE= 0,
  MYSQL_TIMESTAMP_DATETIME= 1,
  MYSQL_TIMESTAMP_TIME= 2
} 
  </programlisting>
 </sect1>
 <sect1>
  <title>
   Field flags
  </title>
  <para>
   Field flags are used in
   <member>flags</member>
   of structure
   <structname>MYSQL_FIELD</structname>
   .
  </para>
  <para>
   <table frame="none" colsep="1" rowsep="1">
    <title>
     Field flags
    </title>
    <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="1" ?>
     <colspec/>
     <colspec align="right"/>
     <colspec/>
     <thead>
      <row>
       <entry role="ma_table" align="center">Constant</entry>
       <entry role="ma_table" align="center">Value</entry>
       <entry role="ma_table" align="center">Description</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry role="ma_table">NOT_NULL_FLAG</entry>
       <entry role="ma_table">1</entry>
       <entry role="ma_table">Field/Column is defined as NOT NULL</entry>
      </row>
      <row>
       <entry role="ma_table">PRI_KEY_FLAG</entry>
       <entry role="ma_table">2</entry>
       <entry role="ma_table">Field/Column is part of a primary key</entry>
      </row>
      <row>
       <entry role="ma_table">UNIQUE_KEY_FLAG</entry>
       <entry role="ma_table">4</entry>
       <entry role="ma_table">Field/Column is part of a unique key</entry>
      </row>
      <row>
       <entry role="ma_table">MULTIPLE_KEY_FLAG</entry>
       <entry role="ma_table">8</entry>
       <entry role="ma_table">Field/Column is part of a non unique or primary key</entry>
      </row>
      <row>
       <entry role="ma_table">BLOB_FLAG</entry>
       <entry role="ma_table">16</entry>
       <entry role="ma_table">Field/Column is a BLOB</entry>
      </row>
      <row>
       <entry role="ma_table">UNSIGNED_FLAG</entry>
       <entry role="ma_table">32</entry>
       <entry role="ma_table">Field/Column is defined as NOT NULL</entry>
      </row>
      <row>
       <entry role="ma_table">ZEROFILL_FLAG</entry>
       <entry role="ma_table">64</entry>
       <entry role="ma_table">Field/Column is defined with zerofill option</entry>
      </row>
      <row>
       <entry role="ma_table">BINARY_FLAG</entry>
       <entry role="ma_table">128</entry>
       <entry role="ma_table">Field/Column is binary</entry>
      </row>
      <row>
       <entry role="ma_table">ENUM_FLAG</entry>
       <entry role="ma_table">256</entry>
       <entry role="ma_table">Field/Column has enum type</entry>
      </row>
      <row>
       <entry role="ma_table">AUTO_INCREMENZT_FLAG</entry>
       <entry role="ma_table">512</entry>
       <entry role="ma_table">Field/Column is defined as auto increment</entry>
      </row>
      <row>
       <entry role="ma_table">TIMESTAMP_FLAG</entry>
       <entry role="ma_table">1024</entry>
       <entry role="ma_table">Field/Column is defined as timestamp</entry>
      </row>
      <row>
       <entry role="ma_table">SET_FLAG</entry>
       <entry role="ma_table">2048</entry>
       <entry role="ma_table">Field/Column is a set</entry>
      </row>
      <row>
       <entry role="ma_table">NO_DEFAULT_VALUE_FLAG</entry>
       <entry role="ma_table">4096</entry>
       <entry role="ma_table">Field/Column has no default value</entry>
      </row>
      <row>
       <entry role="ma_table">ON_UPDATE_NOW_FLAG</entry>
       <entry role="ma_table">8192</entry>
       <entry role="ma_table">On update Field/Column will be set to current time</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
  <para>
   Field flags are defined in
   <filename>mysql_com.h</filename>
  </para>
 </sect1>
 <sect1>
  <title>
   Field types
  </title>
  <para>
   Field types are used in member
   <member>type</member>
   of
   <structname>MYSQL_FIELD</structname>
   structure and in
   <member>buffer_type</member>
   of
   <structname>MYSQL_BIND</structname>
   structure. They indicate the type of the column or the type of the bound
   variable.
  </para>
  <para>
   <table frame="none" colsep="1" rowsep="1">
    <title>
     Field flags
    </title>
    <tgroup cols="4">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="1" ?>
     <colspec colname="col1"/>
     <colspec colname="col2"/>
     <colspec colname="col3"/>
     <colspec colname="col4"/>
     <spanspec spanname="head1" namest="col2" nameend="col3"/>
     <thead>
      <row>
       <entry role="ma_table" morerows="1" valign="middle" align="center">Constant</entry>
       <entry role="ma_table" spanname="head1" align="center">Corresponding C type</entry>
       <entry role="ma_table" morerows="1" valign="middle" align="center">Description</entry>
      </row>
      <row>
       <entry role="ma_table">non binary</entry>
       <entry role="ma_table">binary</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry role="ma_table">MYSQL_TYPE_DECIMAL</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">unsupported</entry>
       <entry role="ma_table">Decimal type</entry>
      </row>
      <row>
       <entry role="ma_table">MYSQL_TYPE_TINY</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">char</entry>
       <entry role="ma_table">tiny int (1 byte)</entry>
      </row>
      <row>
       <entry role="ma_table">MYSQL_TYPE_SHORT</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">short</entry>
       <entry role="ma_table">Short (2 byte)</entry>
      </row>
      <row>
       <entry role="ma_table">MYSQL_TYPE_YEAR</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">short</entry>
       <entry role="ma_table">Short (2 byte)</entry>
      </row>
      <row>
       <entry role="ma_table">MYSQL_TYPE_INT24</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">int</entry>
       <entry role="ma_table">Integer (3 byte)</entry>
      </row>
      <row>
       <entry role="ma_table">MYSQL_TYPE_LONG</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">int</entry>
       <entry role="ma_table">Integer (4 byte)</entry>
      </row>
      <row>
       <entry role="ma_table">MYSQL_TYPE_LONGLONG</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">longlong)</entry>
       <entry role="ma_table">Long value (8 byte)</entry>
      </row>
      <row>
       <entry role="ma_table">MYSQL_TYPE_FLOAT</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">float</entry>
       <entry role="ma_table">floating point value</entry>
      </row>
      <row>
       <entry role="ma_table">MYSQL_TYPE_DOUBLE</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">double</entry>
       <entry role="ma_table">double precision value</entry>
      </row>
      <row>
       <entry role="ma_table">MYSQL_TYPE_TIMESTAMP</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">
        <structname>MYSQL_TIME</structname>
       </entry>
       <entry role="ma_table">timestamp value</entry>
      </row>
      <row>
       <entry role="ma_table">MYSQL_TYPE_TIME</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">
        <structname>MYSQL_TIME</structname>
       </entry>
       <entry role="ma_table">time value</entry>
      </row>
      <row>
       <entry role="ma_table">MYSQL_TYPE_DATE</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">
        <structname>MYSQL_TIME</structname>
       </entry>
       <entry role="ma_table">date value</entry>
      </row>
      <row>
       <entry role="ma_table">MYSQL_TYPE_NEWDATE</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">
        <structname>MYSQL_TIME</structname>
       </entry>
       <entry role="ma_table">date value</entry>
      </row>
      <row>
       <entry role="ma_table">MYSQL_TYPE_ENUM</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">enum value (max. 65535 values)</entry>
      </row>
      <row>
       <entry role="ma_table">MYSQL_TYPE_SET</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">set values (max. 64 members)</entry>
      </row>
      <row>
       <entry role="ma_table">MYSQL_TYPE_STRING</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">fixed length string (max. 255 chars)</entry>
      </row>
      <row>
       <entry role="ma_table">MYSQL_TYPE_VAR_STRING</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">variable length string (max. 255 chars)</entry>
      </row>
      <row>
       <entry role="ma_table">MYSQL_TINY_BLOB</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">blob or text value (max. 255 bytes)</entry>
      </row>
      <row>
       <entry role="ma_table">MYSQL_TYPE_BLOB</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">blob or text value (max. 65536 bytes)</entry>
      </row>
      <row>
       <entry role="ma_table">MYSQL_MEDIUM_BLOB</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">blob or text value (max. 16777216 bytes)</entry>
      </row>
      <row>
       <entry role="ma_table">MYSQL_LONG_BLOB</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">blob or text value (max. 4294967296 bytes)</entry>
      </row>
      <row>
       <entry role="ma_table">MYSQL_TYPE_GEOMETRY</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">char *</entry>
       <entry role="ma_table">binary geometric object(s)</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
  <para>
   Field types are defined in include file
   <filename>mysql_com.h</filename>
  </para>
  <para>
   <programlisting>
enum enum_field_types { MYSQL_TYPE_DECIMAL, MYSQL_TYPE_TINY,
                        MYSQL_TYPE_SHORT,  MYSQL_TYPE_LONG,
                        MYSQL_TYPE_FLOAT,  MYSQL_TYPE_DOUBLE,
                        MYSQL_TYPE_NULL,   MYSQL_TYPE_TIMESTAMP,
                        MYSQL_TYPE_LONGLONG,MYSQL_TYPE_INT24,
                        MYSQL_TYPE_DATE,   MYSQL_TYPE_TIME,
                        MYSQL_TYPE_DATETIME, MYSQL_TYPE_YEAR,
                        MYSQL_TYPE_NEWDATE, MYSQL_TYPE_VARCHAR,
                        MYSQL_TYPE_BIT,
                        MYSQL_TYPE_NEWDECIMAL=246,
                        MYSQL_TYPE_ENUM=247,
                        MYSQL_TYPE_SET=248,
                        MYSQL_TYPE_TINY_BLOB=249,
                        MYSQL_TYPE_MEDIUM_BLOB=250,
                        MYSQL_TYPE_LONG_BLOB=251,
                        MYSQL_TYPE_BLOB=252,
                        MYSQL_TYPE_VAR_STRING=253,
                        MYSQL_TYPE_STRING=254,
                        MYSQL_TYPE_GEOMETRY=255,
                        MAX_NO_FIELD_TYPES };
   </programlisting>
  </para>
  <note>
      <title>Notes</title>
      TEXT columns always have a BLOB field type. To determine the correct type you need to check the character set
      number of the <structname>MYSQL_FIELD</structname> structure.
    </note>
 </sect1>
 <sect1>
  <title>
   Dynamic column value types
  </title>
  <para>
   Every dynamic column value has a type, which is determined by the member type
   of the
   <structname>DYNAMIC_COLUMN_VALUE</structname>
   structure.
  </para>
  <para>
   Dynamic column value types are defined in include file
   <filename>ma_dyncol.h</filename>
   .
  </para>
  <para>
   <table frame="none">
    <caption>Types for <structname>DYNAMIC_COLUMN_VALUES</structname>
    </caption>
    <tgroup cols="2" colsep="0" rowsep="0">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="1" ?>
     <thead>
      <row>
       <entry role="ma_table" colsep="0">Constant</entry>
       <entry role="ma_table" colsep="0">
        <structname>DYNAMIC_COLUMN_VALUE</structname> member</entry>
      </row>
     </thead>
     <tbody>
      <row role="ma_table">
       <entry role="ma_table" colsep="0">DYN_COL_NULL</entry>
       <entry role="ma_table" colsep="0">-</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">DYN_COL_INT</entry>
       <entry role="ma_table" colsep="0">x.long_value</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">DYN_COL_UINT</entry>
       <entry role="ma_table" colsep="0">x.ulong_value</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">DYN_COL_DOUBLE</entry>
       <entry role="ma_table" colsep="0">x.double</entry>
      </row>
      <row role="ma_table">
       <entry role="ma_table" colsep="0">DYN_COL_STRING</entry>
       <entry role="ma_table" colsep="0">x.string.value and x.string.charset</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">DYN_COL_DATETIME</entry>
       <entry role="ma_table" colsep="0">x.time_value</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">DYN_COL_DATE</entry>
       <entry role="ma_table" colsep="0">x.time_value</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">DYN_COL_TIME</entry>
       <entry role="ma_table" colsep="0">x.time_value</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">DYN_COL_DYNCOL</entry>
       <entry role="ma_table" colsep="0">x.string.value</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
  <note>
      <title>Notes</title>
      <para>
    Values with type DYN_COL_NULL do not ever occur in dynamic columns blobs.
   </para>
   <para>
    Type DYN_COL_DYNCOL means that the value is anther dynamic column. This is
    how nested dynamic columns are done.
   </para>
   <para>
    Opposed to the server implementation the MariaDB client library doesn't
    support decimal type in dynamic columns.
   </para>
  </note>
 </sect1>
</section>
 
 
<section xml:id="ref.client_api">
 <title>
  Function reference
 </title>
  <para>
   Not all functions are supported by all packages. Please refer to the version
   information inside the function reference to check if the function is
   supported. Some functionality like experimental features are disabled by
   default and can be activated by build switches.
  </para>
  <para>
   The MariaDB client server API is compatible with the MySQL client library.
   The API was built on top of MySQL 3.23 and PHP's mysqlnd extension. Functions
   which support specific MariaDB server features are prefixed with mariadb
   instead of mysql.
  </para>
  <!--
  Autogeerated file - do not change this file manually!
-->

<refentry id="functions.mysql_affected_rows" display-name="1">
      Available since version 1.0
 <refmeta>
  <refentrytitle>mysql_affected_rows</refentrytitle>
  <manvolnum>1.0</manvolnum>
 </refmeta>
 <refnamediv>
<!-- <refname>mysql_affected_rows</refname> -->
  <refpurpose>Returns the number of affected rows in previous server operation</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_ulonglong</type>
   <methodname>mysql_affected_rows</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns the number of affected rows by the last operation associated with
   <parameter>mysql</parameter>
   , if the operation was an "upsert" (INSERT, UPDATE, DELETE or
   REPLACE) statement.
  </para>
  <refsect3>Available in MariaDB client library &gt;= 1.0
        </refsect3>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns the number of affected rows on success, or -1 if the last query
   failed.
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <note>
   <title/>
   <para>
    When using UPDATE, MariaDB will not update columns where the new value is
    the same as the old value. This creates the possibility that
    <link linkend="functions.mysql_affected_rows"><function>mysql_affected_rows</function></link> may not actually equal the number of rows
    matched, only the number of rows that were literally affected by the query.
   </para>
   <para>
    The REPLACE statement first deletes the record with the same primary key and
    then inserts the new record. This function returns the number of deleted
    records in addition to the number of inserted records.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_num_rows"><function>mysql_num_rows</function></link> <link linkend="functions.mysql_real_query"><function>mysql_real_query</function></link>, <link linkend="functions.mysql_query"><function>mysql_query</function></link>
  </para>
 </refsect1>
 <refsect1 role="example">
  <title>
   Example
  </title>
<programlisting language="C"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="/home/georg/work/mariadb/doc/mariadb_client/webhelp/docsrc/examples/mysql_affected_rows.c" parse="text"/></programlisting>
          <para>
   Output:
  </para>
<!-- &examples.mysql_affected_rows.out; -->
       </refsect1>
</refentry>


<refentry id="functions.mysql_autocommit" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_autocommit</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_autocommit</refname>
  <refpurpose>Toggles autocommit mode on or off</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_bool</type>
   <methodname>mysql_autocommit</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
   <methodparam>
    <type>my_bool</type>
    <parameter>auto_mode</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Toggles autocommit mode on or off for the current database connection.
   Autocommit mode will be set if
   <parameter>mode</parameter>
   =1 or unset if
   <parameter>mode</parameter>
   =0.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>auto_mode</entry>
      <entry>Whether to turn autocommit on or not.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns zero on success, or nonzero if an error occured.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note valign="center">
   <title/>
   <itemizedlist>
    <listitem>
     <para>
      Non transactional table types like MyISAM always work in autocommit mode, regardless
      if it is enabled or disabled. 
     </para>
    </listitem>
    <listitem>
     <para>
      To determine which storage engines support transactions, use the SQL statement
      <command>SELECT ENGINE FROM INFORMATION_SCHEMA.ENGINES WHERE TRANSACTIONS='YES'</command>.
     </para>
    </listitem>
    <listitem>
     <para>
      To determine the current state of autocommit mode use one of the following SQL statements:
      <itemizedlist><para><command>SELECT @@autocommit</command></para></itemizedlist>
      <itemizedlist><para><command>SHOW VARIABLES LIKE 'autocommit'</command></para></itemizedlist>
      <itemizedlist><para><command>SELECT VARIABLE_VALUE FROM INFORMATION_SCHEMA.SESSION_VARIABLES
             WHERE VARIABLE_NAME='AUTOCOMMIT';</command></para></itemizedlist>
     </para>
    </listitem>
    <listitem>
     <para>
      Be aware: <link linkend="functions.mysql_rollback"><function>mysql_rollback</function></link> function will not work if autocommit
      mode is switched on.
     </para>
    </listitem>
   </itemizedlist>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_rollback"><function>mysql_rollback</function></link>, <link linkend="functions.mysql_commit"><function>mysql_commit</function></link>
  </para>
 </refsect1>
 <refsect1 role="example">
  <title>
   Example
  </title>
<programlisting language="C"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="/home/georg/work/mariadb/doc/mariadb_client/webhelp/docsrc/examples/mysql_autocommit.c" parse="text"/></programlisting>
  <para>
   Output:
  </para>
<!-- &examples.mysql_autocommit.out; -->
  </refsect1>
</refentry>


<refentry id="functions.mysql_change_user" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_change_user</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_change_user</refname>
  <refpurpose>Changes the user of the current database connection</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_bool</type>
   <methodname>mysql_change_user</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>user</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>passwd</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>db</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Changes the user and default database of the current connection.
  </para>
  <para>
   In order to successfully change users a valid username and password
   parameters must be provided and that user must have sufficient permissions to
   access the desired database. If for any reason authorization fails, the
   current user authentication will remain
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>user</entry>
      <entry>The user name for server authentication</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>passwd</entry>
      <entry>The password for server authentication</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>db</entry>
      <entry>The default database. If desired, the NULL value may be passed resulting in only changing the user and not selecting a database. To select a database in this case use the <link linkend="functions.mysql_select_db"><function>mysql_select_db</function></link> function.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, nonzero if an error occured.
  </para>
 </refsect1>
 <refsect1 role="note">
  <note>
   <title/>
   <para>
    <link linkend="functions.mysql_change_user"><function>mysql_change_user</function></link> will always cause the current database
    connection to behave as if was a completely new database connection,
    regardless of if the operation was completed successfully. This reset
    includes performing a rollback on any active transactions, closing all
    temporary tables, and unlocking all locked tables.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_real_connect"><function>mysql_real_connect</function></link>
  </para>
 </refsect1>
 <refsect1 role="example">
  <title>
   Example
  </title>
<programlisting language="C"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="/home/georg/work/mariadb/doc/mariadb_client/webhelp/docsrc/examples/mysql_change_user.c" parse="text"/></programlisting>
  <para>
   Output:
  </para>
<!-- &examples.mysql_change_user.out; -->
  </refsect1>
</refentry>


<refentry id="functions.mysql_character_set_name" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_character_set_name</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_character_set_name</refname>
  <refpurpose>returns the name of the current client character set</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>const char *</type>
   <methodname>mysql_character_set_name</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns the name of the current client character set for the specified
   connection.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   The default client character set for the specified connection
  </para>
 </refsect1>
 <refsect1 role="note">
        <title>Notes</title>
        <note>
   <para>
    For a list of available character sets see
    <xref linkend="chapter.charsets">supported character sets</xref>
    .
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_get_character_set_info"><function>mysql_get_character_set_info</function></link>, <link linkend="functions.mysql_set_character_set"><function>mysql_set_character_set</function></link>
  </para>
 </refsect1>
 <refsect1 role="example">
  <title>
   Example
  </title>
<programlisting language="C"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="/home/georg/work/mariadb/doc/mariadb_client/webhelp/docsrc/examples/mysql_character_set_name.c" parse="text"/></programlisting>
  <para>
   Output:
  </para>
<!-- &examples.mysql_character_set_name.out; -->
  </refsect1>
</refentry>


<refentry id="functions.mysql_close" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_close</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_close</refname>
  <refpurpose>Closes a previously opened connection</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>void</type>
   <methodname>mysql_close</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Closes a previously opened connection.
  </para>
  <para>
   In case
   <parameter>mysql</parameter>
   was allocated by mysql_init, <link linkend="functions.mysql_close"><function>mysql_close</function></link> will also free allocated
   memory and resources.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   void.
  </para>
 </refsect1>
 <refsect1 role="notes">
        <title>Notes</title>
        <note>
   <para>
    To avoid memory leaks and to save system ressources a connection handle
    should always be closed.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_real_connect"><function>mysql_real_connect</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_commit" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_commit</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_commit</refname>
  <refpurpose>Commits the currenct transaction</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_bool</type>
   <methodname>mysql_commit</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Commits the current transaction for the specified database connection.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry> mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, nonzero if an error occured.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title>Notes</title>
   <para>
    Executing <link linkend="functions.mysql_commit"><function>mysql_commit</function></link> will not affected the behaviour of
    autocommit. This means, any upsert statements following
    <link linkend="functions.mysql_commit"><function>mysql_commit</function></link> will be rolled back, when the connection gets closed
   </para>
   <para>
    Instead of using the API function <function>mysql_commit()</function> you can also execute the
    SQL statements <command>COMMIT</command> or <command>END</command>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_rollback"><function>mysql_rollback</function></link>, <link linkend="functions.mysql_autocommit"><function>mysql_autocommit</function></link>
  </para>
 </refsect1>
 <refsect1 role="example">
  <title>
   Example
  </title>
<programlisting language="C"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="/home/georg/work/mariadb/doc/mariadb_client/webhelp/docsrc/examples/mysql_commit.c" parse="text"/></programlisting>
  <para>
   Output:
  </para>
<!-- &examples.mysql_commit.out; -->
  </refsect1>
</refentry>


<refentry id="functions.mysql_data_seek" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_data_seek</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_data_seek</refname>
  <refpurpose>Adjusts the result pointer to an arbitrary row in the result</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>void</type>
   <methodname>mysql_data_seek</methodname>
   <methodparam>
    <type>MYSQL_RES *</type>
    <parameter>result</parameter>
   </methodparam>
   <methodparam>
    <type>my_ulonglong</type>
    <parameter>offset</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   The <link linkend="functions.mysql_data_seek"><function>mysql_data_seek</function></link> function seeks to an aribitrary function
   result pointer specified by the
   <parameter>offset</parameter>
   in the result set.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>result</entry>
      <entry>A result set identifier returned by <function>mysql_store_result()</function>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>offset</entry>
      <entry>The field offset. Must be between zero and the total number of rows minus one (0..<link linkend="functions.mysql_num_rows"><function>mysql_num_rows</function></link> - 1). </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, nonzero if an error occured.
  </para>
 </refsect1>
 <refsect1 role="note">
  <note>
   <title>
    Notes
   </title>
   <para>
    This function can only be used with buffered result sets obtained from the
    use of <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link> function.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link>, <link linkend="functions.mysql_fetch_row"><function>mysql_fetch_row</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_debug" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_debug</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_debug</refname>
  <refpurpose>Enables debug logging</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>void</type>
   <methodname>mysql_debug</methodname>
   <methodparam>
    <type>const char *</type>
    <parameter>debug</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Enables debug output for development and debug purposes by using Fred Fish's
   dbug library. For using this function the mariadb-client library must be
   compiled with debug support
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>debug</entry>
      <entry>A string representing the debugg operation to perform</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
  <para>
   The debug control string is a sequence of colon separated fields as follows:
  </para>
  <para>
   <parameter>field_1</parameter>
   :
   <parameter>field_2</parameter>
   :
   <parameter>field_n</parameter>
  </para>
  <para>
   Each field consists of a mandatory flag character followed by an optional ","
   and comma separated list of modifiers:
  </para>
  <para>
   <parameter>flag[,modifier,modifier,...,modifier]</parameter>
  </para>
  <para>
   The currently recognized flag characters are:
  </para>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry role="ma_table"><para>d</para></entry>
      <entry role="ma_table">Enable output from DBUG_ macros for for the current state. May be followed by a list of keywords which selects output only for the DBUG macros with that keyword. A null list of keywords implies output for all macros.</entry>
     </row>
     <row>
      <entry role="ma_table"><para>D</para></entry>
      <entry role="ma_table">Delay after each debugger output line. The argument is the number of tenths of seconds to delay, subject to machine capabilities. I.E. -#D,20 is delay two seconds.</entry>
     </row>
     <row>
      <entry role="ma_table"><para>f</para></entry>
      <entry role="ma_table">Limit debugging and/or tracing, and profiling to the list of named functions. Note that a null list will disable all functions. The appropriate "d" or "t" flags must still be given, this flag only limits their actions if they are enabled.</entry>
     </row>
     <row>
      <entry role="ma_table"><para>F</para></entry>
      <entry role="ma_table">Identify the source file name for each line of debug or trace output.</entry>
     </row>
     <row>
      <entry role="ma_table"><para>i</para></entry>
      <entry role="ma_table">Identify the process with the pid for each line of debug or trace output.</entry>
     </row>
     <row>
      <entry role="ma_table"><para>g</para></entry>
      <entry role="ma_table">Enable profiling. Create a file called 'dbugmon.out' containing information that can be used to profile the program. May be followed by a list of keywords that select profiling only for the functions in that list. A null list implies that all functions are considered.</entry>
     </row>
     <row>
      <entry role="ma_table"><para>L</para></entry>
      <entry role="ma_table">L Identify the source file line number for each line of debug or trace output.</entry>
     </row>
     <row>
      <entry role="ma_table"><para>n</para></entry>
      <entry role="ma_table">n Print the current function nesting depth for each line of debug or trace output.</entry>
     </row>
     <row>
      <entry role="ma_table"><para>N</para></entry>
      <entry role="ma_table">N Number each line of dbug output.</entry>
     </row>
     <row>
      <entry role="ma_table"><para>o</para></entry>
      <entry role="ma_table">Redirect the debugger output stream to the specified file. The default output is stderr.</entry>
     </row>
     <row>
      <entry role="ma_table"><para>O</para></entry>
      <entry role="ma_table">As O but the file is really flushed between each write. When needed the file is closed and reopened between each write.</entry>
     </row>
     <row>
      <entry role="ma_table"><para>p</para></entry>
      <entry role="ma_table">Limit debugger actions to specified processes. A process must be identified with the DBUG_PROCESS macro and match one in the list for debugger actions to occur.</entry>
     </row>
     <row>
      <entry role="ma_table"><para>P</para></entry>
      <entry role="ma_table">Print the current process name for each line of debug or trace output.</entry>
     </row>
     <row>
      <entry role="ma_table"><para>r</para></entry>
      <entry role="ma_table">When pushing a new state, do not inherit the previous state's function nesting level. Useful when the output is to start at the left margin.</entry>
     </row>
     <row>
      <entry role="ma_table"><para>S</para></entry>
      <entry role="ma_table">Do function _sanity(_file_,_line_) at each debugged function until _sanity() returns something that differs from 0. (Mostly used with safemalloc)</entry>
     </row>
     <row>
      <entry role="ma_table"><para>t</para></entry>
      <entry role="ma_table">Enable function call/exit trace lines. May be followed by a list (containing only one modifier) giving a numeric maximum trace level, beyond which no output will occur for either debugging or tracing macros. The default is a compile time option.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   void
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <note>
          <title>Notes</title>
          <para>
    Instead of using the <link linkend="functions.mysql_debug"><function>mysql_debug</function></link> you also can set the environment
    variable
    <parameter>MYSQL_DEBUG</parameter>
   </para>
   <para>
    Enabling generation of debug information slows down the overall performance
    and generate huge files. In case you need debug information only for special
    places you can disable further generation of debug information by using
    <link linkend="functions.mysql_debug_end"><function>mysql_debug_end</function></link>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_debug_end"><function>mysql_debug_end</function></link>, <link linkend="functions.mysql_dump_debug_info"><function>mysql_dump_debug_info</function></link>
  </para>
 </refsect1>
 <refsect1 role="example">
  <title>
   Example
  </title>
<!--          &examples.mysql_debug; -->
      </refsect1>
</refentry>


<refentry id="functions.mysql_debug_end" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_debug_end</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_debug_end</refname>
  <refpurpose>Disables output of debug information</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>void</type>
   <methodname>mysql_debug_end</methodname>
   <methodparam>
    <type>void</type>
   </methodparam>
  </methodsynopsis>
  <para>
   Stops output of debug information. For using this function the mariadb-client library must be
   compiled with debug support
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   void
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <note>
   <title/>
   <para>
    Instead of using the <link linkend="functions.mysql_debug"><function>mysql_debug</function></link> you also can set the environment
    variable
    <parameter>MYSQL_DEBUG</parameter>
   </para>
   <para>
    Enabling generation of debug information slows down the overall performance
    and generate huge files. In case you need debug information only for special
    places you can disable the generation of debug information by using
    <link linkend="functions.mysql_debug_end"><function>mysql_debug_end</function></link>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_debug_end"><function>mysql_debug_end</function></link>, <link linkend="functions.mysql_dump_debug_info"><function>mysql_dump_debug_info</function></link>
  </para>
 </refsect1>
<!--
      <refsect1 role="example">
        <title>Example</title>
        <programlisting role="xml">
<xi:include href="&example_path;/mysql_debug.c.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </programlisting>
        The above example will output:
        <programlisting><xi:include href="&example_path;/mysql_debug.out" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>
</refsect1> -->
</refentry>


<refentry id="functions.mysql_dump_debug_info" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_dump_debug_info</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_dump_debug_info</refname>
  <refpurpose>Dump server status information</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_dump_debug_info</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   This function is designed to be executed by an user with the SUPER privilege
   and is used to dump server status information into the log for the MariaDB
   Server relating to the connection.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, nonzero if an error occured.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    The server status information will be dumped into the error log file, which
    can be found in the data directory of your server installation.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_debug"><function>mysql_debug</function></link>, <link linkend="functions.mysql_debug_end"><function>mysql_debug_end</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_errno" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_errno</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_errno</refname>
  <refpurpose>Returns the error code for the most recent function call</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>unsigned int</type>
   <methodname>mysql_errno</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns the last error code for the most recent function call that can
   succeed or fail.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   An error code value for the last call, if it failed. zero means no error
   occurred.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    Client error messages are listed in
    <filename>errmsg.h</filename>
    header file, server error messages are listed in
    <filename>mysqld_error.h</filename>
    header file of the server source distribution.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_error"><function>mysql_error</function></link>, <link linkend="functions.mysql_sqlstate"><function>mysql_sqlstate</function></link>.
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_error" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_error</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_error</refname>
  <refpurpose>Returns a string description of the last error</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>const char *</type>
   <methodname>mysql_error</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns the last error message for the most recent function call that can
   succeed or fail.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   A string that describes the error. If no error occured an emtry string is
   returned.
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <note>
   <title/>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_errno"><function>mysql_errno</function></link>, <link linkend="functions.mysql_sqlstate"><function>mysql_sqlstate</function></link>.
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_escape_string" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_escape_string</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_escape_string</refname>
  <refpurpose>escapes a string using the default character set</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>unsigned long</type>
   <methodname>mysql_escape_string</methodname>
   <methodparam>
    <type>char *</type>
    <parameter>to</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>from</parameter>
   </methodparam>
   <methodparam>
    <type>unsigned</type>
    <parameter>long</parameter>
   </methodparam>
 </methodsynopsis>
 </refsect1>
 <refsect1 role="notes">
   <para>
    This function is deprecated and will be discontinued.
   </para>
   <para>
    Please use <link linkend="functions.mysql_real_escape_string"><function>mysql_real_escape_string</function></link> instead.
   </para>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_real_escape_string"><function>mysql_real_escape_string</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_fetch_field" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_fetch_field</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_fetch_field</refname>
  <refpurpose>Returns the next field in the result set.</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>MYSQL_FIELD *</type>
   <methodname>mysql_fetch_field</methodname>
   <methodparam>
    <type>MYSQL_RES *</type>
    <parameter>result</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns the definition of one column of a result set as a pointer to a
   <parameter>MYSQL_FIELD</parameter>
   structure. Call this function repeatedly to retrieve information about all
   columns in the result set.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>result</entry>
      <entry>A result set identifier returned by <function>mysql_store_result()</function> or <function>mysql_use_result()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   A pointer to a
   <parameter>MYSQL_FIELD</parameter>
   structure or
   <parameter>NULL</parameter>
   when no more field is left.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    The field order will be reset if you execute a new SELECT query.
   </para>
   <para>
    In case only information for a specific field is required the field can be
    selected by using the <link linkend="functions.mysql_field_seek"><function>mysql_field_seek</function></link> function or obtained by
    <link linkend="functions.mysql_fetch_field_direct"><function>mysql_fetch_field_direct</function></link> function.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_field_seek"><function>mysql_field_seek</function></link>, <link linkend="functions.mysql_field_tell"><function>mysql_field_tell</function></link>,
   <link linkend="functions.mysql_fetch_field_direct"><function>mysql_fetch_field_direct</function></link>,
   <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link><link linkend="functions.mysql_use_result"><function>mysql_use_result</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_fetch_field_direct" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_fetch_field_direct</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_fetch_field_direct</refname>
  <refpurpose>Fetch meta data for a single field</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>MYSQL_FIELD *</type>
   <methodname>mysql_fetch_field_direct</methodname>
   <methodparam>
    <type>MYSQL_RES *</type>
    <parameter>res</parameter>
   </methodparam>
   <methodparam>
    <type>unsigned int</type>
    <parameter>fieldnr</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns a pointer to a
   <parameter>MYSQL_FIELD</parameter>
   structure which contains field information from the specified result set.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>res</entry>
      <entry>A result set identifier returned by <function>mysql_store_result()</function> or <function>mysql_use_result()</function>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>fieldnr</entry>
      <entry>The field number. This value must be within the range from 0 to number of fields - 1</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   A pointer to a
   <type>MYSQL_FIELD</type>
   structure
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <note>
   <title/>
   <para>
    The total number of fields can be obtained by <link linkend="functions.mysql_field_count"><function>mysql_field_count</function></link>
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_fetch_field"><function>mysql_fetch_field</function></link>, <link linkend="functions.mysql_field_count"><function>mysql_field_count</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_fetch_fields" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_fetch_fields</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_fetch_fields</refname>
  <refpurpose>Returns an array of fields representing the fields in a result set</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>MYSQL_FIELD *</type>
   <methodname>mysql_fetch_fields</methodname>
   <methodparam>
    <type>MYSQL_RES *</type>
    <parameter>res</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   This function serves an identical purpose to the <link linkend="functions.mysql_fetch_field"><function>mysql_fetch_field</function></link>
   function with the single difference that instead of returning one field at a
   time for each field, the fields are returned as an array. Each field contains
   the definition for a column of the result set.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>res</entry>
      <entry>A result set identifier returned by <function>mysql_store_result()</function> or <function>mysql_use_result()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   An array of fields.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    The total number of fields can be obtained by <link linkend="functions.mysql_field_count"><function>mysql_field_count</function></link>
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_fetch_field"><function>mysql_fetch_field</function></link>,
   <link linkend="functions.mysql_fetch_field_direct"><function>mysql_fetch_field_direct</function></link><link linkend="functions.mysql_field_count"><function>mysql_field_count</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_fetch_lengths" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_fetch_lengths</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_fetch_lengths</refname>
  <refpurpose>Returns the length of the columns of the current row</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>unsigned long *</type>
   <methodname>mysql_fetch_lengths</methodname>
   <methodparam>
    <type>MYSQL_RES *</type>
    <parameter>result</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   The <link linkend="functions.mysql_fetch_lengths"><function>mysql_fetch_lengths</function></link> function returns an array containing the
   lengths of every column of the current row within the result set.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>result</entry>
      <entry>A result set identifier returned by <function>mysql_store_result()</function> or <function>mysql_use_result()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   An array of unsigned long integers representing the size of each column (not
   including terminating zero character) or
   <parameter>NULL</parameter>
   if an error occured.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    <link linkend="functions.mysql_fetch_lengths"><function>mysql_fetch_lengths</function></link> is valid only for the current row of the
    result set. It returns NULL if you call it before calling
    <link linkend="functions.mysql_fetch_row"><function>mysql_fetch_row</function></link> or after retrieving all rows in the result.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_fetch_row"><function>mysql_fetch_row</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_fetch_row" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_fetch_row</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_fetch_row</refname>
  <refpurpose>Get a row from result set</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>MYSQL_ROW</type>
   <methodname>mysql_fetch_row</methodname>
   <methodparam>
    <type>MYSQL_RES *</type>
    <parameter>result</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Fetches one row of data from the result set and returns it as an array of
   char pointers (
   <parameter>MYSQL_ROW</parameter>
   ), where each column is stored in an offset starting from 0 (zero). Each
   subsequent call to this function will return the next row within the result
   set, or
   <parameter>NULL</parameter>
   if there are no more rows.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>result</entry>
      <entry>A result set identifier returned by <function>mysql_store_result()</function> or <function>mysql_use_result()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns an array of strings that corresponds to the fetched row or NULL if
   there are no more rows in result set.
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <note>
   <title/>
   <para>
    Im case a column contains a
    <parameter>NULL</parameter>
    value the corresponding char pointer will be set to
    <parameter>NULL</parameter>
   </para>
   <para>
    Memory associated to MYSQL_ROW will be freed when calling
    <link linkend="functions.mysql_free_result"><function>mysql_free_result</function></link> function.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_use_result"><function>mysql_use_result</function></link>, <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_field_count" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_field_count</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_field_count</refname>
  <refpurpose>Returns the number of fields for the most recent query</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>unsigned int</type>
   <methodname>mysql_field_count</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns the number of columns for the most recent query on the connection
   represented by the link parameter. This function can be useful when using the
   <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link> function to determine if the query should have
   produced a non-empty result set or not without knowing the nature of the
   query.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   An unsigned integer representing the number of fields in a result set.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    Function <link linkend="functions.mysql_field_count"><function>mysql_field_count</function></link> should be used to determine if there
    is a result set available.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link>, <link linkend="functions.mysql_use_result"><function>mysql_use_result</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_field_seek" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_field_seek</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_field_seek</refname>
  <refpurpose>Sets field cursor to a specified field offset</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>MYSQL_FIELD_OFFSET</type>
   <methodname>mysql_field_seek</methodname>
   <methodparam>
    <type>MYSQL_RES *</type>
    <parameter>result</parameter>
   </methodparam>
   <methodparam>
    <type>MYSQL_FIELD_OFFSET</type>
    <parameter>offset</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Sets the field cursor to the given offset. The next call to
   <link linkend="functions.mysql_fetch_field"><function>mysql_fetch_field</function></link> will retrieve the field definition of the column
   associated with that offset.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>result</entry>
      <entry>A result set identifier returned by <function>mysql_store_result()</function> or <function>mysql_use_result()</function>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>offset</entry>
      <entry>The field number. This number must be in the range from <parameter>0..number of fields - 1</parameter>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   The previous value of the field cursor
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    The number of fields can be obtained from <link linkend="functions.mysql_field_count"><function>mysql_field_count</function></link>
   </para>.
          <para>
    To move the field cursor to the first field
    <parameter>offset</parameter>
    parameter should be null.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_field_tell"><function>mysql_field_tell</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_field_tell" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_field_tell</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_field_tell</refname>
  <refpurpose>Get current offset of the field cursor</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>MYSQL_FIELD_OFFSET</type>
   <methodname>mysql_field_tell</methodname>
   <methodparam>
    <type>MYSQL_RES *</type>
    <parameter>result</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Return the offset of the field cursor used for the last
   <link linkend="functions.mysql_fetch_field"><function>mysql_fetch_field</function></link> call. This value can be used as a parameter for
   the function <link linkend="functions.mysql_field_seek"><function>mysql_field_seek</function></link>.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>result</entry>
      <entry>A result set identifier returned by <function>mysql_store_result()</function> or <function>mysql_use_result()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returms the current offset of the field cursor
  </para>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_field_seek"><function>mysql_field_seek</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_free_result" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_free_result</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_free_result</refname>
  <refpurpose>Frees the memory associated to a result set</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>void</type>
   <methodname>mysql_free_result</methodname>
   <methodparam>
    <type>MYSQL_RES *</type>
    <parameter>result</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Frees the memory associated to the specified result set.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>result</entry>
      <entry>A result set identifier returned by <function>mysql_store_result()</function> or <function>mysql_use_result()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   void
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <note>
   <title/>
   <para>
    You should always free your result set with <link linkend="functions.mysql_free_result"><function>mysql_free_result</function></link> as
    soon it's not needed anymore
   </para>
   <para>
    Row values obtained by a prior <link linkend="functions.mysql_fetch_row"><function>mysql_fetch_row</function></link> call will become
    invalid after calling <link linkend="functions.mysql_free_result"><function>mysql_free_result</function></link>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link>, <link linkend="functions.mysql_use_result"><function>mysql_use_result</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_get_client_info" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_get_client_info</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_get_client_info</refname>
  <refpurpose>Get client library info</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>const char *</type>
   <methodname>mysql_get_client_info</methodname>
   <methodparam>
    <type>void</type>
    <parameter/>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns a string representing the client library version.
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   A string representing the version of the client library
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <note>
   <title/>
   <para>
    To obtain the numeric value of the client library version use
    <link linkend="functions.mysql_get_client_version"><function>mysql_get_client_version</function></link>
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_get_client_version"><function>mysql_get_client_version</function></link>, <link linkend="functions.mysql_get_host_info"><function>mysql_get_host_info</function></link>,
   <link linkend="functions.mysql_get_proto_info"><function>mysql_get_proto_info</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_get_client_version" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_get_client_version</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_get_client_version</refname>
  <refpurpose>Returns a number representing the client library version</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>unsigned long</type>
   <methodname>mysql_get_client_version</methodname>
   <methodparam>
    <type>void</type>
    <parameter/>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns a number representing the client library version
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   A number representing the version of the client library
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <note>
   <title/>
   <para>
    To obtain a string containing the client library version use
    <link linkend="functions.mysql_get_client_info"><function>mysql_get_client_info</function></link> function.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_get_client_info"><function>mysql_get_client_info</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_get_host_info" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_get_host_info</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_get_host_info</refname>
  <refpurpose>Returns host information</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>const char *</type>
   <methodname>mysql_get_host_info</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Describes the type of connection in use for the connection, including the
   server host name.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns a string describing the type of MariaDB connection in use for the
   connection or NULL if the connection is not valid.
  </para>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_get_server_version"><function>mysql_get_server_version</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_get_proto_info" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_get_proto_info</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_get_proto_info</refname>
  <refpurpose>Returns the protocol version number</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>unsigned int</type>
   <methodname>mysql_get_proto_info</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns the protocol version number for the specified connection
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   The protocol version for the used connection.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    The client library doesn't support protocol version 9 and prior.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_get_host_info"><function>mysql_get_host_info</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_get_server_info" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_get_server_info</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_get_server_info</refname>
  <refpurpose>Get server info</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>const char *</type>
   <methodname>mysql_get_server_info</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Retrieves the server version
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns the server version or NULL on failure.
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <note>
   <title/>
   <para>
    To obtain the numeric server version please use
    <link linkend="functions.mysql_get_server_version"><function>mysql_get_server_version</function></link>
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_get_server_version"><function>mysql_get_server_version</function></link>, <link linkend="functions.mysql_get_client_info"><function>mysql_get_client_info</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_get_server_version" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_get_server_version</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_get_server_version</refname>
  <refpurpose>Get numeric server version</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>unsigned long</type>
   <methodname>mysql_get_server_version</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns an integer representing the version of connected server
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   A long integer containting the version of the connected server.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    The form of the version number is
    <parameter>VERSION_MAJOR</parameter>
    * 10000 +
    <parameter>VERSION_MINOR</parameter>
    * 100 +
    <parameter>VERSION_PATCH</parameter>
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_get_server_info"><function>mysql_get_server_info</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_get_ssl_cipher" display-name="0">
      Available since version 1.1
      <refmeta>
  <refentrytitle>mysql_get_ssl_cipher</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_get_ssl_cipher</refname>
  <refpurpose>Returns the SSL cipher used for the specified connection</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>const char *</type>
   <methodname>mysql_get_ssl_cipher</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns the SSL cipher used for the specified connection.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns the SSL cipher used for the specified connection or NULL if the specified connection doesn't use SSL encryption.
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <note>
   <title/>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also <link linkend="functions.mysql_ssl_set"><function>mysql_ssl_set</function></link>
  </title>
 </refsect1>
</refentry>


<refentry id="functions.mysql_hex_string" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_hex_string</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_hex_string</refname>
  <refpurpose>Converts a string into hexadecimal format</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>unsigned long</type>
   <methodname>mysql_hex_string</methodname>
   <methodparam>
    <type>char *</type>
    <parameter>to</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>from</parameter>
   </methodparam>
   <methodparam>
    <type>unsigned long</type>
    <parameter>len</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   This function is used to create a hexadecimal string which can be used in SQL
   statements. e.g.
   <command>INSERT INTO my_blob VALUES(X'A0E1CD')</command>
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>to</entry>
      <entry>Result buffer</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>from</entry>
      <entry>The string which will be encodeded</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>long</entry>
      <entry>Length of the string (from)</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   The length of the encoded string without the trailing null character.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    The size of the buffer for the encoded string bust be 2 * length + 1.
   </para>
   <para>
    The encoded string does not contain a leading X'.
   </para>
  </note>
 </refsect1>
 <refsect1 role="notes">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_real_escape_string"><function>mysql_real_escape_string</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_info" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_info</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_info</refname>
  <refpurpose>retrieves information about the most recently executed query</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>const char *</type>
   <methodname>mysql_info</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   The <link linkend="functions.mysql_info"><function>mysql_info</function></link> function returns a string providing information
   about the last query executed. The nature of this string is provided below:
   <table border="0">
    <title>
     Possible mysql_info return values
    </title>
    <tgroup cols="2" border="0">
     <thead>
      <row>
       <entry align="center">Query type</entry>
       <entry align="center">Example result string</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>INSERT INTO...SELECT...</entry>
       <entry>Records: 100 Duplicates: 0 Warnings: 0</entry>
      </row>
      <row>
       <entry>INSERT INTO...VALUES (...),(...),(...)</entry>
       <entry>Records: 3 Duplicates: 0 Warnings: 0</entry>
      </row>
      <row>
       <entry>LOAD DATA INFILE ...</entry>
       <entry>Records: 1 Deleted: 0 Skipped: 0 Warnings: 0</entry>
      </row>
      <row>
       <entry>ALTER TABLE ...</entry>
       <entry>Records: 3 Duplicates: 0 Warnings: 0</entry>
      </row>
      <row>
       <entry>UPDATE ...</entry>
       <entry>Rows matched: 40 Changed: 40 Warnings: 0</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   A character string representing additional information about the most
   recently executed query
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    Queries which do not fall into one of the preceding formats are not
    supported (e.g.
    <command>SELECT ..</command>
    ). In these situations <link linkend="functions.mysql_info"><function>mysql_info</function></link> will return an empty string.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_affected_rows"><function>mysql_affected_rows</function></link>, <link linkend="functions.mysql_warning_count"><function>mysql_warning_count</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_init" display-name="0">
 <refmeta>
   <refentrytitle>mysql_init</refentrytitle>
   Available since version 1.0
 </refmeta>
 <refnamediv>
  <refname>mysql_init</refname>
  <refpurpose>Initialize a connection</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>MYSQL *</type>
   <methodname>mysql_init</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Prepares and initializes a MYSQL structure to be used with
   <link linkend="functions.mysql_real_connect"><function>mysql_real_connect</function></link>.
  </para>
  <para>
   If <link linkend="functions.mysql_thread_init"><function>mysql_thread_init</function></link> was not called before, <link linkend="functions.mysql_init"><function>mysql_init</function></link>
   will also initialize the thread subsystem for the current thread.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A pointer to MYSQL or NULL. In case of passing a NULL pointer <link linkend="functions.mysql_init"><function>mysql_init</function></link> will allocate memory and return a pointer to a MYSQL structure.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   A pointer to a MYSQL structure or NULL if an error occured.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    Any subsequent calls to any mysql function (except <link linkend="functions.mysql_options"><function>mysql_options</function></link>)
    will fail until <link linkend="functions.mysql_real_connect"><function>mysql_real_connect</function></link> was called.
   </para>
   <para>
    Memory allocated by <link linkend="functions.mysql_init"><function>mysql_init</function></link> must be freed with
    <link linkend="functions.mysql_close"><function>mysql_close</function></link>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_real_connect"><function>mysql_real_connect</function></link>, <link linkend="functions.mysql_options"><function>mysql_options</function></link>,
   <link linkend="functions.mysql_thread_init"><function>mysql_thread_init</function></link>, <link linkend="functions.mysql_close"><function>mysql_close</function></link>,
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_insert_id" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_insert_id</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_insert_id</refname>
  <refpurpose>Returns the auto generated id used in the last query</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_ulonglong</type>
   <methodname>mysql_insert_id</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   The <link linkend="functions.mysql_insert_id"><function>mysql_insert_id</function></link> function returns the ID generated by a query
   on a table with a column having the AUTO_INCREMENT attribute. If the last
   query wasn't an INSERT or UPDATE statement or if the modified table does not
   have a column with the AUTO_INCREMENT attribute, this function will return
   zero.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   The value of the AUTO_INCREMENT field that was updated by the previous query.
   Returns zero if there was no previous query on the connection or if the query
   did not update an AUTO_INCREMENT value.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    Performing an INSERT or UPDATE statement using the LAST_INSERT_ID() function
    will also modify the value returned by the <link linkend="functions.mysql_insert_id"><function>mysql_insert_id</function></link>
    function.
   </para>
   <para>
    When performing a multi insert statement, <link linkend="functions.mysql_insert_id"><function>mysql_insert_id</function></link> will
    return the value of the first row.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_insert_id"><function>mysql_stmt_insert_id</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_kill" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_kill</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_kill</refname>
  <refpurpose>Asks the server to kill a connection thread.</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_kill</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
   <methodparam>
    <type>unsigned</type>
    <parameter>long</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   This function is used to ask the server to kill a MariaDB thread specified by
   the processid parameter. This value must be retrieved by
   <command>SHOW PROCESSLIST</command>
   or if the own connection should be killed by <link linkend="functions.mysql_thread_id"><function>mysql_thread_id</function></link>.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>long</entry>
      <entry>process id</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns 0 on success, otherwise nonzero.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    To stop a running command without killing the connection use
    <command>KILL QUERY</command>
    .
   </para>
   <para>
    <link linkend="functions.mysql_kill"><function>mysql_kill</function></link> function only kills a connection, it doesn't free any
    memory - this must be done explicitly by calling <link linkend="functions.mysql_close"><function>mysql_close</function></link>
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_thread_id"><function>mysql_thread_id</function></link>, <link linkend="functions.mysql_close"><function>mysql_close</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_library_end" display-name="0">
      Available since version 1.1
      <refmeta>
  <refentrytitle>mysql_library_end</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_server_end</refname>
  <refpurpose>finalizes the client library.</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>void</type>
   <methodname>mysql_library_end</methodname>
   <methodparam>
    <type>void</type>
    <parameter/>
   </methodparam>
  </methodsynopsis>
  <para>
   Finalizes the client library. For a complete description see
   <link linkend="functions.mysql_server_end"><function>mysql_server_end</function></link>
  </para>
 </refsect1>
 <refsect1 role="seealso">
        <title>Notes</title>
        <para>
   <function>mysql_library_end()</function>
   is an alias for <link linkend="functions.mysql_server_end"><function>mysql_server_end</function></link> and defined in
   <filename>mysql.h</filename>
   :
  </para>
  <synopsis language="C">
#define mysql_library_end mysql_server_end
        </synopsis>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_server_end"><function>mysql_server_end</function></link>, <link linkend="functions.mysql_library_init"><function>mysql_library_init</function></link>,
   <link linkend="functions.mysql_library_end"><function>mysql_library_end</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_library_init" display-name="0">
      Available since version 1.1
      <refmeta>
  <refentrytitle>mysql_library_init</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_server_end</refname>
  <refpurpose>initializes the client library.</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>void</type>
   <methodname>mysql_library_init</methodname>
   <methodparam>
    <type>void</type>
    <parameter/>
   </methodparam>
  </methodsynopsis>
  <para>
   Initializes the client library. For a complete description see
   <link linkend="functions.mysql_server_init"><function>mysql_server_init</function></link>
  </para>
 </refsect1>
 <refsect1 role="seealso">
        <title>Notes</title>
        <para>
   <function>mysql_library_init()</function>
   is an alias for <link linkend="functions.mysql_server_init"><function>mysql_server_init</function></link> and defined in
   <filename>mysql.h</filename>
   :
  </para>
  <synopsis language="C">
#define mysql_library_init mysql_server_init
        </synopsis>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_server_end"><function>mysql_server_end</function></link>, <link linkend="functions.mysql_server_init"><function>mysql_server_init</function></link>,
   <link linkend="functions.mysql_library_end"><function>mysql_library_end</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_more_results" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_more_results</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_more_results</refname>
  <refpurpose>Check if there are any more query results from a multi query</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_bool</type>
   <methodname>mysql_more_results</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Indicates if one or more result sets are available from a previous call to
   <link linkend="functions.mysql_real_query"><function>mysql_real_query</function></link>.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns 1 if more result sets are available, otherwise zero.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    The function <link linkend="functions.mysql_set_server_option"><function>mysql_set_server_option</function></link> enables or disables multi
    statement support.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_real_query"><function>mysql_real_query</function></link>, <link linkend="functions.mysql_use_result"><function>mysql_use_result</function></link>,
   <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link>, <link linkend="functions.mysql_next_result"><function>mysql_next_result</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_next_result" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_next_result</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_next_result</refname>
  <refpurpose>Prepares next result set from a multi query</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_next_result</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Prepares next result set from a previous call to <link linkend="functions.mysql_real_query"><function>mysql_real_query</function></link>
   which can be retrieved by <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link> or
   <link linkend="functions.mysql_use_result"><function>mysql_use_result</function></link>.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, nonzero if an error occured.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    If a multi query contains errors the return value of <link linkend="functions.mysql_errno"><function>mysql_errno</function></link>
    and <link linkend="functions.mysql_error"><function>mysql_error</function></link> might change and there will be no result set
    available
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link> <link linkend="functions.mysql_more_results"><function>mysql_more_results</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_num_fields" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_num_fields</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_num_fields</refname>
  <refpurpose>returns number of fields in a result set</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>unsigned int</type>
   <methodname>mysql_num_fields</methodname>
   <methodparam>
    <type>MYSQL_RES *</type>
    <parameter/>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns number of fields in a specified result set.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry/>
      <entry>A result set identifier returned by <function>mysql_store_result()</function> or <function>mysql_use_result()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   The number of fields in a result set.
  </para>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_fetch_field"><function>mysql_fetch_field</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_num_rows" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_num_rows</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_num_rows</refname>
  <refpurpose>Returns number of rows in a result set.</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_ulonglong</type>
   <methodname>mysql_num_rows</methodname>
   <methodparam>
    <type>MYSQL_RES *</type>
    <parameter/>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns the number of rows in a result set.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry/>
      <entry>A result set identifier returned by <function>mysql_store_result()</function> or <function>mysql_use_result()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   The number of rows in a result set.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    The behaviour of <link linkend="functions.mysql_num_rows"><function>mysql_num_rows</function></link> depends on whether buffered or
    unbuffered result sets are being used. For unbuffered result sets,
    <link linkend="functions.mysql_num_rows"><function>mysql_num_rows</function></link> will not return the correct number of rows until
    all the rows in the result have been retrieved.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_use_result"><function>mysql_use_result</function></link>, <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_options" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_options</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_options</refname>
  <refpurpose>Set options</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_options</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
   <methodparam>
    <type>enum</type>
    <parameter>mysql_option</parameter>
   </methodparam>
   <methodparam>
    <type>const void *</type>
    <parameter>arg</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Used to set extra connect options and affect behavior for a connection.
  </para>
  <para>
   This function may be called multiple times to set several options.
   <link linkend="functions.mysql_options"><function>mysql_options</function></link> should be called after <link linkend="functions.mysql_init"><function>mysql_init</function></link> and
   before <link linkend="functions.mysql_real_connect"><function>mysql_real_connect</function></link>.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>mysql_option</entry>
      <entry>The option you want to set.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>arg</entry>
      <entry>The value for the option</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
  <table frame="none">
   <caption>Options</caption>
   <tgroup cols="2" role="ma_table">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="1" ?>
    <thead>
     <row>
      <entry role="ma_table" colsep="0">Option</entry>
      <entry role="ma_table" colsep="0">Description</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry role="ma_table">MYSQL_OPT_CONNECT_TIMEOUT</entry>
      <entry role="ma_table">Connect time out in seconds.
                       <informalexample>
        <synopsis language="C">unsigned int timeout= 5;
mysql_options(mysql, MYSQL_OPT_CONNECT_TIMEOUT, (void *)&amp;timeout);</synopsis>
       </informalexample>
       <para>
        This value will be passed as an
        <parameter>unsigned int *</parameter>
        parameter
       </para>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_OPT_COMPRESS</entry>
      <entry role="ma_table">Use the zlib compressed protocol. If the server doesn't support it, the default
                                           protocol will be used.
                      <informalexample>
        <synopsis language="C">mysql_options(mysql, MYSQL_OPT_COMPRESS, NULL);</synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_OPT_NAMED_PIPE</entry>
      <entry role="ma_table">Use named pipes for client/server protocol. Available for Microsoft Windows operating systems only.
                      <informalexample>
        <synopsis language="C">mysql_options(mysql, MYSQL_OPT_NAMED_PIPE, NULL);</synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_OPT_LOCAL_INFILE</entry>
      <entry role="ma_table">Enable or disable use of <command>LOAD DATA LOCAL INFILE</command>
       <informalexample>
        <synopsis language="C">mysql_options(mysql, MYSQL_OPT_LOCAL_INFILE, NULL);        /* disable */                  
  mysql_options(mysql, MYSQL_OPT_LOCAL_INFILE, (void *)"1"); /* enable */                  
                        </synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_INIT_COMMAND</entry>
      <entry role="ma_table">Command(s) which will be executed when connecting and reconnecting to the server
                      <informalexample>
        <synopsis language="C">mysql_options(mysql, MYSQL_INIT_COMMAND, (void *)"CREATE TABLE ...");</synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_READ_DEFAULT_FILE</entry>
      <entry role="ma_table">Read options from named option file instead of <filename>my.cnf</filename>
       <informalexample>
        <synopsis language="C">mysql_options(mysql, MYSQL_READ_DEFAULT_FILE, (void *)"./my_conf.cnf");</synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_READ_DEFAULT_GROUP</entry>
      <entry role="ma_table">Read options from the named group from my.cnf or the file specified with <parameter>MYSQL_READ_DEFAULT_FILE</parameter>.
                     <informalexample>
        <synopsis language="C">mysql_options(mysql, MYSQL_READ_DEFAULT_GROUP, (void *)"my_section");</synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_SET_CHARSET_NAME</entry>
      <entry role="ma_table">Specify the default character set for the connection.
                     <informalexample>
        <synopsis language="C">mysql_options(mysql, MYSQL_SET_CHARSET_NAME, (void *)"utf8");</synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_OPT_RECONNECT</entry>
      <entry role="ma_table">Enable or disable automatic reconnect.
                     <informalexample>
        <synopsis language="C">mysql_options(mysql, MYSQL_OPT_RECONNECT, NULL);        /* disable */                  
mysql_options(mysql, MYSQL_OPT_RECONNECT, (void *)"1"); /* enable */                  
                       </synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_OPT_PROTOCOL</entry>
      <entry role="ma_table">Specifies which type of protocol should be used.
                      <informalexample>
        <synopsis language="C">enum mysql_protocol_type prot_type= MYSQL_PROTOCOL_SOCKET;
mysql_options(mysql, MYSQL_OPT_PROTOCOL, (void *)&amp;prot_type);
                        </synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_OPT_READ_TIMEOUT</entry>
      <entry role="ma_table">Specifies the timeout in seconds for reading packets from server.
                      <informalexample>
        <synopsis language="C">unsigned int timeout= 5;
mysql_options(mysql, MYSQL_OPT_READ_TIMEOUT, (void *)&amp;timeout);                   
                        </synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_OPT_CONNECT_TIMEOUT</entry>
      <entry role="ma_table">Specifies the timeout in seconds for sending packets to server
                      <informalexample>
        <synopsis language="C">unsigned int timeout= 5;
mysql_options(mysql, MYSQL_OPT_WRITE_TIMEOUT, (void *)&amp;timeout);                   
                        </synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_REPORT_DATA_TRUNCATION</entry>
      <entry role="ma_table">Enable or disable reporting data truncation errors for prepared statement.
                      <informalexample>
        <synopsis language="C">mysql_options(mysql, MYSQL_REPORT_DATA_TRUNCATION, NULL);        /* disable */                  
mysql_options(mysql, MYSQL_REPORT_DATA_TRUNCATION, (void *)"1"); /* enable */                  
                       </synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_OPT_PROGRESS_CALLBACK</entry>
      <entry role="ma_table">Specifies a callback function which will be able to visualize the progress of certain 
long running statements
                 <informalexample>
        <synopsis language="C">static void report_progress(const MYSQL *mysql __attribute__((unused)),
                            uint stage, uint max_stage,
                            double progress __attribute__((unused)),
                            const char *proc_info __attribute__((unused)),
                            uint proc_info_length __attribute__((unused)))
{
  ...
}
mysql_options(mysql, MYSQL_OPT_PROGRESS_CALLBACK, (void *)report_progress);</synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_DATABASE_DRIVER</entry>
      <entry role="ma_table">Loads a plugin to connect to another database type, e.g. the experimental Sqlite interface.Available since version 1.1
                    </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, non zero if an error occured (invalid option or value)
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    If
    <parameter>MYSQL_READ_DEFAULT_FILE</parameter>
    is specified the
    <parameter>[client]</parameter>
    section will be always processed.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_init"><function>mysql_init</function></link>, <link linkend="functions.mysql_real_connect"><function>mysql_real_connect</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_options4" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_options4</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_options4</refname>
  <refpurpose>Set options (with additional 4th parameter)</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_options4</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
   <methodparam>
    <type>enum</type>
    <parameter>mysql_option</parameter>
   </methodparam>
   <methodparam>
    <type>const void *</type>
    <parameter>arg1</parameter>
   </methodparam>
   <methodparam>
    <type>const void *</type>
    <parameter>arg2</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   This function is deprecated, please use <link linkend="functions.mysql_optionsv"><function>mysql_optionsv</function></link> instead. 
  </para>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_optionsv"><function>mysql_optionsv</function></link>, <link linkend="functions.mysql_options"><function>mysql_options</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_optionsv" display-name="0">
      Available since version 1.1
      <refmeta>
  <refentrytitle>mysql_optionsv</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_options</refname>
  <refpurpose>Set options (with variable number of arguments)</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_optionsv</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
   <methodparam>
    <type>enum</type>
    <parameter>mysql_option</parameter>
   </methodparam>
   <methodparam>
    <type>...</type>
    <parameter>variable argument list</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Used to set extra connect options and affect behavior for a connection.
  </para>
  <para>
   This function may be called multiple times to set several options.
   <link linkend="functions.mysql_options"><function>mysql_options</function></link> should be called after <link linkend="functions.mysql_init"><function>mysql_init</function></link> and
   before <link linkend="functions.mysql_real_connect"><function>mysql_real_connect</function></link>.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>mysql_option</entry>
      <entry>The option you want to set.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>...</entry>
      <entry>variable argument list for the option</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
  <table frame="none">
   <caption>Options</caption>
   <tgroup cols="2" role="ma_table">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="1" ?>
    <thead>
     <row>
      <entry role="ma_table" colsep="0">Option</entry>
      <entry role="ma_table" colsep="0">Description</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry role="ma_table">MYSQL_OPT_CONNECT_ATTR_DELETE</entry>
      <entry role="ma_table">Removes an entry from the list of connection attributes.
                       <informalexample>
        <synopsis language="C">mysql_optionsv(mysql, MYSQL_OPT_CONNECT_ATTR_DELETE, "client_library");</synopsis>
       </informalexample>
       <para>
         The value for the connection attribute key will be passed as an <parameter>char *</parameter>
        parameter
       </para>
      </entry>
    </row>
     <row>
      <entry role="ma_table">MYSQL_OPT_CONNECT_ATTR_RESET</entry>
      <entry role="ma_table">Removes all entries from the list of connection attributes.
                       <informalexample>
        <synopsis language="C">mysql_optionsv(mysql, MYSQL_OPT_CONNECT_ATTR_RESET, NULL);</synopsis>
       </informalexample>
       <para>
         The value for the connection attribute key will be passed as an <parameter>char *</parameter>
        parameter
       </para>
      </entry>
    </row>
    
     <row>
      <entry role="ma_table">MYSQL_OPT_COMPRESS</entry>
      <entry role="ma_table">Use the zlib compressed protocol. If the server doesn't support it, the default
                                           protocol will be used.
                      <informalexample>
        <synopsis language="C">mysql_options(mysql, MYSQL_OPT_COMPRESS, NULL);</synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_OPT_NAMED_PIPE</entry>
      <entry role="ma_table">Use named pipes for client/server protocol. Available for Microsoft Windows operating systems only.
                      <informalexample>
        <synopsis language="C">mysql_options(mysql, MYSQL_OPT_NAMED_PIPE, NULL);</synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_OPT_LOCAL_INFILE</entry>
      <entry role="ma_table">Enable or disable use of <command>LOAD DATA LOCAL INFILE</command>
       <informalexample>
        <synopsis language="C">mysql_options(mysql, MYSQL_OPT_LOCAL_INFILE, NULL);        /* disable */                  
  mysql_options(mysql, MYSQL_OPT_LOCAL_INFILE, (void *)"1"); /* enable */                  
                        </synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_INIT_COMMAND</entry>
      <entry role="ma_table">Command(s) which will be executed when connecting and reconnecting to the server
                      <informalexample>
        <synopsis language="C">mysql_options(mysql, MYSQL_INIT_COMMAND, (void *)"CREATE TABLE ...");</synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_READ_DEFAULT_FILE</entry>
      <entry role="ma_table">Read options from named option file instead of <filename>my.cnf</filename>
       <informalexample>
        <synopsis language="C">mysql_options(mysql, MYSQL_READ_DEFAULT_FILE, (void *)"./my_conf.cnf");</synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_READ_DEFAULT_GROUP</entry>
      <entry role="ma_table">Read options from the named group from my.cnf or the file specified with <parameter>MYSQL_READ_DEFAULT_FILE</parameter>.
                     <informalexample>
        <synopsis language="C">mysql_options(mysql, MYSQL_READ_DEFAULT_GROUP, (void *)"my_section");</synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_SET_CHARSET_NAME</entry>
      <entry role="ma_table">Specify the default character set for the connection.
                     <informalexample>
        <synopsis language="C">mysql_options(mysql, MYSQL_SET_CHARSET_NAME, (void *)"utf8");</synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_OPT_RECONNECT</entry>
      <entry role="ma_table">Enable or disable automatic reconnect.
                     <informalexample>
        <synopsis language="C">mysql_options(mysql, MYSQL_OPT_RECONNECT, NULL);        /* disable */                  
mysql_options(mysql, MYSQL_OPT_RECONNECT, (void *)"1"); /* enable */                  
                       </synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_OPT_PROTOCOL</entry>
      <entry role="ma_table">Specifies which type of protocol should be used.
                      <informalexample>
        <synopsis language="C">enum mysql_protocol_type prot_type= MYSQL_PROTOCOL_SOCKET;
mysql_options(mysql, MYSQL_OPT_PROTOCOL, (void *)&amp;prot_type);
                        </synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_OPT_READ_TIMEOUT</entry>
      <entry role="ma_table">Specifies the timeout in seconds for reading packets from server.
                      <informalexample>
        <synopsis language="C">unsigned int timeout= 5;
mysql_options(mysql, MYSQL_OPT_READ_TIMEOUT, (void *)&amp;timeout);                   
                        </synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_OPT_CONNECT_TIMEOUT</entry>
      <entry role="ma_table">Specifies the timeout in seconds for sending packets to server
                      <informalexample>
        <synopsis language="C">unsigned int timeout= 5;
mysql_options(mysql, MYSQL_OPT_WRITE_TIMEOUT, (void *)&amp;timeout);                   
                        </synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_REPORT_DATA_TRUNCATION</entry>
      <entry role="ma_table">Enable or disable reporting data truncation errors for prepared statement.
                      <informalexample>
        <synopsis language="C">mysql_options(mysql, MYSQL_REPORT_DATA_TRUNCATION, NULL);        /* disable */                  
mysql_options(mysql, MYSQL_REPORT_DATA_TRUNCATION, (void *)"1"); /* enable */                  
                       </synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_OPT_PROGRESS_CALLBACK</entry>
      <entry role="ma_table">Specifies a callback function which will be able to visualize the progress of certain 
long running statements
                 <informalexample>
        <synopsis language="C">static void report_progress(const MYSQL *mysql __attribute__((unused)),
                            uint stage, uint max_stage,
                            double progress __attribute__((unused)),
                            const char *proc_info __attribute__((unused)),
                            uint proc_info_length __attribute__((unused)))
{
  ...
}
mysql_options(mysql, MYSQL_OPT_PROGRESS_CALLBACK, (void *)report_progress);</synopsis>
       </informalexample>
      </entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_DATABASE_DRIVER</entry>
      <entry role="ma_table">Loads a plugin to connect to another database type, e.g. the experimental Sqlite interface.Available since version 1.1
                    </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, non zero if an error occured (invalid option or value)
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    If
    <parameter>MYSQL_READ_DEFAULT_FILE</parameter>
    is specified the
    <parameter>[client]</parameter>
    section will be always processed.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_init"><function>mysql_init</function></link>, <link linkend="functions.mysql_real_connect"><function>mysql_real_connect</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_ping" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_ping</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_ping</refname>
  <refpurpose>Pings a server connection</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_ping</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Checks whether the connection to the server is working. If it has gone down,
   and global option
   <option>reconnect</option>
   is enabled an automatic reconnection is attempted.
  </para>
  <para>
   This function can be used by clients that remain idle for a long while, to
   check whether the server has closed the connection and reconnect if
   necessary.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, nonzero if an error occured.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    If a reconnect occured the
    <parameter>thread_id</parameter>
    will change. Also resources bundled to the connection (prepared statements,
    locks, temporary tables, ...) will be released.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_options"><function>mysql_options</function></link>, <link linkend="functions.mysql_kill"><function>mysql_kill</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_query" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_query</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_query</refname>
  <refpurpose>performs a query on the database</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_query</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>query</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Performs a statement pointed to by the null terminate string
   <parameter>query</parameter>
   against the database. Contrary to <link linkend="functions.mysql_real_query"><function>mysql_real_query</function></link>
   <link linkend="functions.mysql_query"><function>mysql_query</function></link> is not binary safe.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>query</entry>
      <entry>A null terminated string containing the statement to be performed.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, non zero on failure
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    For executing multi statements the statements within the null terminated
    string statements must be separated by a semicolon.
   </para>
   <para>
    If your statement contains binary data you should use
    <link linkend="functions.mysql_real_query"><function>mysql_real_query</function></link> or escape your data with
    <link linkend="functions.mysql_hex_string"><function>mysql_hex_string</function></link>
   </para>
   <para>
    To determine if a statement returned a result set use the function
    <link linkend="functions.mysql_num_fields"><function>mysql_num_fields</function></link>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_real_query"><function>mysql_real_query</function></link>, <link linkend="functions.mysql_num_fields"><function>mysql_num_fields</function></link>,
   <link linkend="functions.mysql_hex_string"><function>mysql_hex_string</function></link>, <link linkend="functions.mysql_use_result"><function>mysql_use_result</function></link>
   <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_read_query_result" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_read_query_result</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_read_query_result</refname>
  <refpurpose>Reads a result set package from server</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_bool</type>
   <methodname>mysql_read_query_result</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
    Waits for a server result set or response package from a previously executed <link linkend="functions.mysql_send_query"><function>mysql_send_query</function></link>.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, otherwise non zero
  </para>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
 </title>
 <para>
   <link linkend="functions.mysql_send_query"><function>mysql_send_query</function></link>
 </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_real_connect" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_real_connect</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_real_connect</refname>
  <refpurpose>Establish a connection to database server</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>MYSQL *</type>
   <methodname>mysql_real_connect</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>host</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>user</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>passwd</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>db</parameter>
   </methodparam>
   <methodparam>
    <type>unsigned int</type>
    <parameter>port</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>unix_socket</parameter>
   </methodparam>
   <methodparam>
    <type>unsigned long</type>
    <parameter>flags</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Establishes a connection to a database server.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>host</entry>
      <entry>Can be either a host name or an IP address. Passing the NULL value or the string "localhost" to this parameter, the local host is assumed. When possible, pipes will be used instead of the TCP/IP protoco</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>user</entry>
      <entry>The user name</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>passwd</entry>
      <entry>If provided or NULL, the server will attempt to authenticate the user against those user records which have no password only. This allows one username to be used with different permissions (depending on if a password as provided or not).</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>db</entry>
      <entry>If provided will specify the default database to be used when performing queries.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>port</entry>
      <entry>Specifies the port number to attempt to connect to the server.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>unix_socket</entry>
      <entry>Specifies the socket or named pipe that should be used.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>flags</entry>
      <entry>The <parameter>flags</parameter> allows to set various connection options</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
  <table frame="none">
   <caption>Connection flags</caption>
   <tgroup cols="2" role="ma_table">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="1" ?>
    <thead>
     <row>
      <entry role="ma_table" colsep="0">Flag</entry>
      <entry role="ma_table" colsep="0">Description</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry role="ma_table">CLIENT_FOUND_ROWS</entry>
      <entry role="ma_table">Return the number of matched rows instead of number of changed rows.</entry>
     </row>
     <row>
      <entry role="ma_table">CLIENT_NO_SCHEMA</entry>
      <entry role="ma_table">Forbids the use of database.tablename.column syntax and forces the SQL parser to generate an error.</entry>
     </row>
     <row>
      <entry role="ma_table">CLIENT_COMPRESS</entry>
      <entry role="ma_table">Use compression protocol</entry>
     </row>
     <row>
      <entry role="ma_table">CLIENT_IGNORE_SPACE</entry>
      <entry role="ma_table">This option makes all function names reserved words.</entry>
     </row>
     <row>
      <entry role="ma_table">CLIENT_INTERACTIVE</entry>
      <entry role="ma_table">Forces the server to close a connection after <parameter>interactive_timeout</parameter> seconds (instead of <parameter>wait_timeout</parameter> seconds).</entry>
     </row>
     <row>
      <entry role="ma_table">CLIENT_LOCAL_FILES</entry>
      <entry role="ma_table">Use compression protocol</entry>
     </row>
     <row>
      <entry role="ma_table">CLIENT_MULTI_STATEMENTS</entry>
      <entry role="ma_table">Allows the client to send multiple statements in one command. Statements will be divided by a semicolon.</entry>
     </row>
     <row>
      <entry role="ma_table">CLIENT_MULTI_RESULTS</entry>
      <entry role="ma_table">Indicates that the client is able to handle multiple result sets from stored procedures or multi statements. This option will be automatically set if <parameter>CLIENT_MULTIO_STATEMENTS</parameter> is set.</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   A
   <parameter>MYSQL *</parameter>
   handle or NULL if an error occured.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    The password doesn't need to be encrypted before executing
    <link linkend="functions.mysql_real_connect"><function>mysql_real_connect</function></link> this will be handled in the client server
    protocol.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_init"><function>mysql_init</function></link>, <link linkend="functions.mysql_options"><function>mysql_options</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_real_escape_string" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_real_escape_string</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_real_escape_string</refname>
  <refpurpose>Escapes special characters in a string</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>unsigned long</type>
   <methodname>mysql_real_escape_string</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
   <methodparam>
    <type>char *</type>
    <parameter>to</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>from</parameter>
   </methodparam>
   <methodparam>
    <type>unsigned</type>
    <parameter>long</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   This function is used to create a legal SQL string that you can use in an SQL
   statement. The given string is encoded to an escaped SQL string, taking into
   account the current character set of the connection.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>to</entry>
      <entry>buffer for the encoded string. The size of this buffer must be length * 2 + 1 bytes: in worst case every character of the from stirng needs to be escaped. Additionally a trailing 0 character will be appended.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>from</entry>
      <entry>An string which will be encoded by <link linkend="functions.mysql_real_escape_string"><function>mysql_real_escape_string</function></link>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>long</entry>
      <entry>The length of <parameter>from</parameter> string.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns the length of the encoded (
   <parameter>to</parameter>
   ) string.
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <note>
   <title/>
   <para>
    todo!
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
 </refsect1>
</refentry>


<refentry id="functions.mysql_real_query" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_real_query</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_real_query</refname>
  <refpurpose>performs a query on the database</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_real_query</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>q</parameter>
   </methodparam>
   <methodparam>
    <type>unsigned</type>
    <parameter>long</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   The <link linkend="functions.mysql_real_query"><function>mysql_real_query</function></link> is the binary safe function for performing a
   statement on the database server.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>query</entry>
      <entry>A string containing the statement to be performed.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>long</entry>
      <entry>Length of the string.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, otherwise non zero
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <note>
   <title/>
   <para>
    Contrary to <link linkend="functions.mysql_query"><function>mysql_query</function></link> function <link linkend="functions.mysql_real_query"><function>mysql_real_query</function></link> is
    binary safe.
   </para>
   <para>
    To determine if <link linkend="functions.mysql_real_query"><function>mysql_real_query</function></link> returns a result set use the
    <link linkend="functions.mysql_num_fields"><function>mysql_num_fields</function></link> function.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_query"><function>mysql_query</function></link>, <link linkend="functions.mysql_num_fields"><function>mysql_num_fields</function></link>,
   <link linkend="functions.mysql_use_result"><function>mysql_use_result</function></link>, <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_refresh" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_refresh</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_refresh</refname>
  <refpurpose>flush server information</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_refresh</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
   <methodparam>
    <type>unsigned int</type>
    <parameter>options</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   The <link linkend="functions.mysql_refresh"><function>mysql_refresh</function></link> flushes different types of information stored on
   server side. The bit-masked parameter
   <parameter>options</parameter>
   specifies which kind of information will be flushed.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>options</entry>
      <entry>A bit masked composed integer</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
  <table frame="none">
   <caption>Option flags</caption>
   <tgroup cols="2">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="1" ?>
    <thead>
     <row>
      <entry role="ma_table" colsep="0">Option</entry>
      <entry role="ma_table" colsep="0">Description</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry role="ma_table">REFRESH_GRANT</entry>
      <entry role="ma_table">Refresh grant tables.</entry>
     </row>
     <row>
      <entry role="ma_table">REFRESH_LOG</entry>
      <entry role="ma_table">Flush logs.</entry>
     </row>
     <row>
      <entry role="ma_table">REFRESH_TABLES</entry>
      <entry role="ma_table">Flush table cache</entry>
     </row>
     <row>
      <entry role="ma_table">REFRESH_HOSTS</entry>
      <entry role="ma_table">Flush host cache</entry>
     </row>
     <row>
      <entry role="ma_table">REFRESH_STATUS</entry>
      <entry role="ma_table">Reset status variables</entry>
     </row>
     <row>
      <entry role="ma_table">REFRESH_THREADS</entry>
      <entry role="ma_table">Flush thread cache</entry>
     </row>
     <row>
      <entry role="ma_table">REFRESH_SLAVE</entry>
      <entry role="ma_table">Reset master server information and restart slaves</entry>
     </row>
     <row>
      <entry role="ma_table">REFRESH_MASTER</entry>
      <entry role="ma_table">Remove binary log files</entry>
     </row>
     <row>
      <entry role="ma_table">REFRESH_READ_LOCK</entry>
      <entry role="ma_table"/>
     </row>
     <row>
      <entry role="ma_table">REFRESH_FAST</entry>
      <entry role="ma_table"/>
     </row>
    </tbody>
   </tgroup>
  </table>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, otherweise non zero.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    To combine different values in the options parameter use the OR operator
    '|'.
   </para>
   <para>
    The function <link linkend="functions.mysql_reload"><function>mysql_reload</function></link> is an alias for
    <link linkend="functions.mysql_refresh"><function>mysql_refresh</function></link>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
 </refsect1>
</refentry>


<refentry id="functions.mysql_reload" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_reload</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_reload</refname>
  <refpurpose>reloads server grant tables</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_reload</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   The
   <function>mysql_reload()</function>
   reloads database grant tables.
  </para>.
      </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, otherweise non zero.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
          <title>Notes</title>
          <para>
    <function>mysql_reload()</function>
    is a macro for <link linkend="functions.mysql_refresh"><function>mysql_refresh</function></link>, defined in
    <filename>mysql.h</filename>
    :
   </para>
   <synopsis language="C">
#define mysql_reload(mysql) mysql_refresh((mysql),REFRESH_GRANT)
</synopsis>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_refresh"><function>mysql_refresh</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_rollback" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_rollback</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_rollback</refname>
  <refpurpose>Rolls back current transaction</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_bool</type>
   <methodname>mysql_rollback</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Rolls back the current transaction for the database.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, nonzero if an error occured.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    <link linkend="functions.mysql_rollback"><function>mysql_rollback</function></link> will not work as expected if autocommit mode was
    set or the storage engine does not support transactions.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_commit"><function>mysql_commit</function></link>, <link linkend="functions.mysql_autocommit"><function>mysql_autocommit</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_row_seek" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_row_seek</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_row_seek</refname>
  <refpurpose>Positions row cursor</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>MYSQL_ROW_OFFSET</type>
   <methodname>mysql_row_seek</methodname>
   <methodparam>
    <type>MYSQL_RES *</type>
    <parameter>result</parameter>
   </methodparam>
   <methodparam>
    <type>MYSQL_ROW_OFFSET</type>
    <parameter>offset</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Positions the row cursor to an aribtrary row in a result set which was
   obtaimed by <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link>.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>result</entry>
      <entry>A result set identifier returned by <function>mysql_store_result()</function>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>offset</entry>
      <entry>Row offset. This value can be obtained either by <link linkend="functions.mysql_row_seek"><function>mysql_row_seek</function></link> or <link linkend="functions.mysql_row_tell"><function>mysql_row_tell</function></link></entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   The previous row offset.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    This function will not work if the result set was obtained by
    <link linkend="functions.mysql_use_result"><function>mysql_use_result</function></link>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link>, <link linkend="functions.mysql_row_tell"><function>mysql_row_tell</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_row_tell" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_row_tell</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_row_tell</refname>
  <refpurpose>Returns position of result cursor</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>MYSQL_ROW_OFFSET</type>
   <methodname>mysql_row_tell</methodname>
   <methodparam>
    <type>MYSQL_RES *</type>
    <parameter>res</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns the row offset of a result cursor. The returned offset value can be
   used to reposition the result cursor by calling <link linkend="functions.mysql_row_seek"><function>mysql_row_seek</function></link>
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>res</entry>
      <entry>A result set identifier returned by <function>mysql_store_result()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   The row offset of the result cursor
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    This function will not work if the result set was obtained by
    <link linkend="functions.mysql_use_result"><function>mysql_use_result</function></link>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link>, <link linkend="functions.mysql_row_seek"><function>mysql_row_seek</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_select_db" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_select_db</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_select_db</refname>
  <refpurpose>Selects a database as default</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_select_db</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>db</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Sets the current active database on the server that's associated with the
   specified link identifier. Every subsequent api call will be made on the
   active database.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>db</entry>
      <entry>The default database name</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, non-zero on failure
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    The SQL command
    <command>SELECT DATABASE()</command>
    will return the name of the default database.
   </para>
   <para>
    The default database can also be set by the
    <parameter>db</parameter>
    parameter in <link linkend="functions.mysql_real_connect"><function>mysql_real_connect</function></link>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_real_connect"><function>mysql_real_connect</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_send_query" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_send_query</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_send_query</refname>
  <refpurpose>performs a non blocking query on the database</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_send_query</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>query</parameter>
   </methodparam>
   <methodparam>
    <type>unsigned</type>
    <parameter>long</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
    The function <function>mysql_send_query</function> sends a non blocking query to the database server. Opposed to
    <link linkend="functions.mysql_real_query"><function>mysql_real_query</function></link> <function>mysql_send_query</function> doesn't wait until the server sends
    a result set or ok packet. This will allow you to create parallel event driven applications without
    using too many system resources.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>query</entry>
      <entry>A string containing the statement to be performed.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>long</entry>
      <entry>Length of the string.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, otherwise non zero
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <note>
   <title>Notes</title>
   <para>
    Before obtaining a result set by <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link> or <link linkend="functions.mysql_use_result"><function>mysql_use_result</function></link>
    you have to call <link linkend="functions.mysql_read_query_result"><function>mysql_read_query_result</function></link>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_real_query"><function>mysql_real_query</function></link>, <link linkend="functions.mysql_query"><function>mysql_query</function></link>,
   <link linkend="functions.mysql_use_result"><function>mysql_use_result</function></link>, <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_server_end" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_server_end</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_server_end</refname>
  <refpurpose>An alias for mysql_library_end()</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>void</type>
   <methodname>mysql_server_end</methodname>
   <methodparam>
    <type>void</type>
    <parameter/>
   </methodparam>
  </methodsynopsis>
  <para>
   An alias for <link linkend="functions.mysql_library_end"><function>mysql_library_end</function></link>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_server_end"><function>mysql_server_end</function></link>, <link linkend="functions.mysql_library_init"><function>mysql_library_init</function></link>,
   <link linkend="functions.mysql_library_end"><function>mysql_library_end</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_server_init" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_server_init</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_server_init</refname>
  <refpurpose>An alias for mysql_library_init()</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_server_init</methodname>
   <methodparam>
    <type>int</type>
    <parameter>argc</parameter>
   </methodparam>
   <methodparam>
    <type>char *</type>
    <parameter/>
   </methodparam>
   <methodparam>
    <type>char *</type>
    <parameter/>
   </methodparam>
  </methodsynopsis>
  <para>
   This is an alias for <link linkend="functions.mysql_library_init"><function>mysql_library_init</function></link>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_server_end"><function>mysql_server_end</function></link>, <link linkend="functions.mysql_library_init"><function>mysql_library_init</function></link>,
   <link linkend="functions.mysql_library_end"><function>mysql_library_end</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_set_server_option" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_set_server_option</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_set_server_option</refname>
  <refpurpose>Enables or disables server option</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_set_server_option</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
   <methodparam>
    <type>enum</type>
    <parameter>enum_mysql_set_option</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Enables or disables a server option for the connection.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>enum_mysql_set_option</entry>
      <entry>Server options</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
  <table frame="none">
   <caption>Server options</caption>
   <tgroup cols="2">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="1" ?>
    <thead>
     <row>
      <entry role="ma_table" colsep="0">Option</entry>
      <entry role="ma_table" colsep="0">Description</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry role="ma_table">MYSQL_OPTION_MULTI_STATEMENTS_OFF</entry>
      <entry role="ma_table">Disables multi statement support</entry>
     </row>
     <row>
      <entry role="ma_table">MYSQL_OPTION_MULTI_STATEMENTS_ON</entry>
      <entry role="ma_table">Enable multi statement support</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, non-zero on failure
  </para>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_real_connect"><function>mysql_real_connect</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_shutdown" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_shutdown</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_shutdown</refname>
  <refpurpose>Shutdowns the database server</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_shutdown</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
   <methodparam>
    <type>enum</type>
    <parameter>mysql_enum_shutdown_level</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Sends a shutdown message to the server.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>mysql_enum_shutdown_level</entry>
      <entry>Currently only one shutdown level, <parameter>SHUTDOWN_DEFAULT</parameter> is supported.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, non-zero on failure.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    To shutdown the database server, the user for the current connection must
    have
    <parameter>SHUTDOWN</parameter>
    privileges
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_kill"><function>mysql_kill</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_sqlstate" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_sqlstate</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_sqlstate</refname>
  <refpurpose>Returns sqlstate error</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>const char *</type>
   <methodname>mysql_sqlstate</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns a string containing the SQLSTATE error code for the most recently
   invoked function that can succeed or fail. The error code consists of five
   characters. '00000' means no error. The values are specified by ANSI SQL and
   ODBC
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns a string containing the SQLSTATE error code for the last error. The
   error code consists of five characters. '
   <parameter>00000'</parameter>
   means no error.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    Please note that not all client library error codes are mapped to SQLSTATE
    errors. Errors which can't be mapped will returned as value
    <parameter>HY000</parameter>
    .
   </para>
  </note>
 </refsect1>
 <refsect1 role="seeaso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_error"><function>mysql_error</function></link>, <link linkend="functions.mysql_errno"><function>mysql_errno</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_ssl_set" display-name="0">
      Available since version 1.1
      <refmeta>
  <refentrytitle>mysql_ssl_set</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_ssl_set</refname>
  <refpurpose>Establishes a SSL connection</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_bool</type>
   <methodname>mysql_ssl_set</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>key</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>cert</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>ca</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>capath</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>cipher</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
    Used for establishing secure connections using SSL. The function must be called before <link linkend="functions.mysql_real_connect"><function>mysql_real_connect</function></link> 
    This function does nothing unless OpenSSL support is enabled. 
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>key</entry>
      <entry>The path name to the key file</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>cert</entry>
      <entry>The path name to the certificate file</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>ca</entry>
      <entry>The path name to the certificate authority file</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>capath</entry>
      <entry>The pathname to a directory that contains trusted SSL ca certificates in PEM format</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>cipher</entry>
      <entry>A list of valid ciphers to use for SSL encryption</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, nonzero if an error occured.
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <note>
   <title/>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
 </title>
 <param><link linkend="functions.mysql_get_ssl_cipher"><function>mysql_get_ssl_cipher</function></link></param>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stat" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stat</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stat</refname>
  <refpurpose>returns system status</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>const char *</type>
   <methodname>mysql_stat</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   <link linkend="functions.mysql_stat"><function>mysql_stat</function></link> returns the current server status.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns a string with the status for uptime, threads, queries, open tables,
   flush tables and queries per second.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    For a complete list of other status variables, you have to use the
    <command>SHOW STATUS</command>
    SQL command
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_get_server_info"><function>mysql_get_server_info</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_affected_rows" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_affected_rows</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_affected_rows</refname>
  <refpurpose>Returns the number of affected rows from previous executed prepared statement</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_ulonglong</type>
   <methodname>mysql_stmt_affected_rows</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns the number of affected rows by the last prepared statement associated
   with
   <parameter>mysql</parameter>
   , if the operation was an "upsert" (INSERT, UPDATE, DELETE or REPLACE)
   statement.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns the number of affected rows on success, or -1 if the last prepared
   statement failed.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    When using UPDATE, MariaDB will not update columns where the new value is
    the same as the old value. This creates the possibility that
    <link linkend="functions.mysql_stmt_affected_rows"><function>mysql_stmt_affected_rows</function></link> may not actually equal the number of
    rows matched, only the number of rows that were literally affected by the
    query.
   </para>
   <para>
    The REPLACE statement first deletes the record with the same primary key and
    then inserts the new record. This function returns the number of deleted
    records in addition to the number of inserted records.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_insert_id"><function>mysql_stmt_insert_id</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_attr_get" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_attr_get</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_attr_get</refname>
  <refpurpose>Used to get the current value of a statement attribute</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_bool</type>
   <methodname>mysql_stmt_attr_get</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
   <methodparam>
    <type>enum</type>
    <parameter>enum_stmt_attr_type</parameter>
   </methodparam>
   <methodparam>
    <type>void *</type>
    <parameter>attr</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Gets the current value of a statement attribute.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>enum_stmt_attr_type</entry>
      <entry>The attribute you want to get</entry>
     </row>
     <row>
      <entry>OUT</entry>
      <entry>attr</entry>
      <entry>Pointer to a variable, which will contain the attribute value.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
  <table frame="none">
   <caption>Statement attributes</caption>
   <tgroup cols="2">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <thead>
     <row>
      <entry role="ma_table" colsep="0">Attribute</entry>
      <entry role="ma_table" colsep="0">Description</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry role="ma_table">STMT_ATTR_UPDATE_MAX_LENGTH</entry>
      <entry role="ma_table">Indicates if <link linkend="functions.mysql_stmt_store_result"><function>mysql_stmt_store_result</function></link> will update the <parameter>max_length</parameter> value of <parameter>MYSQL_FIELD</parameter> structures.</entry>
     </row>
     <row>
      <entry role="ma_table">STMT_ATTR_CURSOR_TYPE</entry>
      <entry role="ma_table">Cursor type. Possible values are <parameter>CURSOR_TYPE_READ_ONLY</parameter> or default value <parameter>CURSOR_TYPE_NO_CURSOR</parameter>.</entry>
     </row>
     <row>
      <entry role="ma_table">STMT_ATTR_PREFETCH_ROWS</entry>
      <entry role="ma_table">Number of rows which will be prefetched. The default value is 1.</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, non zero on failure.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    Setting the number of prefetched rows will work only for read only cursors.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_attr_set"><function>mysql_stmt_attr_set</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_attr_set" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_attr_set</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_attr_set</refname>
  <refpurpose>Modifies the behavior of a prepared statement</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_bool</type>
   <methodname>mysql_stmt_attr_set</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
   <methodparam>
    <type>enum</type>
    <parameter>enum_stmt_attr_type</parameter>
   </methodparam>
   <methodparam>
    <type>const void *</type>
    <parameter>attr</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Used to modify the behavior of a prepared statement. This function may be
   called multiple times to set several attributes.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>enum_stmt_attr_type</entry>
      <entry>The attribute that you want to set. It can have one of the following values:</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>attr</entry>
      <entry>The value to assign to the attribute</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
  <table frame="none">
   <caption>Statement attributes</caption>
   <tgroup cols="2">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <thead>
     <row>
      <entry role="ma_table" colsep="0">Attribute</entry>
      <entry role="ma_table" colsep="0">Description</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry role="ma_table">STMT_ATTR_UPDATE_MAX_LENGTH</entry>
      <entry role="ma_table">Indicates if <link linkend="functions.mysql_stmt_store_result"><function>mysql_stmt_store_result</function></link> will update the <parameter>max_length</parameter> value of <parameter>MYSQL_FIELD</parameter> structures.</entry>
     </row>
     <row>
      <entry role="ma_table">STMT_ATTR_CURSOR_TYPE</entry>
      <entry role="ma_table">Cursor type. Possible values are <parameter>CURSOR_TYPE_READ_ONLY</parameter> or default value <parameter>CURSOR_TYPE_NO_CURSOR</parameter>.</entry>
     </row>
     <row>
      <entry role="ma_table">STMT_ATTR_PREFETCH_ROWS</entry>
      <entry role="ma_table">Number of rows which will be prefetched. The default value is 1.</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Tero on success, non-zero on failure
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    If you use the
    <parameter>MYSQL_STMT_ATTR_CURSOR_TYPE</parameter>
    option with
    <parameter>MYSQL_CURSOR_TYPE_READ_ONLY</parameter>
    , a cursor is opened for the statement when you invoke
    <link linkend="functions.mysql_stmt_execute"><function>mysql_stmt_execute</function></link>. If there is already an open cursor from a
    previous <link linkend="functions.mysql_stmt_execute"><function>mysql_stmt_execute</function></link> call, it closes the cursor before
    opening a new one. <link linkend="functions.mysql_stmt_reset"><function>mysql_stmt_reset</function></link> also closes any open cursor
    before preparing the statement for re-execution.
    <link linkend="functions.mysql_stmt_free_result"><function>mysql_stmt_free_result</function></link> closes any open cursor.
   </para>
   <para>
    If you open a cursor for a prepared statement it is unnecessary to call
    <link linkend="functions.mysql_stmt_store_result"><function>mysql_stmt_store_result</function></link>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_attr_set"><function>mysql_stmt_attr_set</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_bind_param" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_bind_param</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_bind_param</refname>
  <refpurpose>Binds parameter variables to a prepared statement</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_bool</type>
   <methodname>mysql_stmt_bind_param</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
   <methodparam>
    <type>MYSQL_BIND *</type>
    <parameter>bnd</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Binds variables for parameter markers in the prepared statement that was
   passed to <link linkend="functions.mysql_stmt_prepare"><function>mysql_stmt_prepare</function></link>. Variabl
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>bind</entry>
      <entry>An array of <parameter>MYSQL_BIND</parameter> structures. The size of this array must be equal to the number of parameters.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, non-zero on failure.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    The number of parameters can be obtained by
    <link linkend="functions.mysql_stmt_param_count"><function>mysql_stmt_param_count</function></link>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_prepare"><function>mysql_stmt_prepare</function></link>, <link linkend="functions.mysql_stmt_bind_result"><function>mysql_stmt_bind_result</function></link>,
   <link linkend="functions.mysql_stmt_execute"><function>mysql_stmt_execute</function></link>, <link linkend="functions.mysql_stmt_param_count"><function>mysql_stmt_param_count</function></link>,
   <link linkend="functions.mysql_stmt_send_long_data"><function>mysql_stmt_send_long_data</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_bind_result" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_bind_result</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_bind_result</refname>
  <refpurpose>Binds variables to a prepared statement for result storage</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_bool</type>
   <methodname>mysql_stmt_bind_result</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
   <methodparam>
    <type>MYSQL_BIND *</type>
    <parameter>bind</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Binds columns in the result set to variables.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>bind</entry>
      <entry>An array of <parameter>MYSQL_BIND</parameter> structures. The size of this array must be equal to the number of columns in result set.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, non-zero on failure.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    To determine the number of columns in result set use
    <link linkend="functions.mysql_stmt_field_count"><function>mysql_stmt_field_count</function></link>.
   </para>
   <para>
    A column can be bound or rebound at any time, even after a result set has
    been partially retrieved. The new binding takes effect the next time
    <link linkend="functions.mysql_stmt_fetch"><function>mysql_stmt_fetch</function></link> is called.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_field_count"><function>mysql_stmt_field_count</function></link>, <link linkend="functions.mysql_stmt_execute"><function>mysql_stmt_execute</function></link>,
   <link linkend="functions.mysql_stmt_fetch"><function>mysql_stmt_fetch</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_close" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_close</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_close</refname>
  <refpurpose>Closes a prepared statement</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_bool</type>
   <methodname>mysql_stmt_close</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Closes a prepared statement. <link linkend="functions.mysql_stmt_close"><function>mysql_stmt_close</function></link> also deallocates the
   statement handle. If the current statement has pending or unread results,
   this function cancels them so that the next query can be executed.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, nonzero if an error occured.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    If you want to reuse the statement handle with a different SQL command, use
    <link linkend="functions.mysql_stmt_reset"><function>mysql_stmt_reset</function></link>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_init"><function>mysql_stmt_init</function></link><link linkend="functions.mysql_stmt_reset"><function>mysql_stmt_reset</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_data_seek" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_data_seek</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_data_seek</refname>
  <refpurpose>Seeks to an arbitrary row in statement result set</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>void</type>
   <methodname>mysql_stmt_data_seek</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
   <methodparam>
    <type>my_ulonglong</type>
    <parameter>offset</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Seeks to an arbitrary row in statement result set obtained by a previous call
   to <link linkend="functions.mysql_stmt_store_result"><function>mysql_stmt_store_result</function></link>.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>offset</entry>
      <entry>Row offset. This value must between 0 and number of rows - 1.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   void
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    The number of rows can be obtained by function
    <link linkend="functions.mysql_stmt_num_rows"><function>mysql_stmt_num_rows</function></link>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_row_tell"><function>mysql_stmt_row_tell</function></link>, <link linkend="functions.mysql_stmt_store_result"><function>mysql_stmt_store_result</function></link>,
   <link linkend="functions.mysql_stmt_num_rows"><function>mysql_stmt_num_rows</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_errno" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_errno</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_errno</refname>
  <refpurpose>Returns the error number for the most recent prepared statement call</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>unsigned int</type>
   <methodname>mysql_stmt_errno</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns the error code for the most recently invoked statement function that
   can succeed or fail.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   An error code value for the last call, if it failed. zero means no error
   occurred.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    Client error messages are listed in
    <filename>errmsg.h</filename>
    header file, server error messages are listed in
    <filename>mysqld_error.h</filename>
    header file of the server source distribution.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_error"><function>mysql_stmt_error</function></link>, <link linkend="functions.mysql_stmt_sqlstate"><function>mysql_stmt_sqlstate</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_error" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_error</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_error</refname>
  <refpurpose>Returns a string description for last statement error</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>const char *</type>
   <methodname>mysql_stmt_error</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns a containing the error message for the most recently invoked
   statement function that can succeed or fail.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   A string that describes the error. An empty string if no error occurred.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    Client error messages are listed in
    <filename>errmsg.h</filename>
    header file, server error messages are listed in
    <filename>mysqld_error.h</filename>
    header file of the server source distribution.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_errno"><function>mysql_stmt_errno</function></link>, <link linkend="functions.mysql_stmt_sqlstate"><function>mysql_stmt_sqlstate</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_execute" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_execute</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_execute</refname>
  <refpurpose>Executes a prepared statement</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_stmt_execute</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Executes a prepared statement which was previously prepared by
   <link linkend="functions.mysql_stmt_prepare"><function>mysql_stmt_prepare</function></link>. When executed any parameter markers which
   exist will automatically be replaced with the appropriate data.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, non-zero on failure.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    If the statement is UPDATE, DELETE, or INSERT, the total number of affected
    rows can be determined by using the <link linkend="functions.mysql_stmt_affected_rows"><function>mysql_stmt_affected_rows</function></link>
    function. Likewise, if the query yields a result set the
    <link linkend="functions.mysql_stmt_fetch"><function>mysql_stmt_fetch</function></link> function is used.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_prepare"><function>mysql_stmt_prepare</function></link>, <link linkend="functions.mysql_stmt_bind_param"><function>mysql_stmt_bind_param</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_fetch" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_fetch</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_fetch</refname>
  <refpurpose>Fetches result buffer into bound buffer</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_stmt_fetch</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Fetch the result from a prepared statement into the buffer bound by
   <link linkend="functions.mysql_stmt_bind_result"><function>mysql_stmt_bind_result</function></link>.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns one of the following values
  </para>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <term>0</term>
      <entry>Success</entry>
     </row>
     <row>
      <term>MYSQL_NO_DATA</term>
      <entry>End of result set reached</entry>
     </row>
     <row>
      <term>MYSQL_DATA_TRUNCATION</term>
      <entry>One or more values are truncated</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    Note that all columns must be bound by the application before calling
    <link linkend="functions.mysql_stmt_fetch"><function>mysql_stmt_fetch</function></link>.
   </para>
   <para>
    Data are transferred unbuffered without calling
    <link linkend="functions.mysql_stmt_store_result"><function>mysql_stmt_store_result</function></link> which can decrease performance (but
    reduces memory cost).
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_prepare"><function>mysql_stmt_prepare</function></link>, <link linkend="functions.mysql_stmt_bind_result"><function>mysql_stmt_bind_result</function></link>,
   <link linkend="functions.mysql_stmt_execute"><function>mysql_stmt_execute</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_fetch_column" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_fetch_column</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_fetch_column</refname>
  <refpurpose>Fetches a single column in to a bind buffer</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_stmt_fetch_column</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
   <methodparam>
    <type>MYSQL_BIND *</type>
    <parameter>bind_arg</parameter>
   </methodparam>
   <methodparam>
    <type>unsigned int</type>
    <parameter>column</parameter>
   </methodparam>
   <methodparam>
    <type>unsigned long</type>
    <parameter>offset</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   This function can be used to fetch large data of a single column in pieces.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>bind_arg</entry>
      <entry>A pointer to a <parameter>MYSQL_BIND</parameter> structure</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>column</entry>
      <entry>number of column, first column is numbered zero.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>offset</entry>
      <entry>Offset at which to begin retrieving data.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, non-zero on failure
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    The size of the buffer is specified within
    <parameter>MYSQL_BIND</parameter>
    structure.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_fetch"><function>mysql_stmt_fetch</function></link>, <link linkend="functions.mysql_stmt_send_long_data"><function>mysql_stmt_send_long_data</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_field_count" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_field_count</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_field_count</refname>
  <refpurpose>Returns the number of fields in a result set of a prepared statement</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>unsigned int</type>
   <methodname>mysql_stmt_field_count</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns the number of fields in a result set of a prepared statement.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   The number of fields in a result set.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    The number of fields will be available after calling
    <link linkend="functions.mysql_stmt_prepare"><function>mysql_stmt_prepare</function></link>.
   </para>
   <para>
    <link linkend="functions.mysql_stmt_field_count"><function>mysql_stmt_field_count</function></link> returns zero for UPSERT statements which
    doesn't produce a result set.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_prepare"><function>mysql_stmt_prepare</function></link>, <link linkend="functions.mysql_stmt_param_count"><function>mysql_stmt_param_count</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_free_result" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_free_result</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_free_result</refname>
  <refpurpose>Frees stored result memory of a prepared statement</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_bool</type>
   <methodname>mysql_stmt_free_result</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns the number of fields in a result set of a prepared statement, which
   was allocated by <link linkend="functions.mysql_stmt_store_result"><function>mysql_stmt_store_result</function></link>.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   void
  </para>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_store_result"><function>mysql_stmt_store_result</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_init" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_init</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_init</refname>
  <refpurpose>Initializes a prepared statement</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>MYSQL_STMT *</type>
   <methodname>mysql_stmt_init</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Initializes and allocates memory for a prepared statement.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   A pointer to a MYSQL_STMT structure or NULL if an error occured.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    A statement handle which was allocated by <link linkend="functions.mysql_stmt_init"><function>mysql_stmt_init</function></link> needs
    to be freed with <link linkend="functions.mysql_stmt_close"><function>mysql_stmt_close</function></link>.
   </para>
   <para>
    Any subsequent calls to any mysql_stmt function will fail until
    <link linkend="functions.mysql_stmt_prepare"><function>mysql_stmt_prepare</function></link> was called.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_close"><function>mysql_stmt_close</function></link>, <link linkend="functions.mysql_stmt_prepare"><function>mysql_stmt_prepare</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_insert_id" display-name="0">
 <refmeta>
  <refentrytitle>mysql_stmt_insert_id</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_insert_id</refname>
  <refpurpose>Get the auto generated id from previously executed prepared statement.</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_ulonglong</type>
   <methodname>mysql_stmt_insert_id</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   The <link linkend="functions.mysql_stmt_insert_id"><function>mysql_stmt_insert_id</function></link> function returns the ID generated by a
   prepared statement on a table with a column having the AUTO_INCREMENT
   attribute. If the last query wasn't an INSERT or UPDATE statement or if the
   modified table does not have a column with the AUTO_INCREMENT attribute, this
   function will return zero.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   The last generated id.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    When performing a multi insert preapred statement,
    <link linkend="functions.mysql_stmt_insert_id"><function>mysql_stmt_insert_id</function></link> will return the value of the first row.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_insert_id"><function>mysql_insert_id</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_more_results" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_more_results</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_more_results</refname>
  <refpurpose>Check if there are any more query results from a prepared statement</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_bool</type>
   <methodname>mysql_more_results</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Indicates if one or more result sets are available from a previous call to
   <link linkend="functions.mysql_stmt_execute"><function>mysql_stmt_execute</function></link>.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement which was previosly executed by <link linkend="functions.mysql_stmt_execute"><function>mysql_stmt_execute</function></link></entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns 1 if more result sets are available, otherwise zero.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    Prepared statements don't support execution of multi statements.
   </para>
   <para>
    Multiple result sets can be obtained by executing a stored procedure
   </para>
   <para>
    When using prepared statements out parameters for stored procedures are
    returned as a result set.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_execute"><function>mysql_stmt_execute</function></link>, <link linkend="functions.mysql_stmt_store_result"><function>mysql_stmt_store_result</function></link>,
   <link linkend="functions.mysql_stmt_next_result"><function>mysql_stmt_next_result</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_next_result" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_next_result</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_next_result</refname>
  <refpurpose>Prepares next result set from a stored procedure</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_stmt_next_result</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Prepares next result set from a previous call to
   <link linkend="functions.mysql_stmt_execute"><function>mysql_stmt_execute</function></link>.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, nonzero if an error occured.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    If a multi result set contains errors the return value of
    <link linkend="functions.mysql_errno"><function>mysql_errno</function></link> and <link linkend="functions.mysql_error"><function>mysql_error</function></link> might change and there
    will be no result set available
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_next_result"><function>mysql_stmt_next_result</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_num_rows" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_num_rows</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_num_rows</refname>
  <refpurpose>Returns the number of rows in a prepared statement result set</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_ulonglong</type>
   <methodname>mysql_stmt_num_rows</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns the number of rows in the result set. The use of
   <link linkend="functions.mysql_stmt_num_rows"><function>mysql_stmt_num_rows</function></link> depends on whether or not you used
   <link linkend="functions.mysql_stmt_store_result"><function>mysql_stmt_store_result</function></link> to buffer the entire result set in the
   statement handle.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   The number of rows in a result set of a prepared statement.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    If you use <link linkend="functions.mysql_stmt_store_result"><function>mysql_stmt_store_result</function></link>,
    <link linkend="functions.mysql_stmt_num_rows"><function>mysql_stmt_num_rows</function></link> may be called immediately.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_store_result"><function>mysql_stmt_store_result</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_param_count" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_param_count</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_param_count</refname>
  <refpurpose>Returns the number of parameter for the given statement</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>unsigned long</type>
   <methodname>mysql_stmt_param_count</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns the number of parameter markers present in the prepared statement.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry> stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns the number of parameters in a prepared statement
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <note>
   <title/>
   <para>
    This function will not deliver a valid result until
    <link linkend="functions.mysql_stmt_prepare"><function>mysql_stmt_prepare</function></link> was called.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_prepare"><function>mysql_stmt_prepare</function></link>, <link linkend="functions.mysql_stmt_field_count"><function>mysql_stmt_field_count</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_param_metadata" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_param_metadata</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_param_metadata</refname>
  <refpurpose>Returns metadata information for parameter markers</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>MYSQL_RES *</type>
   <methodname>mysql_stmt_param_metadata</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   This functionality is currently not supported by MariaDB servers.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A handle for a prepared statement</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   NULL
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
    <para>
      The MariaDB server curremtly doesn't provide metadata information for parameter markers. In case the parameter type is not known, the bind
      buffer should be bound to a string (MYSQL_TYPE_STRING).
    </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_prepare" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_prepare</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_prepare</refname>
  <refpurpose>Prepares a SQL statement for execution</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_stmt_prepare</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>query</parameter>
   </methodparam>
   <methodparam>
    <type>unsigned</type>
    <parameter>long</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Prepares the SQL query pointed to by the null-terminated string query.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>query</entry>
      <entry>SQL statement</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>long</entry>
      <entry>Length of SQL statement</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, non-zero on failure
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    The parameter markers must be bound to application variables using
    <link linkend="functions.mysql_stmt_bind_param"><function>mysql_stmt_bind_param</function></link>,
   </para>
   <para>
    The markers are legal only in certain places in SQL statements. For example,
    they are allowed in the VALUES() list of an INSERT statement (to specify
    column values for a row), or in a comparison with a column in a WHERE clause
    to specify a comparison value.
   </para>
   <para>
    However, they are not allowed for identifiers (such as table or column
    names), in the select list that names the columns to be returned by a SELECT
    statement), or to specify both operands of a binary operator such as the =
    equal sign. The latter restriction is necessary because it would be
    impossible to determine the parameter type. In general, parameters are legal
    only in Data Manipulation Language (DML) statements, and not in Data
    Definition Language (DDL) statements.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_init"><function>mysql_stmt_init</function></link>, <link linkend="functions.mysql_stmt_param_count"><function>mysql_stmt_param_count</function></link>,
   <link linkend="functions.mysql_stmt_execute"><function>mysql_stmt_execute</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_reset" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_reset</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_reset</refname>
  <refpurpose>Resets a prepared statement.</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_bool</type>
   <methodname>mysql_stmt_reset</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Resets a prepared statement on client and server to state after prepare.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, nonzero if an error occured.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    <link linkend="functions.mysql_stmt_reset"><function>mysql_stmt_reset</function></link> resets the statement on the server, unbuffered
    result sets and errors. Bindings and stored result sets will not be cleared.
    The latter one will be cleared when reexecuting or closing the prepared
    statement.
   </para>
   <para>
    To reprepare a prepared statement with another SQL statement use
    <link linkend="functions.mysql_stmt_prepare"><function>mysql_stmt_prepare</function></link>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_close"><function>mysql_stmt_close</function></link>, <link linkend="functions.mysql_stmt_prepare"><function>mysql_stmt_prepare</function></link>,
   <link linkend="functions.mysql_stmt_execute"><function>mysql_stmt_execute</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_result_metadata" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_result_metadata</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_result_metadata</refname>
  <refpurpose>Returns result set metadata from a prepared statement</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>MYSQL_RES *</type>
   <methodname>mysql_stmt_result_metadata</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   If a statement passed to <link linkend="functions.mysql_stmt_prepare"><function>mysql_stmt_prepare</function></link> is one that produces a
   result set, <link linkend="functions.mysql_stmt_result_metadata"><function>mysql_stmt_result_metadata</function></link> returns the result set that
   can be used to process the meta information such as total number of fields
   and individual field information.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   A result set containing field information for a result set
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    The result set returned by <link linkend="functions.mysql_stmt_result_metadata"><function>mysql_stmt_result_metadata</function></link> contains
    only metadata. It does not contain any row results. The rows are obtained by
    <link linkend="functions.mysql_stmt_fetch"><function>mysql_stmt_fetch</function></link>.
   </para>
   <para>
    This result set pointer can be passed as an argument to any of the
    field-based functions that process result set metadata, such as:
    <link linkend="functions.mysql_num_fields"><function>mysql_num_fields</function></link>, <link linkend="functions.mysql_fetch_field"><function>mysql_fetch_field</function></link>,
    <link linkend="functions.mysql_fetch_field_direct"><function>mysql_fetch_field_direct</function></link>, <link linkend="functions.mysql_fetch_fields"><function>mysql_fetch_fields</function></link>,
    <link linkend="functions.mysql_field_count"><function>mysql_field_count</function></link>, <link linkend="functions.mysql_field_seek"><function>mysql_field_seek</function></link>,
    <link linkend="functions.mysql_field_tell"><function>mysql_field_tell</function></link>, <link linkend="functions.mysql_free_result"><function>mysql_free_result</function></link>
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_free_result"><function>mysql_free_result</function></link>, <link linkend="functions.mysql_stmt_prepare"><function>mysql_stmt_prepare</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_row_seek" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_row_seek</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_row_seek</refname>
  <refpurpose>Positions row cursors</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>MYSQL_ROW_OFFSET</type>
   <methodname>mysql_stmt_row_seek</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
   <methodparam>
    <type>MYSQL_ROW_OFFSET</type>
    <parameter>offset</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Positions the row cursor to an aribtrary row in a result set which was
   obtaimed by <link linkend="functions.mysql_stmt_store_result"><function>mysql_stmt_store_result</function></link>.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>offset</entry>
      <entry>Row offset. This value can be obtained either by <link linkend="functions.mysql_stmt_row_seek"><function>mysql_stmt_row_seek</function></link> or <link linkend="functions.mysql_stmt_row_tell"><function>mysql_stmt_row_tell</function></link></entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   The previous row offset.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    The result set must be obtained by <link linkend="functions.mysql_use_result"><function>mysql_use_result</function></link>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_row_tell"><function>mysql_stmt_row_tell</function></link>, <link linkend="functions.mysql_stmt_store_result"><function>mysql_stmt_store_result</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_row_tell" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_row_tell</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_row_tell</refname>
  <refpurpose>Returns position of result cursor</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>MYSQL_ROW_OFFSET</type>
   <methodname>mysql_stmt_row_tell</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns the row offset of a result cursor. The returned offset value can be
   used to reposition the result cursor by calling
   <link linkend="functions.mysql_stmt_row_seek"><function>mysql_stmt_row_seek</function></link>
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   The row offset of the result cursor
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <note>
   <title/>
   <para>
    This function can be used for buffered result sets only, which can be
    obtained by executing <link linkend="functions.mysql_stmt_store_result"><function>mysql_stmt_store_result</function></link> function.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_row_seek"><function>mysql_stmt_row_seek</function></link>, <link linkend="functions.mysql_stmt_store_result"><function>mysql_stmt_store_result</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_send_long_data" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_send_long_data</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_send_long_data</refname>
  <refpurpose>Send data in chunks</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_bool</type>
   <methodname>mysql_stmt_send_long_data</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
   <methodparam>
    <type>unsigned</type>
    <parameter>int</parameter>
   </methodparam>
   <methodparam>
    <type>const char *</type>
    <parameter>data</parameter>
   </methodparam>
   <methodparam>
    <type>unsigned</type>
    <parameter>long</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Allows to send parameter data to the server in pieces (or chunks), e.g. if
   the size of a blob exceeds the size of max_allowed_packet. This function can
   be called multiple times to send the parts of a character or binary data
   value for a column, which must be one of the
   <parameter>TEXT</parameter>
   or
   <parameter>BLOB</parameter>
   datatypes.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>param_no</entry>
      <entry>Indicates which parameter to associate the data with. Parameters are numbered beginning with 0.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>data</entry>
      <entry>A buffer containing the data to send.</entry>
     </row>
     <row>
      <entry>IN</entry>
      <entry>long</entry>
      <entry>size of the <parameter>data</parameter> buffer.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, nonzero if an error occured.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    todo: !!
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_sqlstate" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_sqlstate</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_sqlstate</refname>
  <refpurpose>returns SQLSTATE error from previous statement operation</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>const char *</type>
   <methodname>mysql_stmt_sqlstate</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns a string containing the SQLSTATE error code for the most recently
   invoked prepared statement function that can succeed or fail. The error code
   consists of five characters. '00000' means no error. The values are specified
   by ANSI SQL and ODBC.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry> stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns a string containing the SQLSTATE error code for the last error. The
   error code consists of five characters. '
   <parameter>00000'</parameter>
   means no error.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    Please note that not all client library error codes are mapped to SQLSTATE
    errors. Errors which can't be mapped will returned as value
    <parameter>HY000</parameter>
    .
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_errno"><function>mysql_errno</function></link>, <link linkend="functions.mysql_error"><function>mysql_error</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_stmt_store_result" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_stmt_store_result</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_stmt_store_result</refname>
  <refpurpose>Transfers a result set from a prepared statement</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>int</type>
   <methodname>mysql_stmt_store_result</methodname>
   <methodparam>
    <type>MYSQL_STMT *</type>
    <parameter>stmt</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   You must call <link linkend="functions.mysql_stmt_store_result"><function>mysql_stmt_store_result</function></link> for every query that
   successfully produces a result set (
   <command>SELECT, SHOW, DESCRIBE, EXPLAIN</command>
   ), and only if you want to buffer the complete result set by the client, so
   that the subsequent <link linkend="functions.mysql_stmt_fetch"><function>mysql_stmt_fetch</function></link> call returns buffered data.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>stmt</entry>
      <entry>A statement handle, which was previously allocated by <function>mysql_stmt_init()</function>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero on success, nonzero if an error occured.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    You can detect whether the statement produced a result set by checking the
    return value of <link linkend="functions.mysql_stmt_result_metadata"><function>mysql_stmt_result_metadata</function></link> function.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
        <link linkend="functions.mysql_stmt_result_metadata"><function>mysql_stmt_result_metadata</function></link>,
        <link linkend="functions.mysql_stmt_fetch"><function>mysql_stmt_fetch</function></link>
      </refsect1>
</refentry>


<refentry id="functions.mysql_store_result" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_store_result</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_store_result</refname>
  <refpurpose>Returns a buffered resultset from the last executed query</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>MYSQL_RES *</type>
   <methodname>mysql_store_result</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Transfers a buffered result set from the last query on the database
   connection
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   A buffered result set or NULL if an error occured.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link> returns NULL in case an error occured or if
    the query didn't return data (e.g. when executing an
    <command>INSERT</command>
    or
    <command>UPDATE</command>
    query.
   </para>
   <para>
    <link linkend="functions.mysql_field_count"><function>mysql_field_count</function></link> indicates if there will be a result set
    available.
   </para>
   <para>
    The memory allocated by <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link> needs to be relased by
    calling the function <link linkend="functions.mysql_free_result"><function>mysql_free_result</function></link>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_use_result"><function>mysql_use_result</function></link>, <link linkend="functions.mysql_real_query"><function>mysql_real_query</function></link>,
   <link linkend="functions.mysql_field_count"><function>mysql_field_count</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_thread_end" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_thread_end</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_thread_end</refname>
  <refpurpose>release thread specific memory for multi threaded client application</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>void</type>
   <methodname>mysql_thread_end</methodname>
   <methodparam>
    <type>void</type>
    <parameter/>
   </methodparam>
  </methodsynopsis>
  <para>
   The <link linkend="functions.mysql_thread_end"><function>mysql_thread_end</function></link> function needs to be called before a client
   thread ends. It will release thread specific memory, which was allocated by a
   previous <link linkend="functions.mysql_thread_init"><function>mysql_thread_init</function></link> call.
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   void
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    Unlike <link linkend="functions.mysql_thread_init"><function>mysql_thread_init</function></link> <link linkend="functions.mysql_thread_end"><function>mysql_thread_end</function></link> will not be
    invoked automatically if the thread ends. To avoid memory leaks
    <link linkend="functions.mysql_thread_end"><function>mysql_thread_end</function></link> must be called explicitly.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_thread_init"><function>mysql_thread_init</function></link>, <link linkend="functions.mysql_thread_safe"><function>mysql_thread_safe</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_thread_id" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_thread_id</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_thread_id</refname>
  <refpurpose>Returns the thread id for the current connection</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>unsigned long</type>
   <methodname>mysql_thread_id</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   The <link linkend="functions.mysql_thread_id"><function>mysql_thread_id</function></link> function returns the thread id for the current
   connection.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   The thread id for the current connection.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    The current connection can be killed with <link linkend="functions.mysql_kill"><function>mysql_kill</function></link>
   </para>
   <para>
    If
    <option>reconnect</option>
    option is enabled the thread id might change if the client reconnects to the
    server.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_kill"><function>mysql_kill</function></link>, <link linkend="functions.mysql_options"><function>mysql_options</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_thread_init" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_thread_init</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_thread_init</refname>
  <refpurpose>Thread initialization for multi threaded clients</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>my_bool</type>
   <methodname>mysql_thread_init</methodname>
   <methodparam>
    <type>void</type>
    <parameter/>
   </methodparam>
  </methodsynopsis>
  <para>
   Multi threaded clients should call <link linkend="functions.mysql_thread_init"><function>mysql_thread_init</function></link> at the
   beginning of the thread initialization to initialize thread specific client
   library variables. If <link linkend="functions.mysql_thread_init"><function>mysql_thread_init</function></link> was not called explicitly,
   it will be called automatically by <link linkend="functions.mysql_init"><function>mysql_init</function></link> or
   <link linkend="functions.mysql_real_connect"><function>mysql_real_connect</function></link>.
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Zero if successful or 1 if an error occured
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    Before a client thread ends the <link linkend="functions.mysql_thread_end"><function>mysql_thread_end</function></link> function must be
    called to release memory - otherwise the client library will report an
    error.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_thread_end"><function>mysql_thread_end</function></link>, <link linkend="functions.mysql_thread_safe"><function>mysql_thread_safe</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_thread_safe" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_thread_safe</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_thread_safe</refname>
  <refpurpose>Returns whether thread safety is given or not</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>unsigned int</type>
   <methodname>mysql_thread_safe</methodname>
   <methodparam>
    <type>void</type>
    <parameter/>
   </methodparam>
  </methodsynopsis>
  <para>
   Tells whether the client library is compiled as thread safe.
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   1 if the client library was compiled as thread safe otherwise zero
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    By default the mariadb client library is compiled as thread safe.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_thread_init"><function>mysql_thread_init</function></link>, <link linkend="functions.mysql_thread_end"><function>mysql_thread_end</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_use_result" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_use_result</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_use_result</refname>
  <refpurpose>Initiate an unbuffered result set retrieval</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>MYSQL_RES *</type>
   <methodname>mysql_use_result</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Used to initiate the retrieval of a result set from the last query executed
   using the <link linkend="functions.mysql_real_query"><function>mysql_real_query</function></link> function on the database connection.
   Either this or the <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link> function must be called
   before the results of a query can be retrieved, and one or the other must be
   called to prevent the next query on that database connection from failing.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns an unbuffered result set or NULL if an error occured.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    The <link linkend="functions.mysql_use_result"><function>mysql_use_result</function></link> function does not transfer the entire result
    set. Hence several functions like <link linkend="functions.mysql_num_rows"><function>mysql_num_rows</function></link> or
    <link linkend="functions.mysql_data_seek"><function>mysql_data_seek</function></link> cannot be used.
   </para>
   <para>
    <link linkend="functions.mysql_use_result"><function>mysql_use_result</function></link> will block the current connection until all
    result sets are retrieved or result set was released
    by<link linkend="functions.mysql_free_result"><function>mysql_free_result</function></link>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_store_result"><function>mysql_store_result</function></link>, <link linkend="functions.mysql_free_result"><function>mysql_free_result</function></link>
  </para>
 </refsect1>
</refentry>


<refentry id="functions.mysql_warning_count" display-name="0">
      Available since version 1.0
      <refmeta>
  <refentrytitle>mysql_warning_count</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mysql_warning_count</refname>
  <refpurpose>Returns the number of warnings from the last executed query</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>unsigned int</type>
   <methodname>mysql_warning_count</methodname>
   <methodparam>
    <type>MYSQL *</type>
    <parameter>mysql</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Returns the number of warnings from the last executed query
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>IN</entry>
      <entry>mysql</entry>
      <entry>A mysql handle, which was previously initialized or allocated by <link linkend="functions.mysql_init"><function>mysql_init()</function></link> and connected by <link linkend="functions.mysql_real_connect"><function>mysql_real_connect()</function></link>.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   The number of warnings or zero if there are no warnings
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
   <title/>
   <para>
    For retrieving warning messages you should use the SQL command
    <command>SHOW WARNINGS</command>
   </para>
   <para>
    If sqlmode
    <parameter>TRADITIONAL</parameter>
    is enabled an error instead of warning will be returned. For detailed
    information check the server documentation.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mysql_stmt_affected_rows"><function>mysql_stmt_affected_rows</function></link>
  </para>
 </refsect1>
</refentry>



</section>

</section>

    
<section xmlns="" id="dyncol_api">
 <title>
  Dynamic column API
 </title>
 <para>
  Dynamic columns allows one to store different sets of columns for each row in
  a table. It works by storing a set of columns in a blob and having a small set
  of functions to manipulate it.
 </para>
 <para>
  Dynamic columns should be used when it is not possible to use regular columns.
 </para>
 <para>
  A typical use case is when one needs to store items that may have many
  different attributes (like size, color, weight, etc), and the set of possible
  attributes is very large and/or unknown in advance. In that case, attributes
  can be put into dynamic columns.
 </para>
 <note>
    <title>Notes</title>
    <para>
   To use the dynamic column api you have to include the file
   <filename>ma_dyncol.h</filename>
   .
  </para>
 </note>

 
<section xml:id="ref.dyncol.datastructure">
  <title>Data structure</title>
 <refentry id="struct.dynamic_column">
  <refmeta>
   <refentrytitle>DYNAMIC_COLUMN</refentrytitle>
  </refmeta>
   Available since version 1.1
   <refnamediv>
   <refdescriptor>DYNAMIC_COLUMN</refdescriptor>
   <refname>DYNAMIC_COLUMN</refname>
   <refpurpose>packed dynamic column blob</refpurpose>
  </refnamediv>
  <para>
   <structname>DYNAMIC_COLUMN</structname>
   represents a packed dynamic column blob. It is essentially a
   string-with-length.
  </para>
  <para>
   <structname>DYNAMIC_COLUMN</structname>
   is defined in
   <filename>ma_dyncol.h</filename>
  </para>
  <programlisting>
typedef struct st_dynamic_string
{
  char *str;
  size_t length,max_length,alloc_increment;
} DYNAMIC_STRING;

typedef DYNAMIC_STRING DYNAMIC_COLUMN;
  </programlisting>
 </refentry>
 <refentry id="struct.dynamic_column_vale">
  <refmeta>
   <refentrytitle>DYNAMIC_COLUMN_VALUE</refentrytitle>
  </refmeta>
   Available since version 1.1
   <refnamediv>
   <refdescriptor>DYNAMIC_COLUMN_VALUE</refdescriptor>
   <refname>DYNAMIC_COLUMN_VALUE</refname>
   <refpurpose>Dynamic columns blob stores for key/value pairs.</refpurpose>
  </refnamediv>
  <para>
   <structname>DYNAMIC_COLUMN_VALUE</structname>
   stores key/value pairs.
   <structname>DYNAMIC_COLUMN_VALUE</structname>
   structure is used to represent the value in accessible form
  </para>
  <para>
   <structname>DYNAMIC_COLUMN</structname>
   is defined in
   <filename>ma_dyncol.h</filename>
  </para>
  <programlisting>
struct st_dynamic_column_value
{
  DYNAMIC_COLUMN_TYPE type;
  union
  {
    long long long_value;
    unsigned long long ulong_value;
    double double_value;
    struct {
      MYSQL_LEX_STRING value;
      CHARSET_INFO *charset;
    } string;
    struct {
      decimal_digit_t buffer[DECIMAL_BUFF_LENGTH];
      decimal_t value;
    } decimal;
    MYSQL_TIME time_value;
  } x;
};

typedef struct st_dynamic_column_value DYNAMIC_COLUMN_VALUE;
  </programlisting>
 </refentry>
</section>
 
 
<!-- $Revision: 323624 $ -->
<section>
 <title>Constants</title>
  <sect1>
  <title>
   Dynamic column value types
  </title>
  <para>
   Every dynamic column value has a type, which is determined by the member type
   of the
   <structname>DYNAMIC_COLUMN_VALUE</structname>
   structure.
  </para>
  <para>
   <table frame="none">
    <caption>Types for <structname>DYNAMIC_COLUMN_VALUES</structname>
    </caption>
    <tgroup cols="2" colsep="0" rowsep="0">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="1" ?>
     <thead>
      <row>
       <entry role="ma_table" colsep="0">Constant</entry>
       <entry role="ma_table" colsep="0">
        <structname>DYNAMIC_COLUMN_VALUE</structname> member</entry>
      </row>
     </thead>
     <tbody>
      <row role="ma_table">
       <entry role="ma_table" colsep="0">DYN_COL_NULL</entry>
       <entry role="ma_table" colsep="0">-</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">DYN_COL_INT</entry>
       <entry role="ma_table" colsep="0">x.long_value</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">DYN_COL_UINT</entry>
       <entry role="ma_table" colsep="0">x.ulong_value</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">DYN_COL_DOUBLE</entry>
       <entry role="ma_table" colsep="0">x.double</entry>
      </row>
      <row role="ma_table">
       <entry role="ma_table" colsep="0">DYN_COL_STRING</entry>
       <entry role="ma_table" colsep="0">x.string.value and x.string.charset</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">DYN_COL_DATETIME</entry>
       <entry role="ma_table" colsep="0">x.time_value</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">DYN_COL_DATE</entry>
       <entry role="ma_table" colsep="0">x.time_value</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">DYN_COL_TIME</entry>
       <entry role="ma_table" colsep="0">x.time_value</entry>
      </row>
      <row>
       <entry role="ma_table" colsep="0">DYN_COL_DYNCOL</entry>
       <entry role="ma_table" colsep="0">x.string.value</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
  <para>
   Dynamic column value types are defined in include file
   <filename>ma_dyncol.h</filename>
   .
  </para>
  <note>
      <title>Notes</title>
      <para>
    Values with type DYN_COL_NULL do not ever occur in dynamic columns blobs.
   </para>
   <para>
    Type DYN_COL_DYNCOL means that the value is anther dynamic column. This is
    how nested dynamic columns are done.
   </para>
   <para>
    Opposed to the server implementation the MariaDB client library doesn't
    support decimal type in dynamic columns.
   </para>
  </note>
 </sect1>
 <sect1>
  <title>
   Dynamic column function return codes
  </title>
  <table frame="none">
   <caption>Return codes</caption>
   <tgroup cols="3" colsep="0" rowsep="0">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="1" ?>
    <thead>
     <row>
      <entry role="ma_table" colsep="0">Constant</entry>
      <entry role="ma_table" colsep="0">Value</entry>
      <entry role="ma_table" colsep="0">Description</entry>
     </row>
    </thead>
    <tbody>
     <row role="ma_table">
      <entry role="ma_table" colsep="0">ER_DYNCOL_OK</entry>
      <entry role="ma_table" colsep="0">0</entry>
      <entry role="ma_table" colsep="0">Success</entry>
     </row>
     <row>
      <entry role="ma_table" colsep="0">ER_DYNCOL_NO</entry>
      <entry role="ma_table" colsep="0">0</entry>
      <entry role="ma_table" colsep="0">like ER_DYNCOL_OK, but for functions which return YES/NO</entry>
     </row>
     <row>
      <entry role="ma_table" colsep="0">ER_DYNCOL_YES</entry>
      <entry role="ma_table" colsep="0">1</entry>
      <entry role="ma_table" colsep="0">Yes or Success</entry>
     </row>
     <row>
      <entry role="ma_table" colsep="0">ER_DYNCOL_TRUNCATED</entry>
      <entry role="ma_table" colsep="0">2</entry>
      <entry role="ma_table" colsep="0">Operation succeeded but data was truncated</entry>
     </row>
     <row>
      <entry role="ma_table" colsep="0">ER_DYNCOL_FORMAT</entry>
      <entry role="ma_table" colsep="0">-1</entry>
      <entry role="ma_table" colsep="0">Wrong format of encoded string</entry>
     </row>
     <row>
      <entry role="ma_table" colsep="0">ER_DYNCOL_FORMAT</entry>
      <entry role="ma_table" colsep="0">-2</entry>
      <entry role="ma_table" colsep="0">Implementation limit reached</entry>
     </row>
     <row>
      <entry role="ma_table" colsep="0">ER_DYNCOL_RESOURCE</entry>
      <entry role="ma_table" colsep="0">-3</entry>
      <entry role="ma_table" colsep="0">Out of resources</entry>
     </row>
     <row>
      <entry role="ma_table" colsep="0">ER_DYNCOL_DATA</entry>
      <entry role="ma_table" colsep="0">-4</entry>
      <entry role="ma_table" colsep="0">Incorrect input data</entry>
     </row>
     <row>
      <entry role="ma_table" colsep="0">ER_DYNCOL_UNKNOWN_CHARSET</entry>
      <entry role="ma_table" colsep="0">-5</entry>
      <entry role="ma_table" colsep="0">Unknown character set</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <para>
   Dynamic column function return codes are defined in include file
   <filename>ma_dyncol.h</filename>
   .
  </para>
  <note>
       <title>Notes</title>
       <para>
    Result codes with a value less than zero indicate an error.
   </para>
  </note>
 </sect1>
</section>
 
 
<section xml:id="ref.dyncol">
 <title>
  Function reference
 </title>
 <partintro>
  <note>
    <title>Notes</title>
    <para>
    The dynamic column API from MariaDB 5.5 is deprecated and not supported
    anymore.
   </para>
   <para>
    To migrate your code, please change the
    <function>dynamic_column_xxxx</function>
    function calls to
    <function>mariadb_dyncol_xxxxx_num</function>
    syntax.
   </para>
  </note>
 </partintro>
  <!--
  Autogeerated file - do not change this file manually!
-->

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="functions.mariadb_dyncol_column_count">
 <refnamediv>
  <refname>mariadb_dyncol_column_count</refname>
  <refpurpose>retrieves the number of columns within a dynamic column</refpurpose>
 </refnamediv>
 <refsect1>
   <title>Version</title>
   <para>Available since version 1.1</para>
 </refsect1>
 <refsect1 role="description">
  <title>Description</title>
  <methodsynopsis>
   <type>enum enum_dyncol_func_result</type>
   <methodname>mariadb_dyncol_column_count</methodname>
   <methodparam>
    <type>DYNAMIC_COLUMN *</type>
    <parameter>str</parameter>
   </methodparam>
   <methodparam>
    <type>uint *</type>
    <parameter>*column_count</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Retrieves the number of columns within a dynamic column which don't have NULL
   values.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>Parameters</title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>
       <parameter>str</parameter>
      </entry>
      <entry>IN</entry>
      <entry>A pointer to a dynamic column.</entry>
     </row>
     <row>
      <entry>
       <parameter>column_cont</parameter>
      </entry>
      <entry>OUT</entry>
      <entry>Number of columns</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns 0 or positive value on success, a nagative value on error.
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <note>
          <title xmlns="">Notes</title>  
        <para>
    <link linkend="functions.mariadb_dyncol_column_count"><function>mariadb_dyncol_column_count</function></link> requires a previous initialization of
    the dynamic column.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mariadb_dyncol_create_many_named"><function>mariadb_dyncol_create_many_named</function></link>
  </para>
 </refsect1>
 <refsect1 role="example">
  <title>
   Example
  </title>
<!--
<xi:include href="&example_path;/mysql_affected_rows.c" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        The above example will output:
        <programlisting><xi:include href="&example_path;/mysql_affected_rows.out" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting> -->
 </refsect1>
</refentry>


<refentry id="functions.mariadb_dyncol_create_many_named" display-name="0" display-title="1">
      Available since version 1.1
      <refmeta>
  <refentrytitle>mariadb_dyncol_create_many_named</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mariadb_dyncol_create_many_named</refname>
  <refpurpose>Create a packed dynamic string from an array of key/value pairs</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>enum enum_dyncol_func_result</type>
   <methodname>mariadb_dyncol_create_many_named</methodname>
   <methodparam>
    <type>DYNAMIC_COLUMN *</type>
    <parameter>str</parameter>
   </methodparam>
   <methodparam>
    <type>uint</type>
    <parameter>column_count</parameter>
   </methodparam>
   <methodparam>
    <type>MYSQL_LEX_STRING *</type>
    <parameter>column_keys</parameter>
   </methodparam>
   <methodparam>
    <type>DYAMIC_COLUMN_VALUE *</type>
    <parameter>column_values</parameter>
   </methodparam>
   <methodparam>
    <type>my_bool</type>
    <parameter>new_column</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Creates a packed dynamic string from an array of key/value pairs.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>
       <parameter>str</parameter>
      </entry>
      <entry>IN/OUT</entry>
      <entry>A pointer to a dynamic column.</entry>
     </row>
     <row>
      <entry>
       <parameter>column_cont</parameter>
      </entry>
      <entry>IN</entry>
      <entry>Number of columns</entry>
     </row>
     <row>
      <entry>
       <parameter>column_keys</parameter>
      </entry>
      <entry>IN</entry>
      <entry>An array of named column keys</entry>
     </row>
     <row>
      <entry>
       <parameter>column_vals</parameter>
      </entry>
      <entry>IN</entry>
      <entry>An array of column values</entry>
     </row>
     <row>
      <entry>
       <parameter>new_column</parameter>
      </entry>
      <entry>IN</entry>
      <entry>Indicates if the dynamic column should be initialized before creating columns</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns 0 or positive value on success, anagative value on error.
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <note>
          <title>Notes</title>  
        <para>
    Before creating a dynamic column it must be either zero initialized or
    parameter
    <parameter>new_column</parameter>
    must be set.
   </para>
   <para>
    If the
    <parameter>column_key</parameter>
    array contains non unique keys the function will return an error.
   </para>
   <para>
    To prevent leaking of memory a dynamic column has to be freed by the
    <link linkend="functions.mariadb_dyncol_free"><function>mariadb_dyncol_free</function></link> function.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mariadb_dyncol_create_many_num"><function>mariadb_dyncol_create_many_num</function></link>
  </para>
 </refsect1>
 <refsect1 role="example">
  <title>
   Example
  </title>
<!--
<xi:include href="&example_path;/mysql_affected_rows.c" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        The above example will output:
        <programlisting><xi:include href="&example_path;/mysql_affected_rows.out" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting> -->
 </refsect1>
</refentry>


<refentry id="functions.mariadb_dyncol_create_many_num" display-name="1">
      Available since version 1.1
      <refmeta>
  <refentrytitle>mariadb_dyncol_create_many_num</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mariadb_dyncol_create_many_num</refname>
  <refpurpose>Create a packed dynamic string from an array of value pairs</refpurpose>
 </refnamediv>
 <refsect1/>
 <refsect1 role="description">
  <methodsynopsis>
   <type>enum enum_dyncol_func_result</type>
   <methodname>mariadb_dyncol_create_many_num</methodname>
   <methodparam>
    <type>DYNAMIC_COLUMN *</type>
    <parameter>str</parameter>
   </methodparam>
   <methodparam>
    <type>uint</type>
    <parameter>column_count</parameter>
   </methodparam>
   <methodparam>
    <type>uint *</type>
    <parameter>*column_numbers</parameter>
   </methodparam>
   <methodparam>
    <type>DYAMIC_COLUMN_VALUE *</type>
    <parameter>column_values</parameter>
   </methodparam>
   <methodparam>
    <type>my_bool</type>
    <parameter>new_column</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Creates a packed dynamic string from arrays of values nd numbers.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>
       <parameter>str</parameter>
      </entry>
      <entry>IN/OUT</entry>
      <entry>A pointer to a dynamic column.</entry>
     </row>
     <row>
      <entry>
       <parameter>column_cont</parameter>
      </entry>
      <entry>IN</entry>
      <entry>Number of columns</entry>
     </row>
     <row>
      <entry>
       <parameter>column_keys</parameter>
      </entry>
      <entry>IN</entry>
      <entry>An array of numeric column keys</entry>
     </row>
     <row>
      <entry>
       <parameter>column_vals</parameter>
      </entry>
      <entry>IN</entry>
      <entry>An array of column values</entry>
     </row>
     <row>
      <entry>
       <parameter>new_column</parameter>
      </entry>
      <entry>IN</entry>
      <entry>Indicates if the dynamic column should be initialized before creating columns</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns 0 or positive value on success, anagative value on error.
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <note>
          <title>Notes</title>  
        <para>
    Before creating a dynamic column it must be either zero initialized or
    parameter
    <parameter>new_column</parameter>
    must be set.
   </para>
   <para>
    If the
    <parameter>column_numbers</parameter>
    array contains non duplicate values the function will return an error.
   </para>
   <para>
    To prevent leaking of memory a dynamic column has to be freed by the
    <link linkend="functions.mariadb_dyncol_free"><function>mariadb_dyncol_free</function></link> function.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mariadb_dyncol_create_many_named"><function>mariadb_dyncol_create_many_named</function></link>,
   <link linkend="functions.mariadb_dyncol_column_count"><function>mariadb_dyncol_column_count</function></link>
  </para>
 </refsect1>
 <refsect1 role="example">
  <title>
   Example
  </title>
 </refsect1>
</refentry>


<refentry id="functions.mariadb_dyncol_exists_named" display-name="1">
      Available since version 1.1
      <refmeta>
  <refentrytitle>mariadb_dyncol_exists_named</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mariadb_dyncol_exists_named</refname>
  <refpurpose>Checks if a column for a given key exists</refpurpose>
 </refnamediv>
 <refsect1/>
 <refsect1 role="description">
  <methodsynopsis>
   <type>enum enum_dyncol_func_result</type>
   <methodname>mariadb_dyncol_exists_named</methodname>
   <methodparam>
    <type>DYNAMIC_COLUMN *</type>
    <parameter>str</parameter>
   </methodparam>
   <methodparam>
    <type>MYSQL_LEX_STRING *</type>
    <parameter>column_key</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Checks if a column for a given key exists
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="2">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>
       <parameter>str</parameter>
      </entry>
      <entry>IN</entry>
      <entry>A pointer to a dynamic column.</entry>
     </row>
     <row>
      <entry>
       <parameter>column_key</parameter>
      </entry>
      <entry>IN</entry>
      <entry>Named column key</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns
   <type>DYN_COL_YES</type>
   if a column for given key exists, otherwise
   <type>DYN_COL_NO</type>
   .
  </para>
 </refsect1>
 <refsect1 role="returnvalue"/>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mariadb_dyncol_exists_num"><function>mariadb_dyncol_exists_num</function></link>
  </para>
 </refsect1>
 <refsect1 role="example">
  <title>
   Example
  </title>
<!--
<xi:include href="&example_path;/mysql_affected_rows.c" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        The above example will output:
        <programlisting><xi:include href="&example_path;/mysql_affected_rows.out" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting> -->
 </refsect1>
</refentry>


<refentry id="functions.mariadb_dyncol_exists_num" display-name="1">
      Available since version 1.1
      <refmeta>
  <refentrytitle>mariadb_dyncol_exists_num</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mariadb_dyncol_exists_num</refname>
  <refpurpose>Checks if a column for a given key exists</refpurpose>
 </refnamediv>
 <refsect1/>
 <refsect1 role="description">
  <methodsynopsis>
   <type>enum enum_dyncol_func_result</type>
   <methodname>mariadb_dyncol_exists_num</methodname>
   <methodparam>
    <type>DYNAMIC_COLUMN *</type>
    <parameter>str</parameter>
   </methodparam>
   <methodparam>
    <type>uint</type>
    <parameter>column_key</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Checks if a column for a given key exists
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>
       <parameter>str</parameter>
      </entry>
      <entry>IN</entry>
      <entry>A pointer to a dynamic column.</entry>
     </row>
     <row>
      <entry>
       <parameter>column_key</parameter>
      </entry>
      <entry>IN</entry>
      <entry>Numeric column key</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns
   <type>DYN_COL_YES</type>
   if a column for given key exists, otherwise
   <type>DYN_COL_NO</type>
   .
  </para>
 </refsect1>
 <refsect1 role="returnvalue"/>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mariadb_dyncol_exists_named"><function>mariadb_dyncol_exists_named</function></link>
  </para>
 </refsect1>
 <refsect1 role="example">
  <title>
   Example
  </title>
<!--
<xi:include href="&example_path;/mysql_affected_rows.c" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        The above example will output:
        <programlisting><xi:include href="&example_path;/mysql_affected_rows.out" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting> -->
 </refsect1>
</refentry>


<refentry id="functions.mariadb_dyncol_free" display-name="1">
      Available since version 1.1
      <refmeta>
  <refentrytitle>mariadb_dyncol_free</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mariadb_dyncol_free</refname>
  <refpurpose>Release memory associated by a dynamic column</refpurpose>
 </refnamediv>
 <refsect1/>
 <refsect1 role="description">
  <methodsynopsis>
   <type>void</type>
   <methodname>mariadb_dyncol_column_free</methodname>
   <methodparam>
    <type>DYNAMIC_COLUMN *</type>
    <parameter>str</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Release memory associated by a dynamic column, which was previously allocated
   by <link linkend="functions.mariadb_dyncol_create_many_named"><function>mariadb_dyncol_create_many_named</function></link> or
   <link linkend="functions.mariadb_dyncol_create_many_num"><function>mariadb_dyncol_create_many_num</function></link>
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>
       <parameter>str</parameter>
      </entry>
      <entry>IN</entry>
      <entry>A pointer to a dynamic column.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns 0 or positive value on success, a nagative value on error.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
          <title>Notes</title>  
        </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mariadb_dyncol_create_many_named"><function>mariadb_dyncol_create_many_named</function></link>
  </para>
 </refsect1>
 <refsect1 role="example">
  <title>
   Example
  </title>
 </refsect1>
</refentry>


<refentry id="functions.mariadb_dyncol_get_named" display-name="1">
      Available since version 1.1
      <refmeta>
  <refentrytitle>mariadb_dyncol_get_named</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mariadb_dyncol_get_named</refname>
  <refpurpose>Get the column value for a specified non mumeric key</refpurpose>
 </refnamediv>
 <refsect1/>
 <refsect1 role="description">
  <methodsynopsis>
   <type>void</type>
   <methodname>mariadb_dyncol_list_named</methodname>
   <methodparam>
    <type>DYNAMIC_COLUMN *</type>
    <parameter>str</parameter>
   </methodparam>
   <methodparam>
    <type>uint</type>
    <parameter>column_key</parameter>
   </methodparam>
   <methodparam>
    <type>DYNAMIC_COLUMN_VALUE</type>
    <parameter>column_value</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Get the column value for a specified non numeric key, specified in
   <parameter>column_key</parameter>
   .
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>
       <parameter>str</parameter>
      </entry>
      <entry>IN</entry>
      <entry>A pointer to a dynamic column.</entry>
     </row>
     <row>
      <entry>
       <parameter>column_key</parameter>
      </entry>
      <entry>IN</entry>
      <entry>Non numeric column key</entry>
     </row>
     <row>
      <entry>
       <parameter>column_value</parameter>
      </entry>
      <entry>OUT</entry>
      <entry>The value of the specified column</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns 0 or positive value on success, a nagative value on error.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
          <title>Notes</title>
        </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mariadb_dyncol_get_num"><function>mariadb_dyncol_get_num</function></link> <link linkend="functions.mariadb_dyncol_exists_named"><function>mariadb_dyncol_exists_named</function></link>,
   <link linkend="functions.mariadb_dyncol_list_named"><function>mariadb_dyncol_list_named</function></link>
  </para>
 </refsect1>
 <refsect1 role="example">
  <title>
   Example
  </title>
 </refsect1>
</refentry>


<refentry id="functions.mariadb_dyncol_get_num" display-name="1">
      Available since version 1.1
      <refmeta>
  <refentrytitle>mariadb_dyncol_get_num</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mariadb_dyncol_get_num</refname>
  <refpurpose>Get the column value for a specified mumeric key</refpurpose>
 </refnamediv>
 <refsect1/>
 <refsect1 role="description">
  <methodsynopsis>
   <type>void</type>
   <methodname>mariadb_dyncol_list_named</methodname>
   <methodparam>
    <type>DYNAMIC_COLUMN *</type>
    <parameter>str</parameter>
   </methodparam>
   <methodparam>
    <type>uint</type>
    <parameter>column_key</parameter>
   </methodparam>
   <methodparam>
    <type>DYNAMIC_COLUMN_VALUE</type>
    <parameter>column_value</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Get the column value for a specified numeric key, specified in
   <parameter>column_key</parameter>
   .
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>
       <parameter>str</parameter>
      </entry>
      <entry>IN</entry>
      <entry>A pointer to a dynamic column.</entry>
     </row>
     <row>
      <entry>
       <parameter>column_key</parameter>
      </entry>
      <entry>IN</entry>
      <entry>Numeric column key</entry>
     </row>
     <row>
      <entry>
       <parameter>column_value</parameter>
      </entry>
      <entry>OUT</entry>
      <entry>The value of the specified column</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns 0 or positive value on success, a nagative value on error.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
          <title>Notes</title>
        </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mariadb_dyncol_get_named"><function>mariadb_dyncol_get_named</function></link> <link linkend="functions.mariadb_dyncol_exists_num"><function>mariadb_dyncol_exists_num</function></link>,
   <link linkend="functions.mariadb_dyncol_list_num"><function>mariadb_dyncol_list_num</function></link>
  </para>
 </refsect1>
 <refsect1 role="example">
  <title>
   Example
  </title>
 </refsect1>
</refentry>


<refentry id="functions.mariadb_dyncol_init" display-name="1">
      Available since version 1.1
      <refmeta>
  <refentrytitle>mariadb_dyncol_init</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mariadb_dyncol_init</refname>
  <refpurpose>Initialize a dynamic column</refpurpose>
 </refnamediv>
 <refsect1/>
 <refsect1 role="description">
  <methodsynopsis>
   <type>void</type>
   <methodname>mariadb_dyncol_init</methodname>
   <methodparam>
    <type>DYNAMIC_COLUMN *</type>
    <parameter>str</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Initialize a dynamic column
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>
       <parameter>str</parameter>
      </entry>
      <entry>IN</entry>
      <entry>A pointer to a dynamic column.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   void
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
          <title>Notes</title>  
          <para>
    <function>mariadb_dyncol_init()</function>
    only initializes the dynamic column, it doesn't allocate memory.
   </para>
   <para>
    <function>mariadb_dyncol_init()</function>
    is defined in
    <filename>ma_dyncol.h</filename>
    :
    <synopsis language="C">#define mariadb_dyncol_init(A) memset((A), 0, sizeof(DYNAMIC_COLUMN))</synopsis>
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mariadb_dyncol_create_many_named"><function>mariadb_dyncol_create_many_named</function></link>,
   <link linkend="functions.mariadb_dyncol_create_many_num"><function>mariadb_dyncol_create_many_num</function></link>
  </para>
 </refsect1>
 <refsect1 role="example">
  <title>
   Example
  </title>
<!--
<xi:include href="&example_path;/mysql_affected_rows.c" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        The above example will output:
        <programlisting><xi:include href="&example_path;/mysql_affected_rows.out" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting> -->
 </refsect1>
</refentry>


<refentry id="functions.mariadb_dyncol_list_named" display-name="1">
      Available since version 1.1
      <refmeta>
  <refentrytitle>mariadb_dyncol_list_named</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mariadb_dyncol_list_named</refname>
  <refpurpose>List column keys inside a dynamic column object</refpurpose>
 </refnamediv>
 <refsect1/>
 <refsect1 role="description">
  <methodsynopsis>
   <type>void</type>
   <methodname>mariadb_dyncol_list_named</methodname>
   <methodparam>
    <type>DYNAMIC_COLUMN *</type>
    <parameter>str</parameter>
   </methodparam>
   <methodparam>
    <type>uint *</type>
    <parameter>column_count</parameter>
   </methodparam>
   <methodparam>
    <type>MYSQL_LEX_STRING **</type>
    <parameter>column_keys</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Lists column keys inside a dynamic column object. The list is returned in
   <parameter>column_keys</parameter>
   while the number of elements is returned in
   <parameter>column_count</parameter>
   .
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>
       <parameter>str</parameter>
      </entry>
      <entry>IN</entry>
      <entry>A pointer to a dynamic column.</entry>
     </row>
     <row>
      <entry>
       <parameter>column_keys</parameter>
      </entry>
      <entry>OUT</entry>
      <entry>Number of column_keys</entry>
     </row>
     <row>
      <entry>
       <parameter>column_keys</parameter>
      </entry>
      <entry>OUT</entry>
      <entry>An array of non numeric column keys.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns 0 or positive value on success, a nagative value on error.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
          <title>Notes</title>
          <para>
    This function allocates memory for the
    <parameter>column_key</parameter>
    array. This memory must be explicitly freed by the function
    <function>free()</function>
    to prevent memory leakage.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mariadb_dyncol_list_num"><function>mariadb_dyncol_list_num</function></link>, <link linkend="functions.mariadb_dyncol_column_count"><function>mariadb_dyncol_column_count</function></link>
  </para>
 </refsect1>
 <refsect1 role="example">
  <title>
   Example
  </title>
 </refsect1>
</refentry>


<refentry id="functions.mariadb_dyncol_list_num" display-name="1">
      Available since version 1.1
      <refmeta>
  <refentrytitle>mariadb_dyncol_list_num</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mariadb_dyncol_list_num</refname>
  <refpurpose>List numeric column keys inside a dynamic column object</refpurpose>
 </refnamediv>
 <refsect1/>
 <refsect1 role="description">
  <methodsynopsis>
   <type>void</type>
   <methodname>mariadb_dyncol_list_named</methodname>
   <methodparam>
    <type>DYNAMIC_COLUMN *</type>
    <parameter>str</parameter>
   </methodparam>
   <methodparam>
    <type>uint *</type>
    <parameter>column_count</parameter>
   </methodparam>
   <methodparam>
    <type>uint **</type>
    <parameter>column_keys</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Lists column keys inside a dynamic column object. The list is returned in
   <parameter>column_keys</parameter>
   while the number of elements is returned in
   <parameter>column_count</parameter>
   .
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>
       <parameter>str</parameter>
      </entry>
      <entry>IN</entry>
      <entry>A pointer to a dynamic column.</entry>
     </row>
     <row>
      <entry>
       <parameter>column_keys</parameter>
      </entry>
      <entry>OUT</entry>
      <entry>Number of column_keys</entry>
     </row>
     <row>
      <entry>
       <parameter>column_keys</parameter>
      </entry>
      <entry>OUT</entry>
      <entry>An array of numeric column keys.</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns 0 or positive value on success, a nagative value on error.
  </para>
 </refsect1>
 <refsect1 role="notes">
  <note>
          <title>Notes</title>
          <para>
    This function allocates memory for the
    <parameter>column_key</parameter>
    array. This memory must be explicitly freed by the function
    <function>free()</function>
    to prevent memory leakage.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mariadb_dyncol_list_named"><function>mariadb_dyncol_list_named</function></link> <link linkend="functions.mariadb_dyncol_column_count"><function>mariadb_dyncol_column_count</function></link>
  </para>
 </refsect1>
 <refsect1 role="example">
  <title>
   Example
  </title>
 </refsect1>
</refentry>


<refentry id="functions.mariadb_dyncol_unpack" display-name="1">
      Available since version 1.1
      <refmeta>
  <refentrytitle>mariadb_dyncol_unpack</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mariadb_dyncol_unpack</refname>
  <refpurpose>Extract key value pairs</refpurpose>
 </refnamediv>
 <refsect1/>
 <refsect1 role="description">
  <methodsynopsis>
   <type>enum enum_dyncol_func_result</type>
   <methodname>mariadb_dyncol_unpack</methodname>
   <methodparam>
    <type>DYNAMIC_COLUMN *</type>
    <parameter>str</parameter>
   </methodparam>
   <methodparam>
    <type>uint *</type>
    <parameter>column_count</parameter>
   </methodparam>
   <methodparam>
    <type>MYSQL_LEX_STRING **</type>
    <parameter>column_keys</parameter>
   </methodparam>
   <methodparam>
    <type>DYNAMIC_COLUMN_VALUE **</type>
    <parameter>column_vals</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Checks if a column for a given key exists
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>
       <parameter>str</parameter>
      </entry>
      <entry>IN</entry>
      <entry>A pointer to a dynamic column.</entry>
     </row>
     <row>
      <entry>
       <parameter>column_count</parameter>
      </entry>
      <entry>OUT</entry>
      <entry>Number of columns</entry>
     </row>
     <row>
      <entry>
       <parameter>column_keys</parameter>
      </entry>
      <entry>OUT</entry>
      <entry>Array of column keys</entry>
     </row>
     <row>
      <entry>
       <parameter>column_values</parameter>
      </entry>
      <entry>OUT</entry>
      <entry>Array of column values</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns 0 or positive value on success, anagative value on error.
  </para>
 </refsect1>
 <refsect1 role="returnvalue"/>
 <refsect1 role="notes">
  <note>
          <title>Notes</title>
          <para>
    This function allocates memory for the
    <parameter>column_keys</parameter>
    and
    <parameter>column_vals</parameter>
    arrays. This memory must be explicitly freed by the function
    <function>free()</function>
    to prevent memory leakage.
   </para>
   <para>
    Columns with numeric keys will be delivered as non zero terminated strings.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mariadb_dyncol_get_named"><function>mariadb_dyncol_get_named</function></link> <link linkend="functions.mariadb_dyncol_get_num"><function>mariadb_dyncol_get_num</function></link>
  </para>
 </refsect1>
 <refsect1 role="example">
  <title>
   Example
  </title>
<!--
<xi:include href="&example_path;/mysql_affected_rows.c" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        The above example will output:
        <programlisting><xi:include href="&example_path;/mysql_affected_rows.out" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting> -->
 </refsect1>
</refentry>


<refentry id="functions.mariadb_dyncol_update_many_named" display-name="1">
      Available since version 1.1
      <refmeta>
  <refentrytitle>mariadb_dyncol_update_many_named</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mariadb_dyncol_update_many_named</refname>
  <refpurpose>Update a packed dynamic string from an array of key/value pairs</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  <methodsynopsis>
   <type>enum enum_dyncol_func_result</type>
   <methodname>mariadb_dyncol_create_many_named</methodname>
   <methodparam>
    <type>DYNAMIC_COLUMN *</type>
    <parameter>str</parameter>
   </methodparam>
   <methodparam>
    <type>uint</type>
    <parameter>column_count</parameter>
   </methodparam>
   <methodparam>
    <type>MYSQL_LEX_STRING *</type>
    <parameter>column_keys</parameter>
   </methodparam>
   <methodparam>
    <type>DYAMIC_COLUMN_VALUE *</type>
    <parameter>column_values</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Updates packed dynamic string from an array of key/value pairs.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>
       <parameter>str</parameter>
      </entry>
      <entry>IN/OUT</entry>
      <entry>A pointer to a dynamic column.</entry>
     </row>
     <row>
      <entry>
       <parameter>column_cont</parameter>
      </entry>
      <entry>IN</entry>
      <entry>Number of columns</entry>
     </row>
     <row>
      <entry>
       <parameter>column_keys</parameter>
      </entry>
      <entry>IN</entry>
      <entry>An array of named column keys</entry>
     </row>
     <row>
      <entry>
       <parameter>column_vals</parameter>
      </entry>
      <entry>IN</entry>
      <entry>An array of column values</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns 0 or positive value on success, anagative value on error.
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <note>
          <title>Notes</title>  
        <para>
    To delete a column the type of column value has to be set to
    <type>DYN_COL_NULL</type>
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mariadb_dyncol_update_many_num"><function>mariadb_dyncol_update_many_num</function></link>
  </para>
 </refsect1>
 <refsect1 role="example">
  <title>
   Example
  </title>
<!--
<xi:include href="&example_path;/mysql_affected_rows.c" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        The above example will output:
        <programlisting><xi:include href="&example_path;/mysql_affected_rows.out" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting> -->
 </refsect1>
</refentry>


<refentry id="functions.mariadb_dyncol_update_many_num" display-name="1">
      Available since version 1.1
      <refmeta>
  <refentrytitle>mariadb_dyncol_update_many_num</refentrytitle>
 </refmeta>
 <refnamediv>
  <refname>mariadb_dyncol_create_many_num</refname>
  <refpurpose>Update a packed dynamic string from an array of number/value pairs</refpurpose>
 </refnamediv>
 <refsect1/>
 <refsect1 role="description">
  <methodsynopsis>
   <type>enum enum_dyncol_func_result</type>
   <methodname>mariadb_dyncol_create_many_num</methodname>
   <methodparam>
    <type>DYNAMIC_COLUMN *</type>
    <parameter>str</parameter>
   </methodparam>
   <methodparam>
    <type>uint</type>
    <parameter>column_count</parameter>
   </methodparam>
   <methodparam>
    <type>uint *</type>
    <parameter>*column_numbers</parameter>
   </methodparam>
   <methodparam>
    <type>DYAMIC_COLUMN_VALUE *</type>
    <parameter>column_values</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Update a packed dynamic string from array of number/value parirs
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <title>
   Parameters
  </title>
  <informaltable frame="none">
   <tgroup cols="3">
<?dbhtml cellspacing="0" ?>
<?dbhtml cellpadding="5" ?>
    <tbody>
     <row>
      <entry>
       <parameter>str</parameter>
      </entry>
      <entry>IN/OUT</entry>
      <entry>A pointer to a dynamic column.</entry>
     </row>
     <row>
      <entry>
       <parameter>column_cont</parameter>
      </entry>
      <entry>IN</entry>
      <entry>Number of columns</entry>
     </row>
     <row>
      <entry>
       <parameter>column_keys</parameter>
      </entry>
      <entry>IN</entry>
      <entry>An array of numeric column keys</entry>
     </row>
     <row>
      <entry>
       <parameter>column_vals</parameter>
      </entry>
      <entry>IN</entry>
      <entry>An array of column values</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="returnvalue">
  <title>
   Return value
  </title>
  <para>
   Returns 0 or positive value on success, anagative value on error.
  </para>
 </refsect1>
 <refsect1 role="returnvalue">
  <note>
          <title>Notes</title>  
        <para>
    To delete a column the type of column value has to be set to
    <type>DYN_COL_NULL</type>
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  <title>
   See also
  </title>
  <para>
   <link linkend="functions.mariadb_dyncol_update_many_named"><function>mariadb_dyncol_update_many_named</function></link>
  </para>
 </refsect1>
 <refsect1 role="example">
  <title>
   Example
  </title>
<!--
<xi:include href="&example_path;/mysql_affected_rows.c" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        The above example will output:
        <programlisting><xi:include href="&example_path;/mysql_affected_rows.out" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting> -->
 </refsect1>
</refentry>



</section>

</section>

  </chapter>
  <appendix id="appendices" lang="en">
  <title>Appendices</title>
  
<!-- $Revision: 297028 $ -->
<!-- DO NOT TRANSLATE THIS FILE -->
<appendix xmlns="" xml:id="cc.license">
 <title>
  Creative Commons Attribution 3.0
 </title>
 <simpara>
  THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS CREATIVE COMMONS PUBLIC
  LICENSE ("CCPL" OR "LICENSE"). THE WORK IS PROTECTED BY COPYRIGHT AND/OR OTHER
  APPLICABLE LAW. ANY USE OF THE WORK OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR
  COPYRIGHT LAW IS PROHIBITED.
 </simpara>
 <simpara>
  BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND AGREE TO BE BOUND BY
  THE TERMS OF THIS LICENSE. TO THE EXTENT THIS LICENSE MAY BE CONSIDERED TO BE A
  CONTRACT, THE LICENSOR GRANTS YOU THE RIGHTS CONTAINED HERE IN CONSIDERATION OF YOUR
  ACCEPTANCE OF SUCH TERMS AND CONDITIONS.
 </simpara>
 <simpara>
  <emphasis>1. Definitions</emphasis>
 </simpara>
 <orderedlist numeration="loweralpha">
  <listitem>
   <simpara>
    <emphasis>"Adaptation"</emphasis> means a work based upon the Work, or upon the Work
    and other pre-existing works, such as a translation, adaptation, derivative work,
    arrangement of music or other alterations of a literary or artistic work, or phonogram
    or performance and includes cinematographic adaptations or any other form in which the
    Work may be recast, transformed, or adapted including in any form recognizably derived
    from the original, except that a work that constitutes a Collection will not be
    considered an Adaptation for the purpose of this License. For the avoidance of doubt,
    where the Work is a musical work, performance or phonogram, the synchronization of the
    Work in timed-relation with a moving image ("synching") will be considered an
    Adaptation for the purpose of this License.
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    <emphasis>"Collection"</emphasis> means a collection of literary or artistic works,
    such as encyclopedias and anthologies, or performances, phonograms or broadcasts, or
    other works or subject matter other than works listed in Section 1(f) below, which, by
    reason of the selection and arrangement of their contents, constitute intellectual
    creations, in which the Work is included in its entirety in unmodified form along with
    one or more other contributions, each constituting separate and independent works in
    themselves, which together are assembled into a collective whole. A work that
    constitutes a Collection will not be considered an Adaptation (as defined above) for
    the purposes of this License.
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    <emphasis>"Distribute"</emphasis> means to make available to the public the original
    and copies of the Work or Adaptation, as appropriate, through sale or other transfer
    of ownership.
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    <emphasis>"Licensor"</emphasis> means the individual, individuals, entity or entities
    that offer(s) the Work under the terms of this License.
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    <emphasis>"Work"</emphasis> means the literary and/or artistic work offered under the
    terms of this License including without limitation any production in the literary,
    scientific and artistic domain, whatever may be the mode or form of its expression
    including digital form, such as a book, pamphlet and other writing; a lecture,
    address, sermon or other work of the same nature; a dramatic or dramatico-musical
    work; a choreographic work or entertainment in dumb show; a musical composition with
    or without words; a cinematographic work to which are assimilated works expressed by a
    process analogous to cinematography; a work of drawing, painting, architecture,
    sculpture, engraving or lithography; a photographic work to which are assimilated
    works expressed by a process analogous to photography; a work of applied art; an
    illustration, map, plan, sketch or three-dimensional work relative to geography,
    topography, architecture or science; a performance; a broadcast; a phonogram; a
    compilation of data to the extent it is protected as a copyrightable work; or a work
    performed by a variety or circus performer to the extent it is not otherwise
    considered a literary or artistic work.
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    <emphasis>"You"</emphasis> means an individual or entity exercising rights under this
    License who has not previously violated the terms of this License with respect to the
    Work, or who has received express permission from the Licensor to exercise rights
    under this License despite a previous violation.
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    <emphasis>"Publicly Perform"</emphasis> means to perform public recitations of the
    Work and to communicate to the public those public recitations, by any means or
    process, including by wire or wireless means or public digital performances; to make
    available to the public Works in such a way that members of the public may access
    these Works from a place and at a place individually chosen by them; to perform the
    Work to the public by any means or process and the communication to the public of the
    performances of the Work, including by public digital performance; to broadcast and
    rebroadcast the Work by any means including signs, sounds or images.
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    <emphasis>"Reproduce"</emphasis> means to make copies of the Work by any means
    including without limitation by sound or visual recordings and the right of fixation
    and reproducing fixations of the Work, including storage of a protected performance or
    phonogram in digital form or other electronic medium.
   </simpara>
  </listitem>
 </orderedlist>
 <simpara>
  <emphasis>2. Fair Dealing Rights.</emphasis> Nothing in this License is intended to
  reduce, limit, or restrict any uses free from copyright or rights arising from
  limitations or exceptions that are provided for in connection with the copyright
  protection under copyright law or other applicable laws.
 </simpara>
 <simpara>
  <emphasis>3. License Grant.</emphasis> Subject to the terms and conditions of this
  License, Licensor hereby grants You a worldwide, royalty-free, non-exclusive, perpetual
  (for the duration of the applicable copyright) license to exercise the rights in the
  Work as stated below:
 </simpara>
 <orderedlist numeration="loweralpha">
  <listitem>
   <simpara>
    to Reproduce the Work, to incorporate the Work into one or more Collections, and to
    Reproduce the Work as incorporated in the Collections;
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    to create and Reproduce Adaptations provided that any such Adaptation, including any
    translation in any medium, takes reasonable steps to clearly label, demarcate or
    otherwise identify that changes were made to the original Work. For example, a
    translation could be marked "The original work was translated from English to
    Spanish," or a modification could indicate "The original work has been modified.";
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    to Distribute and Publicly Perform the Work including as incorporated in Collections;
    and,
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    to Distribute and Publicly Perform Adaptations.
   </simpara>
  </listitem>
  <listitem>
   <para>
    For the avoidance of doubt:
    <orderedlist numeration="upperroman">
     <listitem>
      <simpara>
       <emphasis>Non-waivable Compulsory License Schemes.</emphasis> In those
       jurisdictions in which the right to collect royalties through any statutory or
       compulsory licensing scheme cannot be waived, the Licensor reserves the exclusive
       right to collect such royalties for any exercise by You of the rights granted under
       this License;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <emphasis>Waivable Compulsory License Schemes.</emphasis> In those jurisdictions in
       which the right to collect royalties through any statutory or compulsory licensing
       scheme can be waived, the Licensor waives the exclusive right to collect such
       royalties for any exercise by You of the rights granted under this License; and,
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <emphasis>Voluntary License Schemes.</emphasis> The Licensor waives the right to
       collect royalties, whether individually or, in the event that the Licensor is a
       member of a collecting society that administers voluntary licensing schemes, via
       that society, from any exercise by You of the rights granted under this License.
      </simpara>
     </listitem>
    </orderedlist>
   </para>
  </listitem>
 </orderedlist>
 <simpara>
  The above rights may be exercised in all media and formats whether now known or
  hereafter devised. The above rights include the right to make such modifications as are
  technically necessary to exercise the rights in other media and formats. Subject to
  Section 8(f), all rights not expressly granted by Licensor are hereby reserved.
 </simpara>
 <simpara>
  <emphasis>4. Restrictions</emphasis>. The license granted in Section 3 above is
  expressly made subject to and limited by the following restrictions:
 </simpara>
 <orderedlist numeration="loweralpha">
  <listitem>
   <simpara>
    You may Distribute or Publicly Perform the Work only under the terms of this License.
    You must include a copy of, or the Uniform Resource Identifier (URI) for, this License
    with every copy of the Work You Distribute or Publicly Perform. You may not offer or
    impose any terms on the Work that restrict the terms of this License or the ability of
    the recipient of the Work to exercise the rights granted to that recipient under the
    terms of the License. You may not sublicense the Work. You must keep intact all
    notices that refer to this License and to the disclaimer of warranties with every copy
    of the Work You Distribute or Publicly Perform. When You Distribute or Publicly
    Perform the Work, You may not impose any effective technological measures on the Work
    that restrict the ability of a recipient of the Work from You to exercise the rights
    granted to that recipient under the terms of the License. This Section 4(a) applies to
    the Work as incorporated in a Collection, but this does not require the Collection
    apart from the Work itself to be made subject to the terms of this License. If You
    create a Collection, upon notice from any Licensor You must, to the extent
    practicable, remove from the Collection any credit as required by Section 4(b), as
    requested. If You create an Adaptation, upon notice from any Licensor You must, to the
    extent practicable, remove from the Adaptation any credit as required by Section 4(b),
    as requested.
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    If You Distribute, or Publicly Perform the Work or any Adaptations or Collections, You
    must, unless a request has been made pursuant to Section 4(a), keep intact all
    copyright notices for the Work and provide, reasonable to the medium or means You are
    utilizing: (i) the name of the Original Author (or pseudonym, if applicable) if
    supplied, and/or if the Original Author and/or Licensor designate another party or
    parties (e.g., a sponsor institute, publishing entity, journal) for attribution
    ("Attribution Parties") in Licensor's copyright notice, terms of service or by other
    reasonable means, the name of such party or parties; (ii) the title of the Work if
    supplied; (iii) to the extent reasonably practicable, the URI, if any, that Licensor
    specifies to be associated with the Work, unless such URI does not refer to the
    copyright notice or licensing information for the Work; and (iv) , consistent with
    Section 3(b), in the case of an Adaptation, a credit identifying the use of the Work
    in the Adaptation (e.g., "French translation of the Work by Original Author," or
    "Screenplay based on original Work by Original Author"). The credit required by this
    Section 4 (b) may be implemented in any reasonable manner; provided, however, that in
    the case of a Adaptation or Collection, at a minimum such credit will appear, if a
    credit for all contributing authors of the Adaptation or Collection appears, then as
    part of these credits and in a manner at least as prominent as the credits for the
    other contributing authors. For the avoidance of doubt, You may only use the credit
    required by this Section for the purpose of attribution in the manner set out above
    and, by exercising Your rights under this License, You may not implicitly or
    explicitly assert or imply any connection with, sponsorship or endorsement by the
    Original Author, Licensor and/or Attribution Parties, as appropriate, of You or Your
    use of the Work, without the separate, express prior written permission of the
    Original Author, Licensor and/or Attribution Parties.
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    Except as otherwise agreed in writing by the Licensor or as may be otherwise permitted
    by applicable law, if You Reproduce, Distribute or Publicly Perform the Work either by
    itself or as part of any Adaptations or Collections, You must not distort, mutilate,
    modify or take other derogatory action in relation to the Work which would be
    prejudicial to the Original Author's honor or reputation. Licensor agrees that in
    those jurisdictions (e.g. Japan), in which any exercise of the right granted in
    Section 3(b) of this License (the right to make Adaptations) would be deemed to be a
    distortion, mutilation, modification or other derogatory action prejudicial to the
    Original Author's honor and reputation, the Licensor will waive or not assert, as
    appropriate, this Section, to the fullest extent permitted by the applicable national
    law, to enable You to reasonably exercise Your right under Section 3(b) of this
    License (right to make Adaptations) but not otherwise.
   </simpara>
  </listitem>
 </orderedlist>
 <simpara>
  <emphasis>5. Representations, Warranties and Disclaimer</emphasis>
 </simpara>
 <simpara>
  UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING, LICENSOR OFFERS THE WORK
  AS-IS AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE WORK,
  EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION, WARRANTIES OF
  TITLE, MERCHANTIBILITY, FITNESS FOR A PARTICULAR PURPOSE, NONINFRINGEMENT, OR THE
  ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OF ABSENCE OF ERRORS,
  WHETHER OR NOT DISCOVERABLE. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED
  WARRANTIES, SO SUCH EXCLUSION MAY NOT APPLY TO YOU.
 </simpara>
 <simpara>
  <emphasis>6. Limitation on Liability.</emphasis> EXCEPT TO THE EXTENT REQUIRED BY
  APPLICABLE LAW, IN NO EVENT WILL LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY FOR ANY
  SPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE OR EXEMPLARY DAMAGES ARISING OUT OF THIS
  LICENSE OR THE USE OF THE WORK, EVEN IF LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGES.
 </simpara>
 <simpara>
  <emphasis>7. Termination.</emphasis>
 </simpara>
 <orderedlist numeration="loweralpha">
  <listitem>
   <simpara>
    This License and the rights granted hereunder will terminate automatically upon any
    breach by You of the terms of this License. Individuals or entities who have received
    Adaptations or Collections from You under this License, however, will not have their
    licenses terminated provided such individuals or entities remain in full compliance
    with those licenses. Sections 1, 2, 5, 6, 7, and 8 will survive any termination of
    this License.
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    Subject to the above terms and conditions, the license granted here is perpetual (for
    the duration of the applicable copyright in the Work). Notwithstanding the above,
    Licensor reserves the right to release the Work under different license terms or to
    stop distributing the Work at any time; provided, however that any such election will
    not serve to withdraw this License (or any other license that has been, or is required
    to be, granted under the terms of this License), and this License will continue in
    full force and effect unless terminated as stated above.
   </simpara>
  </listitem>
 </orderedlist>
 <simpara>
  <emphasis>8. Miscellaneous</emphasis>
 </simpara>
 <orderedlist numeration="loweralpha">
  <listitem>
   <simpara>
    Each time You Distribute or Publicly Perform the Work or a Collection, the Licensor
    offers to the recipient a license to the Work on the same terms and conditions as the
    license granted to You under this License.
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    Each time You Distribute or Publicly Perform an Adaptation, Licensor offers to the
    recipient a license to the original Work on the same terms and conditions as the
    license granted to You under this License.
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    If any provision of this License is invalid or unenforceable under applicable law, it
    shall not affect the validity or enforceability of the remainder of the terms of this
    License, and without further action by the parties to this agreement, such provision
    shall be reformed to the minimum extent necessary to make such provision valid and
    enforceable.
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    No term or provision of this License shall be deemed waived and no breach consented to
    unless such waiver or consent shall be in writing and signed by the party to be
    charged with such waiver or consent
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    This License constitutes the entire agreement between the parties with respect to the
    Work licensed here. There are no understandings, agreements or representations with
    respect to the Work not specified here. Licensor shall not be bound by any additional
    provisions that may appear in any communication from You. This License may not be
    modified without the mutual written agreement of the Licensor and You.
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    The rights granted under, and the subject matter referenced, in this License were
    drafted utilizing the terminology of the Berne Convention for the Protection of
    Literary and Artistic Works (as amended on September 28, 1979), the Rome Convention of
    1961, the WIPO Copyright Treaty of 1996, the WIPO Performances and Phonograms Treaty
    of 1996 and the Universal Copyright Convention (as revised on July 24, 1971). These
    rights and subject matter take effect in the relevant jurisdiction in which the
    License terms are sought to be enforced according to the corresponding provisions of
    the implementation of those treaty provisions in the applicable national law. If the
    standard suite of rights granted under applicable copyright law includes additional
    rights not granted under this License, such additional rights are deemed to be
    included in the License; this License is not intended to restrict the license of any
    rights under applicable law.
   </simpara>
  </listitem>
 </orderedlist>
</appendix>

  
<appendix xml:id="appendix.faq">
 <title>
  Frequently asked questions (FAQ)
 </title>
 <qandaset defaultlabel="qanda">
<?dbhtml toc="1" ?>
  <qandaentry>
   <question>
    <para>
     Is MariaDB client library thread safe?
    </para>
   </question>
   <answer>
    <para>
     Yes. All binaries are compiled with thread safety flag. On Unix/Linux
     operating the mysqlclient_r library is provided for compatibility reasons
     and symlinks to the thread safe library.
    </para>
   </answer>
   <question>
    <para>
     How to get the last inserted unique id?
    </para>
   </question>
   <answer>
    <para>
     Last unique inserted id will be returned by the function
     <link xmlns="" linkend="functions.mysql_insert_id"><function>mysql_insert_id</function></link>.
    </para>
   </answer>
  </qandaentry>
 </qandaset>
</appendix>

  
<appendix xmlns="" xml:id="appendix.changelog">
 <title>
  Revision history
 </title>

<informaltable frame="none">
  <tgroup cols="2" colsep="0" rowsep="0">
    <thead>
      <row>
        <entry role="ma_table" colsep="0">Rev.</entry>
        <entry role="ma_table" colsep="0">Date/Description</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
          <emphasis role="strong">118</emphasis>
        </entry>
        <entry>Mon 2014-02-10 09:04:01 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for conc-77: Backslash escaped quotes (', "") are not parsed correctly</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">117</emphasis>
        </entry>
        <entry>Fri 2014-02-07 11:31:30 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for conc-75: options not handled correctly after a reconnect occured</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">116</emphasis>
        </entry>
        <entry>Thu 2014-02-06 12:49:39 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for CONC-74: Local infile handler crashes due to missing initialization of handler functions.</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">115</emphasis>
        </entry>
        <entry>Tue 2014-02-04 20:20:33 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixed path for symbolic links on non Windows platforms when MySQL compatibility mode was set:
All libraries including symlinks are now in ${CMAKE_INSTALL_PREFIX}/lib/mariadb</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">114</emphasis>
        </entry>
        <entry>Tue 2014-02-04 20:09:23 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for CONC-71: mysql_real_query crashes after server restart
- We now check socket status before net_flush (and return error if the socket is dead)</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">113</emphasis>
        </entry>
        <entry>Mon 2014-01-27 21:14:02 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for CONC-70: Unknown error when reading large packets via conpressed protocol</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">112</emphasis>
        </entry>
        <entry>Sat 2014-01-25 18:16:36 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for CONC-67: mysql_stmt_fetch returns error instead of MYSQL_NO_DATA when using cursors</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">111</emphasis>
        </entry>
        <entry>Fri 2014-01-24 09:02:03 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for conc-68: SELECT fails with "Got packet bigger than 'max_allowed_packet'" on a table with longblob column with fields greater than 15MB</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">110</emphasis>
        </entry>
        <entry>Wed 2014-01-22 22:31:08 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for CONC-66: Support for quoted values in configuration file</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">109</emphasis>
        </entry>
        <entry>Sat 2014-01-11 20:09:32 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Added mingw support (Win32). Special thanks to Eric Trinh for his patch!</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">108</emphasis>
        </entry>
        <entry>Fri 2014-01-03 01:19:44 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for conc-65:
  Apples libiconv doesn't provide libiconv_open so we need to link against
  the macports library instead</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">107</emphasis>
        </entry>
        <entry>Wed 2013-11-20 20:37:30 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for CONC-60: crash when STMT_ATTR_UPDATE_MAX_LENGTH attribute was set and new date formats are used.
                 Special thanks to Lionel Elie Mamane and Daniel Bart for their tremendous help.</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">106</emphasis>
        </entry>
        <entry>Sun 2013-11-10 19:54:00 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Added windows code page to CHARSET_INFO structure</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">105</emphasis>
        </entry>
        <entry>Sun 2013-10-27 19:38:11 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixed bug in prepared statements: wrong length for MYSQL_TYPE{TIME,DATETIME,TIMESTAMP}
renewed test certificates for ssl tests</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">104</emphasis>
        </entry>
        <entry>Sat 2013-10-26 18:55:24 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Minor prepared statement fixes for time/date/datetime/timestamp types
Added flag MADB_BIND_DUMMY which allows binding empty buffers</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">103</emphasis>
        </entry>
        <entry>Sun 2013-10-20 09:14:48 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for CONC-58:
  support OpenSSL version &lt; 1.0.1</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">102</emphasis>
        </entry>
        <entry>Sun 2013-10-20 09:08:05 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixed my_error:
  my_error used wrong offset (ignore EE_FIRSTERROR)</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">101</emphasis>
        </entry>
        <entry>Mon 2013-10-14 14:17:54 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixes for DBD:mysql (CONC-57)
added missing functions mysql_read_query_result and mysql_get_parameters</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">100</emphasis>
        </entry>
        <entry>Thu 2013-10-10 15:14:15 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixes for Win64 build</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">99</emphasis>
        </entry>
        <entry>Sat 2013-10-05 08:30:54 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixed window compile error (removed uint from mysql.h)</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">98</emphasis>
        </entry>
        <entry>Fri 2013-10-04 20:55:23 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for CONC-56:
  provide MAX constants used by PHP's pdo extension</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">97</emphasis>
        </entry>
        <entry>Fri 2013-10-04 19:09:08 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Windows build fixes
 - use /MT flag instead of /MD
 - add debug libraries to package</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">96</emphasis>
        </entry>
        <entry>Tue 2013-10-01 09:53:41 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Removed all internal dependencies from ma_dyncol.
Fixed compiler warnings</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">95</emphasis>
        </entry>
        <entry>Mon 2013-09-30 12:23:13 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixed warnings (Thanks to Evan Miller)</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">94</emphasis>
        </entry>
        <entry>Mon 2013-09-30 06:25:27 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixed missing exported symbols</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">93</emphasis>
        </entry>
        <entry>Sat 2013-09-28 10:38:56 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Added support for connection attributes</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">92</emphasis>
        </entry>
        <entry>Thu 2013-09-26 14:35:14 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Added support for SSL related parameters in mysql_option function</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">91</emphasis>
        </entry>
        <entry>Thu 2013-09-26 08:40:20 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for CONC-53: Fix C++ compiler errors</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">90</emphasis>
        </entry>
        <entry>Fri 2013-09-20 16:21:53 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Minor fixes in ssl test</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">89</emphasis>
        </entry>
        <entry>Fri 2013-09-20 15:23:20 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixed windows compile error in dynamic columns</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">88</emphasis>
        </entry>
        <entry>Fri 2013-09-20 14:48:20 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Merge from 10.0 dynamic column implemenetation:
        - functions which operate with numeric keys now have suffix _num
        - Fixes for MDEV 4993-4995</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">87</emphasis>
        </entry>
        <entry>Thu 2013-09-19 15:14:11 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">More SSL fixes:
        - verification functions for key and cert now use SSL_context
        - Added support for server cert verification (hostname must match)
        - minor bug fixes</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">86</emphasis>
        </entry>
        <entry>Tue 2013-09-17 18:47:07 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Added support for ssl server certification:
  mysql_options: Added support MYSQL_OPT_SSL_VALIDATE_SERVER_CERT flag
  added my_ssl_verify_server_cert which extracts the hostname and compares
  it with mysql-&gt;host</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">85</emphasis>
        </entry>
        <entry>Mon 2013-09-16 16:19:16 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for CONC-50:
mysql_real_connect doesn't return an error if a an invalid ca file was specified.</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">84</emphasis>
        </entry>
        <entry>Wed 2013-09-04 18:45:54 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for conc-49:
  local_infile_init didn't open files with binary flag</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">83</emphasis>
        </entry>
        <entry>Mon 2013-09-02 15:31:12 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Windows fixes for dynamic columns</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">82</emphasis>
        </entry>
        <entry>Sat 2013-08-31 07:37:01 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for CONC-48: Allocate one more byte for trailing zero to prevent crash if the total lengths of compressed
packages is equal to the value of net buffer size</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">81</emphasis>
        </entry>
        <entry>Fri 2013-08-23 18:35:07 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Added dyamic column api
Added character set conversion</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">80</emphasis>
        </entry>
        <entry>Tue 2013-08-20 16:40:03 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for CONC-44: LOAD DATA INFILE can't open utf16le encoded filenames</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">79</emphasis>
        </entry>
        <entry>Wed 2013-08-14 16:08:21 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for CONC-46:
  cleanup of my_win_init(), removed setlocale and server specific stuff</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">78</emphasis>
        </entry>
        <entry>Wed 2013-08-14 06:12:23 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">removed safe_malloc implementation</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">77</emphasis>
        </entry>
        <entry>Sat 2013-08-03 18:39:05 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for CONC-42: More informative errormessages for handshake errors</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">76</emphasis>
        </entry>
        <entry>Fri 2013-08-02 17:58:57 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for #conc-41: Connect errormessage doesn't return socket error</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">75</emphasis>
        </entry>
        <entry>Thu 2013-08-01 15:23:48 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixed LOAD DATA LOCAL INFILE crash when specifying a file which doesn't exist
Fixed error message for non existing file (was errno=0)</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">74</emphasis>
        </entry>
        <entry>Thu 2013-08-01 09:56:36 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixed crash/undefined behaviour when running large amount of threads:
  replaced select() with poll()
Added conneciton timeout support for windows platforms</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">73</emphasis>
        </entry>
        <entry>Wed 2013-07-24 07:01:48 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Several test fixes</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">72</emphasis>
        </entry>
        <entry>Mon 2013-07-22 07:22:04 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixes for Solaris build (Bugs CONC-36,37 and 38)</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">71</emphasis>
        </entry>
        <entry>Mon 2013-07-15 10:47:05 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">DBUG update and fixes
Fixed net_read crash in debug version</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">70</emphasis>
        </entry>
        <entry>Wed 2013-07-03 07:37:10 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">- More OS/X fixes
- Fixed wrong error message in mysql_real_connect</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">69</emphasis>
        </entry>
        <entry>Mon 2013-07-01 05:27:17 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixed compiler warnings</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">68</emphasis>
        </entry>
        <entry>Mon 2013-07-01 05:00:34 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Reworked compressed and protocol implementation,
  including fixes for conc-31 and conc-34
- Added win64 fixes in protocol (changed ulong to size_t)

modified:
  include/my_sys.h
  include/mysql_com.h
  include/violite.h
  libmariadb/libmariadb.c
  libmariadb/my_compress.c
  libmariadb/my_stmt.c
  libmariadb/my_thr_init.c
  libmariadb/net.c
  libmariadb/violite.c
  unittest/libmariadb/basic-t.c
  unittest/libmariadb/charset.c
  unittest/libmariadb/thread.c
unknown:
  xx
  libmariadb/libmariadb.so.1
  mariadb_config/mariadb_config
  mariadb_config/mariadb_config.c
  unittest/libmariadb/basic-t
  unittest/libmariadb/charset
  unittest/libmariadb/connection
  unittest/libmariadb/cursor
  unittest/libmariadb/errors
  unittest/libmariadb/fetch
  unittest/libmariadb/logs
  unittest/libmariadb/misc
  unittest/libmariadb/ps
  unittest/libmariadb/ps_bugs
  unittest/libmariadb/ps_new
  unittest/libmariadb/result
  unittest/libmariadb/sp
  unittest/libmariadb/sqlite3
  unittest/libmariadb/ssl
  unittest/libmariadb/thread
  unittest/libmariadb/view</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">67</emphasis>
        </entry>
        <entry>Mon 2013-06-17 06:58:20 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for CONC-27:
  Prevent crash if mysql_thread_end was called without prior initialization via mysql_thread_init</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">66</emphasis>
        </entry>
        <entry>Thu 2013-06-13 11:38:37 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for OSX build: rename sigset to my_sigset</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">65</emphasis>
        </entry>
        <entry>Wed 2013-06-12 15:58:37 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for CONC-30: Compilation issue on CentOS 3.9</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">64</emphasis>
        </entry>
        <entry>Mon 2013-06-03 08:27:12 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixed reconnect problem
Added workaround for MDEV-4604 in mysql_stmt_store_result</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">63</emphasis>
        </entry>
        <entry>Sat 2013-06-01 13:50:35 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Added workaround for MDEV-6304: In mysql_stmt_more_results we check for both SERVER_MORE_RESULTS_EXIST
      and for SERVER_PS_OUT_PARAMS</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">62</emphasis>
        </entry>
        <entry>Wed 2013-05-29 11:59:01 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixed crash when calling mysql_close_options twice (pointer weren't adjusted to NULL)
Fixed wrong behaviour when using stored procedures inside prepared statements
Fixed identiation in my_stmt.h</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">61</emphasis>
        </entry>
        <entry>Mon 2013-05-20 18:00:08 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">- Fixed memory overrun in mysql_stmt_execute due to wrong length calculation.
- Fixed bug in mysql_stmt_next_result
- Fixed mysql_stmt_reset: multi result sets weren't flushed properly
- Fixed several test cases</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">60</emphasis>
        </entry>
        <entry>Mon 2013-05-20 10:50:58 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for prepared statment multi results:
  Reallocate buffers (fields and binds) for new resultsets</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">59</emphasis>
        </entry>
        <entry>Fri 2013-05-10 10:27:42 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">CONC-26: CLIENT_REMEMBER_OPTIONS is not supported</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">58</emphasis>
        </entry>
        <entry>Thu 2013-05-09 14:11:33 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixed CONC-9: removed winsock2 from mysql.h
Fixed CONC-24: reconnect failed
  mysql_reconnect didn't set reconnect flag for new connection</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">57</emphasis>
        </entry>
        <entry>Thu 2013-05-09 12:05:38 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixed bug in mysql_stmt_data_seek: Reset the status of stmt to user fetching, otherwise stmt_data_seek will not work after fetch returned MYSQL_NO_DATA.
Removed examples from build. This directory should be moved into doc tree</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">56</emphasis>
        </entry>
        <entry>Tue 2013-04-30 18:02:53 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Added microseconds support for prepared statements:
  datetime, timestamp and time to string conversion now returns microsenconds</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">55</emphasis>
        </entry>
        <entry>Thu 2013-04-25 18:24:21 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for CONC-21:
  Ignore the 5.5.5- prefix for MariaDB 10 and report correct version numbers</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">54</emphasis>
        </entry>
        <entry>Thu 2013-04-25 08:14:23 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for CONC-14: Monitor the socket status in net_clear:
  In case of a disconnection send_query will try to reconnect</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">53</emphasis>
        </entry>
        <entry>Wed 2013-04-24 17:02:03 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for unbuffered stmt fetch: increase number of rows
Added Test for CONC-24</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">52</emphasis>
        </entry>
        <entry>Fri 2013-04-12 11:24:42 +0200</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixed memory overrun (wrong length calculation in mysql_stmt_generate_request)
Fuxed crash with mysql_send_long_data</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">51</emphasis>
        </entry>
        <entry>Fri 2013-03-29 18:29:35 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Added missing -lm for mariadb_config</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">50</emphasis>
        </entry>
        <entry>Tue 2013-03-26 11:31:54 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixed crash when running out of memory in mysql_stmt_init.</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">49</emphasis>
        </entry>
        <entry>Sun 2013-03-24 18:04:45 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Changed default built options</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">48</emphasis>
        </entry>
        <entry>Sun 2013-03-24 15:14:06 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for bug #CONC-16: ource tarball without version info in filename</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">47</emphasis>
        </entry>
        <entry>Sun 2013-03-24 14:29:24 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Test case fixes</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">46</emphasis>
        </entry>
        <entry>Wed 2013-03-20 11:00:46 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Added MSI Installer for Windows</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">45</emphasis>
        </entry>
        <entry>Tue 2013-03-19 14:53:56 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Disable DBUG for Release builds</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">44</emphasis>
        </entry>
        <entry>Tue 2013-03-19 13:31:29 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixed build (CMAKE_BINARY_DIR for symbolic links)</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">43</emphasis>
        </entry>
        <entry>Tue 2013-03-19 13:24:39 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixed wrong symlink (Thanks to Axel Schwenke)</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">42</emphasis>
        </entry>
        <entry>Sun 2013-03-17 12:32:08 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for CONC-15
  Removed redundant prototypes
  Fixed several prototypes with void parameters</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">41</emphasis>
        </entry>
        <entry>Sun 2013-03-17 11:46:50 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for CONNC-18
declare local_thr_alaram as static</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">40</emphasis>
        </entry>
        <entry>Wed 2013-03-13 21:43:39 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">more test fixes</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">39</emphasis>
        </entry>
        <entry>Wed 2013-03-13 11:00:56 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixed bug in character set autodetection
Fixed compiler warnings in test suite
Skipped change_users tests: They don't work anymore (mysql_change_user) security fix
Applied patch from John Schember</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">38</emphasis>
        </entry>
        <entry>Sat 2013-03-09 09:49:04 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Replaced byte declarations (now unsigned char)
Added initial support for character set autodetection</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">37</emphasis>
        </entry>
        <entry>Thu 2013-03-07 13:56:14 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix dbug crash in mysql_server_end</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">36</emphasis>
        </entry>
        <entry>Tue 2013-02-26 11:52:22 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Export of mysql_ps_fetch_functions: This will allow clients to convert values
after fetch (e.g. SQLGetData)</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">35</emphasis>
        </entry>
        <entry>Wed 2013-02-13 18:35:25 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Prevent freeing of options if connect failed.</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">34</emphasis>
        </entry>
        <entry>Wed 2013-01-30 17:44:35 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Updated documentation</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">33</emphasis>
        </entry>
        <entry>Wed 2013-01-30 08:42:05 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Added missing test for embedded</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">32</emphasis>
        </entry>
        <entry>Wed 2013-01-30 08:37:24 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Added support for embedded (sqlite)</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">31</emphasis>
        </entry>
        <entry>Wed 2013-01-23 07:25:26 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Added support for options in options-&gt;extension</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">30</emphasis>
        </entry>
        <entry>Mon 2013-01-21 13:52:53 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for conc-7:
- added missing server error codes for MariaDB and MySQL Server
- added symbolic links for projects which don't support mariadb_config</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">29</emphasis>
        </entry>
        <entry>Sun 2013-01-20 14:08:36 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for connc-6: added missing functions
- mysql_library_init,end as an alias for mysql_server_init/end
- mysql_get_server and mariadb_connection to determine type of server
  (mysql or mariadb)</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">28</emphasis>
        </entry>
        <entry>Thu 2012-12-27 12:02:09 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixed license headers which didn't mention PHP code</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">27</emphasis>
        </entry>
        <entry>Wed 2012-12-26 23:14:09 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Don't max out on windows warning settings, it is not practical - there are thousands of insignificant warnings</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">26</emphasis>
        </entry>
        <entry>Wed 2012-12-26 22:20:50 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">CONC-4 : link with static C runtime when using MSVC</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">25</emphasis>
        </entry>
        <entry>Wed 2012-12-26 20:57:26 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for bug conc-5: 
field-&gt;catalog is undefined if result set was obtained from mysql_stmt_result_metadata()</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">24</emphasis>
        </entry>
        <entry>Mon 2012-12-17 19:05:09 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for CONC-3:
  In older CMake versions FindOpenSSL.cmake doesn't work as expected,
  (OPENSSL_LIBRARIES doesn't contain crypto library), so we set the
  required cmake version number to 2.8.0 and above</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">23</emphasis>
        </entry>
        <entry>Sun 2012-12-16 12:05:40 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">some clean up</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">22</emphasis>
        </entry>
        <entry>Sat 2012-12-15 13:49:47 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Added IPV6 support</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">21</emphasis>
        </entry>
        <entry>Sat 2012-12-15 08:23:43 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for CONC-1 (Inverted error messages no 2058,2059)
Added support for old password authentication:
- Fixed scramble_323:
    use exact length of message (SCRAMBLE_LENGTH_323 instead
    of strlen(message))
- Added old_password_authentication plugin into list of builtin plugins</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">20</emphasis>
        </entry>
        <entry>Tue 2012-12-11 20:29:50 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">removed mysql_io.c (php streams), which is no longer used</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">19</emphasis>
        </entry>
        <entry>Sat 2012-12-01 14:02:34 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixes for SSL
  - fix for php bug 51647
  - added cert store
  - added certificates for testing</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">18</emphasis>
        </entry>
        <entry>Fri 2012-11-30 13:47:24 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix for mariadb_config: lib output was not correct
cleanup
fixed ps_test (warning_count differs on MariaDB servers)</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">17</emphasis>
        </entry>
        <entry>Thu 2012-11-29 17:27:56 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">- Fix for mysql_stmt_next_result:
  obtain number of fields from mysql structure
  added test case (ps_new.c)
- Added additional parameter cipher for mysql_ssl_set
- some cosmetics for test cases</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">16</emphasis>
        </entry>
        <entry>Thu 2012-11-29 11:25:44 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">merge georg's fixes</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">15</emphasis>
        </entry>
        <entry>Thu 2012-11-29 01:58:44 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">fix typo in shared library versioning</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">14</emphasis>
        </entry>
        <entry>Wed 2012-11-28 22:44:42 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">set include directory correctly</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">13</emphasis>
        </entry>
        <entry>Wed 2012-11-28 23:13:00 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">re-branding</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">12</emphasis>
        </entry>
        <entry>Wed 2012-11-28 14:09:17 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">fix typo</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">11</emphasis>
        </entry>
        <entry>Wed 2012-11-28 12:30:33 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">more fixes, do not compile zlib library if system one is not found. Instead, add zlib source files to the libmysql_sources</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">10</emphasis>
        </entry>
        <entry>Wed 2012-11-28 03:00:18 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">More CMake fixes, use system zlib when possible</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">9</emphasis>
        </entry>
        <entry>Wed 2012-11-28 02:43:39 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">as-needed is not recognized on mint</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">8</emphasis>
        </entry>
        <entry>Wed 2012-11-28 03:29:05 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Further CMake fixes
ensure no unresolved symbols in shared library</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">7</emphasis>
        </entry>
        <entry>Wed 2012-11-28 01:04:21 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix export symbols from shared library on Windows, again</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">6</emphasis>
        </entry>
        <entry>Wed 2012-11-28 00:53:08 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fix  build if openssl is not found
various cosmetic bugs in cmake</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">5</emphasis>
        </entry>
        <entry>Tue 2012-11-27 09:57:10 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Fixed crash when trying to call mysql_close twice
Fixed mysql_config
Header changes</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">4</emphasis>
        </entry>
        <entry>Mon 2012-11-26 11:23:56 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">- Added documentation (docbook based)
- To build the documentation use cmake . -DBUILD_DOCS=yes
- minor fixes in tests</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">3</emphasis>
        </entry>
        <entry>Mon 2012-11-26 08:32:41 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Added openssl layer support
Imported libmysql unittests
Added simple ssl tests
minor cleanup</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">2</emphasis>
        </entry>
        <entry>Wed 2012-11-14 18:43:45 +0100</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">First implementation based on libmysql 3.23.58 and php's mysqlnd extension</entry>
      </row>
      <row>
        <entry>
          <emphasis role="strong">1</emphasis>
        </entry>
        <entry>Mon 2011-10-10 14:01:17 +0300</entry>
      </row>
      <row>
        <entry role="ma_table"/>
        <entry role="ma_table">Initial import</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>
 
</appendix>

  </appendix>
</book>
